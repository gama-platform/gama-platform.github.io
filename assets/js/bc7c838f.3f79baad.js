"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[51665],{3905:(e,n,r)=>{r.d(n,{Zo:()=>f,kt:()=>d});var t=r(67294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=t.createContext({}),s=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},f=function(e){var n=s(e.components);return t.createElement(c.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,f=l(e,["components","mdxType","originalType","parentName"]),u=s(r),m=o,d=u["".concat(c,".").concat(m)]||u[m]||p[m]||a;return r?t.createElement(d,i(i({ref:n},f),{},{components:r})):t.createElement(d,i({ref:n},f))}));function d(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=r[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},49756:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>f,contentTitle:()=>c,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var t=r(87462),o=r(63366),a=(r(67294),r(3905)),i=["components"],l={"^title":"Flow on Terrain"},c=void 0,s={unversionedId:"Flow_on_Terrain",id:"Flow_on_Terrain",title:"Flow_on_Terrain",description:"Path: Plugin models/Physics Engine/models/Flow on Terrain.gaml",source:"@site/../docs/Flow_on_Terrain.md",sourceDirName:".",slug:"/Flow_on_Terrain",permalink:"/wiki/next/Flow_on_Terrain",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/Flow_on_Terrain/_edit",tags:[],version:"current",frontMatter:{"^title":"Flow on Terrain"}},f={},u=[],p={toc:u},m="wrapper";function d(e){var n=e.components,r=(0,o.Z)(e,i);return(0,a.kt)(m,(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("img",{width:"960",alt:"Annotation 2023-04-15 192300_FlowOnTerrain",src:"https://user-images.githubusercontent.com/4437331/232243923-485c108e-1295-470b-852c-a48924ff4079.png"}),(0,a.kt)("p",null,"Path: Plugin models/Physics Engine/models/Flow on Terrain.gaml"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'\n/**\n* Name: Water flowing in the red river bed\n* Author: drogoul\n* Tags: \n*/\n\n\nmodel Terrain\n\nglobal parent: physical_world {\n    bool use_native <- true;\n    // We scale the DEM up a little\n    float z_scale <- 0.5;\n    float step <-  1.0/30;  \n    bool flowing <- true;\n    point gravity <- {-z_scale/4, z_scale, -9.81};\n    int number_of_water_units <- 1 min: 0 max: 10;\n    list<point> origins_of_flow <- [{17,3}, {55,3}];\n    field terrain <- field(grid_file("../images/DEM/RedRiver.asc"));\n\n    geometry shape <- box({terrain.columns, terrain.rows, max(terrain)*z_scale});\n    float friction <- 0.0;\n    float restitution <- 0.5;\n\n\n    init {\n        do register([self]);\n    }\n\n    reflex flow {\n            loop origin_of_flow over: origins_of_flow {\n                int x <- int(min(terrain.columns - 1, max(0, origin_of_flow.x + rnd(10) - 5)));\n                int y <- int(min(terrain.rows - 1, max(0, origin_of_flow.y + rnd(10) - 5)));\n                point p <- origin_of_flow + {rnd(10) - 5, rnd(10 - 5), terrain[x, y] + 4};\n                create water number: number_of_water_units with: [location::p];\n            }\n    }\n}\n\nspecies water skills: [dynamic_body] {\n    geometry shape <- sphere(1.0);\n    float friction <- 0.0;\n    float damping <- 0.0;\n    float mass <- 0.5;\n    rgb color <- one_of(brewer_colors("Blues"));\n    \n\n    aspect default {\n        if (location.y > 10){\n        draw shape color: color;}\n    }\n    \n        \n    reflex manage_location when: location.z < -20 {\n        do die;\n    }\n\n} \n\nexperiment "3D view" type: gui {\n    \n    string camera_loc <- #from_up_front;\n    int distance <- 200;\n    \n    action _init_ {\n        create simulation with: [z_scale::0.3];\n        create simulation with: [z_scale::1.0];\n        create simulation with: [z_scale::2.0];\n        create simulation with: [z_scale::3.0];\n    } \n    parameter "Location of the camera" var: camera_loc among: [#from_up_front, #from_above, #from_up_left, #from_up_right];\n    parameter "Distance of the camera" var: distance min: 1 max: 1000 slider: true;\n    parameter "Number of water agents per cycle" var: number_of_water_units;\n    \n    output {\n        layout #split;\n        display "Flow" type: 3d background: #white   antialias: false {\n            camera #default location: camera_loc distance: distance dynamic: true;\n            graphics world {\n                draw "Scale: " + z_scale color: #cadetblue font: font("Helvetica", 18, #bold) at: {world.location.x, -10, 25} anchor: #center depth: 2 rotate: -90::{1,0,0};\n                draw aabb wireframe: true color: #lightblue;\n            }\n            mesh terrain grayscale: true triangulation: true refresh: false scale: z_scale smooth: 2;\n            species water;\n            event #mouse_down {\n                point p <- #user_location;\n                origins_of_flow << {p.x, p.y};\n            }\n        }\n\n    }}\n    \n\n')))}d.isMDXComponent=!0}}]);