"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[85837],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>f});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=i.createContext({}),s=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=s(e.components);return i.createElement(p.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=s(n),d=r,f=u["".concat(p,".").concat(d)]||u[d]||c[d]||a;return n?i.createElement(f,o(o({ref:t},m),{},{components:n})):i.createElement(f,o({ref:t},m))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<a;s++)o[s]=n[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},97845:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>p,default:()=>f,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var i=n(87462),r=n(63366),a=(n(67294),n(3905)),o=["components"],l={title:"Defining GUI Experiment"},p=void 0,s={unversionedId:"DefiningGUIExperiment",id:"version-1.9.0/DefiningGUIExperiment",title:"Defining GUI Experiment",description:"[//]: # (startConcept|gui_experiments)",source:"@site/versioned_docs/version-1.9.0/DefiningGUIExperiment.md",sourceDirName:".",slug:"/DefiningGUIExperiment",permalink:"/wiki/DefiningGUIExperiment",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/DefiningGUIExperiment/_edit",tags:[],version:"1.9.0",frontMatter:{title:"Defining GUI Experiment"},sidebar:"main",previous:{title:"Multi-level architecture",permalink:"/wiki/MultiLevelArchitecture"},next:{title:"Defining Parameters",permalink:"/wiki/DefiningParameters"}},m={},u=[{value:"Types of experiments",id:"types-of-experiments",level:2},{value:"Experiment attributes",id:"experiment-attributes",level:2},{value:"Experiment facets",id:"experiment-facets",level:2},{value:"Defining displays layout",id:"defining-displays-layout",level:2},{value:"Defining elements of the GUI experiment",id:"defining-elements-of-the-gui-experiment",level:2}],c={toc:u},d="wrapper";function f(e){var t=e.components,n=(0,r.Z)(e,o);return(0,a.kt)(d,(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"When you execute your simulation, you will often need to display some information. For each simulation, you can define some inputs, outputs and behaviors:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The inputs will be composed of parameters manipulated by the user for each simulation."),(0,a.kt)("li",{parentName:"ul"},"The behaviors will be used to define behavior executed at each step of the ",(0,a.kt)("strong",{parentName:"li"},"experiment"),"."),(0,a.kt)("li",{parentName:"ul"},"The outputs will be composed of displays, monitors and inspectors. They will be defined inside the scope ",(0,a.kt)("inlineCode",{parentName:"li"},"output"),". The definition of their layout can also be set with the ",(0,a.kt)("inlineCode",{parentName:"li"},"layout")," statement.")),(0,a.kt)("p",null,"A typical GUI experiment code follows this pattern:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"experiment exp_name type: gui {\n    [input]\n    [behaviors]\n    output {\n        layout [layout_option]\n        [display statements]\n        [monitor statements]\n    }\n}\n")),(0,a.kt)("h2",{id:"types-of-experiments"},"Types of experiments"),(0,a.kt)("p",null,"You can define fours types of experiments (through the facet ",(0,a.kt)("inlineCode",{parentName:"p"},"type"),"):"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"gui"))," experiments (the default type) are used to play an experiment and displays its outputs. It is also used when the user wants to interact with the simulation."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"batch"))," experiments are used to play an experiment several times (usually with other input values), used for model exploration. We will ",(0,a.kt)("a",{parentName:"li",href:"BatchExperiments"},"come back to this notion a bit further in the tutorial"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"test"))," experiments are used to ",(0,a.kt)("a",{parentName:"li",href:"Writing_Tests"},"write unit tests")," on a model (used to ensure its quality)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"memorize"))," experiments are GUI experiments in which ",(0,a.kt)("a",{parentName:"li",href:"Save-and-restore-simulations"},"the simulation state is kept in memory and the user can backtrack to any previous step"),".")),(0,a.kt)("h2",{id:"experiment-attributes"},"Experiment attributes"),(0,a.kt)("p",null,"Inside experiment scope, you can access to some built-in attributes which can be useful, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"minimum_cycle_duration"),", to force the duration of one cycle. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"experiment my_experiment type: gui {\n    float minimum_cycle_duration <- 2.0#minute;\n}\n")),(0,a.kt)("p",null,"In addition, the attribute ",(0,a.kt)("inlineCode",{parentName:"p"},"simulations")," contain the list of all the simulation agents that are running in the current experiment. Whereas the attribute ",(0,a.kt)("inlineCode",{parentName:"p"},"simulation")," represents a single simulation, the last element of the simulation list."),(0,a.kt)("h2",{id:"experiment-facets"},"Experiment facets"),(0,a.kt)("p",null,"Finally, in the case of a GUI experiment, the facets ",(0,a.kt)("inlineCode",{parentName:"p"},"autorun")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"benchmark")," can be used as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"experiment name type: gui autorun: true benchmark: true { }\n")),(0,a.kt)("p",null,"When ",(0,a.kt)("inlineCode",{parentName:"p"},"autorun")," is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," the launch of the experiment will be followed automatically by its run. When ",(0,a.kt)("inlineCode",{parentName:"p"},"benchmark")," is set to true, GAMA records the number of invocations and running time of the statements and operators of the simulations launched in this experiment. The results are automatically saved in a csv file in a folder called 'benchmarks' when the experiment is closed."),(0,a.kt)("p",null,"Other built-ins are available, to learn more about, go to the page ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"ExperimentBuiltIn"},"experiment built-in")),"."),(0,a.kt)("h2",{id:"defining-displays-layout"},"Defining displays layout"),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"layout")," can be added to ",(0,a.kt)("inlineCode",{parentName:"p"},"output")," to specify the layout of the various displays defined below (e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"#none"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"#split"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"#stack"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"#vertical")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"#horizontal"),"). It will also define which elements of the interface are displayed: ",(0,a.kt)("inlineCode",{parentName:"p"},"parameters"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"navigator"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"editors"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"consoles"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"toolbars"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"tray"),", or ",(0,a.kt)("inlineCode",{parentName:"p"},"tabs")," facets (expecting a boolean value). You will find more detailed information in the ",(0,a.kt)("a",{parentName:"p",href:"Statements#layout"},"statement's documentation")),(0,a.kt)("h2",{id:"defining-elements-of-the-gui-experiment"},"Defining elements of the GUI experiment"),(0,a.kt)("p",null,"In this part, we will focus on the ",(0,a.kt)("strong",{parentName:"p"},"gui experiments"),". We will start with learning how to ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"DefiningParameters"},"define input parameters")),", then we will study the outputs, such as ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"DefiningDisplaysGeneralities"},"displays")),", ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"DefiningMonitorsAndInspectors"},"monitors and inspectors")),", and ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"DefiningExportFiles"},"export files")),". We will finish this part with how to define ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"DefiningUserInteraction"},"user commands")),"."))}f.isMDXComponent=!0}}]);