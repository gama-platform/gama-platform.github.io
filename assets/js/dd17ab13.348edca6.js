"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[49318],{60545:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var i=t(74848),o=t(28453);const s={title:"Writing Models"},a=void 0,r={id:"WritingModels",title:"Writing Models",description:'Models in GAMA play the same role as classes in Java or C++: they represent both the knowledge about a particular phenomenon a user wants to simulate and the way(s) to simulate it. A model is nothing more than a text file (or a collection of text files that refer to each other), which contains instructions in a specific language called GAML (for "GAMA Modeling Language").',source:"@site/versioned_docs/version-1.9.2/WritingModels.md",sourceDirName:".",slug:"/WritingModels",permalink:"/wiki/1.9.2/WritingModels",draft:!1,unlisted:!1,editUrl:"https://github.com/gama-platform/gama/wiki/WritingModels/_edit",tags:[],version:"1.9.2",frontMatter:{title:"Writing Models"}},l={},c=[];function d(e){const n={a:"a",em:"em",li:"li",ol:"ol",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Models in GAMA play the same role as classes in Java or C++: they represent both the knowledge about a particular phenomenon a user wants to simulate and the way(s) to simulate it. A model is nothing more than a text file (or a collection of text files that refer to each other), which contains instructions in a ",(0,i.jsx)(n.a,{href:"GamlLanguage",children:"specific language"}),' called GAML (for "GAMA Modeling Language").\nA model can then be theoretically edited using any text processor and later loaded into GAMA to ',(0,i.jsx)(n.a,{href:"RunningExperiments",children:"run experiments"}),". However, because of the richness of the language, using a dedicated tool (with online help, live validation) is clearly the best way to write correct models."]}),"\n",(0,i.jsxs)(n.p,{children:["The GUI version of GAMA offers such an ",(0,i.jsx)(n.em,{children:"integrated model development environment"}),", which is composed of a set of coupled tools to support modelers in the ",(0,i.jsx)(n.a,{href:"EditingModels",children:"edition"}),", ",(0,i.jsx)(n.a,{href:"ValidationOfModels",children:"validation"}),", and ",(0,i.jsx)(n.a,{href:"WorkspaceProjectsAndModels",children:"management"})," of models. An optional ",(0,i.jsx)(n.a,{href:"G__GraphicalEditor",children:"graphical modeling editor"})," can also be installed on top of these tools to support higher-level modeling activities (similar to what a UML editor with Java bindings may provide to a Java development environment)."]}),"\n",(0,i.jsxs)(n.p,{children:["This chapter contains a description of these different tools and a comprehensive guide to the ",(0,i.jsx)(n.a,{href:"GamlLanguage",children:"GAML language"}),", including a ",(0,i.jsx)(n.a,{href:"GamlReference",children:"complete reference"})," of all the built-in structures and facilities offered in its current version."]}),"\n",(0,i.jsx)(n.p,{children:"Please proceed to one of these sections :"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"EditingModels",children:"Editing Models"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"GamlLanguage",children:"GAML Language"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"GamlReference",children:"GAML Reference"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"OptimizingModels",children:"Optimizing Models"})}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var i=t(96540);const o={},s=i.createContext(o);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);