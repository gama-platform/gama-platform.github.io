"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[88743],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>_});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=s(n),u=a,_=c["".concat(p,".").concat(u)]||c[u]||m[u]||o;return n?r.createElement(_,i(i({ref:t},d),{},{components:n})):r.createElement(_,i({ref:t},d))}));function _(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},77155:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>p,default:()=>_,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),i=["components"],l={title:"7. Automatic Road Repair"},p=void 0,s={unversionedId:"RoadTrafficModel_step7",id:"version-1.8.1/RoadTrafficModel_step7",title:"7. Automatic Road Repair",description:"This 7th step illustrates how to select in a list of elements that optimizes a given function.",source:"@site/versioned_docs/version-1.8.1/RoadTrafficModel_step7.md",sourceDirName:".",slug:"/RoadTrafficModel_step7",permalink:"/wiki/1.8.1/RoadTrafficModel_step7",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/RoadTrafficModel_step7/_edit",tags:[],version:"1.8.1",frontMatter:{title:"7. Automatic Road Repair"},sidebar:"tuto",previous:{title:"6. Charts",permalink:"/wiki/1.8.1/RoadTrafficModel_step6"},next:{title:"3D Tutorial",permalink:"/wiki/1.8.1/ThreeD"}},d={},c=[{value:"Formulation",id:"formulation",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"parameters",id:"parameters",level:3},{value:"road repairing",id:"road-repairing",level:3},{value:"Complete Model",id:"complete-model",level:2}],m={toc:c},u="wrapper";function _(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)(u,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This 7th step illustrates how to select in a list of elements that optimizes a given function."),(0,o.kt)("h2",{id:"formulation"},"Formulation"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Add a new parameter, ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"repair_time")),", that is equal to 2."),(0,o.kt)("li",{parentName:"ul"},"Every ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"repair_time")),", the ",(0,o.kt)("inlineCode",{parentName:"li"},"road")," with the highest ",(0,o.kt)("inlineCode",{parentName:"li"},"destruction_coeff")," value is repaired (set its ",(0,o.kt)("inlineCode",{parentName:"li"},"destruction_coeff")," to 1).")),(0,o.kt)("h2",{id:"model-definition"},"Model Definition"),(0,o.kt)("h3",{id:"parameters"},"parameters"),(0,o.kt)("p",null,"We add a new parameter: the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"repair_time")),"."),(0,o.kt)("p",null,"In the global section, we define the ",(0,o.kt)("inlineCode",{parentName:"p"},"repair_time")," variable:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"int repair_time <- 2 ;\n")),(0,o.kt)("p",null,"In the experiment section, we define the associated parameter:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'parameter "Number of steps between two road repairs" var: repair_time category: "Road" ;\n')),(0,o.kt)("h3",{id:"road-repairing"},"road repairing"),(0,o.kt)("p",null,"We have to add a reflex method in the global section that is triggered every ",(0,o.kt)("inlineCode",{parentName:"p"},"repair_time")," hours. This reflex selects, thanks to the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"with_max_of"))," operator the ",(0,o.kt)("inlineCode",{parentName:"p"},"road")," agent with the highest ",(0,o.kt)("inlineCode",{parentName:"p"},"destruction_coeff")," value, then sets this value at 1."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"global {\n    ...\n    reflex repair_road when: every(repair_time #hour) {\n    road the_road_to_repair <- road with_max_of (each.destruction_coeff) ;\n    ask the_road_to_repair {\n        destruction_coeff <- 1.0 ;\n    }\n    }\n}\n")),(0,o.kt)("h2",{id:"complete-model"},"Complete Model"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'model tutorial_gis_city_traffic\n\nglobal {\n    file shape_file_buildings <- file("../includes/building.shp");\n    file shape_file_roads <- file("../includes/road.shp");\n    file shape_file_bounds <- file("../includes/bounds.shp");\n    geometry shape <- envelope(shape_file_bounds);\n    float step <- 10 #mn;\n    date starting_date <- date("2019-09-01-00-00-00");  \n    int nb_people <- 100;\n    int min_work_start <- 6;\n    int max_work_start <- 8;\n    int min_work_end <- 16; \n    int max_work_end <- 20; \n    float min_speed <- 1.0 #km / #h;\n    float max_speed <- 5.0 #km / #h; \n    float destroy <- 0.02;\n    int repair_time <- 2 ;\n    graph the_graph;\n    \n    init {\n    create building from: shape_file_buildings with: [type::string(read ("NATURE"))] {\n        if type="Industrial" {\n        color <- #blue ;\n        }\n    }\n    create road from: shape_file_roads ;\n    map<road,float> weights_map <- road as_map (each:: (each.destruction_coeff * each.shape.perimeter));\n    the_graph <- as_edge_graph(road) with_weights weights_map;  \n        \n    list<building> residential_buildings <- building where (each.type="Residential");\n    list<building> industrial_buildings <- building  where (each.type="Industrial") ;\n    create people number: nb_people {\n        speed <- rnd(min_speed, max_speed);\n        start_work <- rnd (min_work_start, max_work_start);\n        end_work <- rnd(min_work_end, max_work_end);\n        living_place <- one_of(residential_buildings) ;\n        working_place <- one_of(industrial_buildings) ;\n        objective <- "resting";\n        location <- any_location_in (living_place); \n    }\n    }\n    \n    reflex update_graph{\n    map<road,float> weights_map <- road as_map (each:: (each.destruction_coeff * each.shape.perimeter));\n    the_graph <- the_graph with_weights weights_map;\n    }\n\n    reflex repair_road when: every(repair_time #hour ) {\n    road the_road_to_repair <- road with_max_of (each.destruction_coeff) ;\n    ask the_road_to_repair {\n        destruction_coeff <- 1.0 ;\n    }\n    }\n}\n\nspecies building {\n    string type; \n    rgb color <- #gray ;\n    \n    aspect base {\n    draw shape color: color ;\n    }\n}\n\nspecies road  {\n    float destruction_coeff <- rnd(1.0,2.0) max: 2.0;\n    int colorValue <- int(255*(destruction_coeff - 1)) update: int(255*(destruction_coeff - 1));\n    rgb color <- rgb(min([255, colorValue]),max ([0, 255 - colorValue]),0)  update: rgb(min([255, colorValue]),max ([0, 255 - colorValue]),0) ;\n    \n    aspect base {\n    draw shape color: color ;\n    }\n}\n\nspecies people skills:[moving] {\n    rgb color <- #yellow ;\n    building living_place <- nil ;\n    building working_place <- nil ;\n    int start_work ;\n    int end_work  ;\n    string objective ; \n    point the_target <- nil ;\n        \n    reflex time_to_work when: current_date.hour = start_work and objective = "resting"{\n    objective <- "working" ;\n    the_target <- any_location_in (working_place);\n    }\n        \n    reflex time_to_go_home when: current_date.hour = end_work and objective = "working"{\n    objective <- "resting" ;\n    the_target <- any_location_in (living_place); \n    } \n     \n    reflex move when: the_target != nil {\n    path path_followed <- goto(target: the_target, on:the_graph, return_path: true);\n    list<geometry> segments <- path_followed.segments;\n    loop line over: segments {\n        float dist <- line.perimeter;\n        ask road(path_followed agent_from_geometry line) { \n        destruction_coeff <- destruction_coeff + (destroy * dist / shape.perimeter);\n        }\n    }\n    if the_target = location {\n        the_target <- nil ;\n    }\n    }\n    \n    aspect base {\n    draw circle(10) color: color border: #black;\n    }\n}\n\nexperiment road_traffic type: gui {\n    parameter "Shapefile for the buildings:" var: shape_file_buildings category: "GIS" ;\n    parameter "Shapefile for the roads:" var: shape_file_roads category: "GIS" ;\n    parameter "Shapefile for the bounds:" var: shape_file_bounds category: "GIS" ;\n    parameter "Number of people agents" var: nb_people category: "People" ;\n    parameter "Earliest hour to start work" var: min_work_start category: "People" min: 2 max: 8;\n    parameter "Latest hour to start work" var: max_work_start category: "People" min: 8 max: 12;\n    parameter "Earliest hour to end work" var: min_work_end category: "People" min: 12 max: 16;\n    parameter "Latest hour to end work" var: max_work_end category: "People" min: 16 max: 23;\n    parameter "minimal speed" var: min_speed category: "People" min: 0.1 #km/#h ;\n    parameter "maximal speed" var: max_speed category: "People" max: 10 #km/#h;\n    parameter "Value of destruction when a people agent takes a road" var: destroy category: "Road" ;\n    parameter "Number of hours between two road repairs" var: repair_time category: "Road" ;\n    \n    output {\n    display city_display type:opengl {\n        species building aspect: base ;\n        species road aspect: base ;\n        species people aspect: base ;\n    }\n    display chart_display refresh: every(10#cycles) { \n        chart "Road Status" type: series size: {1, 0.5} position: {0, 0} {\n        data "Mean road destruction" value: mean (road collect each.destruction_coeff) style: line color: #green ;\n        data "Max road destruction" value: road max_of each.destruction_coeff style: line color: #red ;\n        }\n        chart "People Objectif" type: pie style: exploded size: {1, 0.5} position: {0, 0.5}{\n        data "Working" value: people count (each.objective="working") color: #magenta ;\n        data "Resting" value: people count (each.objective="resting") color: #blue ;\n        }\n    }\n    }\n}\n')))}_.isMDXComponent=!0}}]);