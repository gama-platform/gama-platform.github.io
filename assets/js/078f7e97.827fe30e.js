"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[29554],{87667:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var o=n(74848),a=n(28453);const r={title:"5. Dynamic weights"},i=void 0,s={id:"RoadTrafficModel_step5",title:"5. Dynamic weights",description:"This 5th step illustrates how to obtain the shortest path from a point to another one and to update the weights of an existing graph.",source:"@site/versioned_docs/version-1.8.1/RoadTrafficModel_step5.md",sourceDirName:".",slug:"/RoadTrafficModel_step5",permalink:"/wiki/1.8.1/RoadTrafficModel_step5",draft:!1,unlisted:!1,editUrl:"https://github.com/gama-platform/gama/wiki/RoadTrafficModel_step5/_edit",tags:[],version:"1.8.1",frontMatter:{title:"5. Dynamic weights"},sidebar:"tuto",previous:{title:"4. Weight for Road Network",permalink:"/wiki/1.8.1/RoadTrafficModel_step4"},next:{title:"6. Charts",permalink:"/wiki/1.8.1/RoadTrafficModel_step6"}},l={},d=[{value:"Formulation",id:"formulation",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"global section",id:"global-section",level:3},{value:"people agents",id:"people-agents",level:3},{value:"Complete Model",id:"complete-model",level:2}];function p(e){const t={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"This 5th step illustrates how to obtain the shortest path from a point to another one and to update the weights of an existing graph."}),"\n",(0,o.jsx)(t.h2,{id:"formulation",children:"Formulation"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["At initialization, the value of the ",(0,o.jsx)(t.code,{children:"destruction_coeff"})," of the ",(0,o.jsx)(t.code,{children:"road"})," agents will be equal to 1."]}),"\n",(0,o.jsxs)(t.li,{children:["Add a new parameter: the ",(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.code,{children:"destroy"})})," parameter that represents the value of destruction when a people agent takes a road. By default, it is equal to 0.02."]}),"\n",(0,o.jsxs)(t.li,{children:["When a people agent arrive at its destination (home or work), it updates the ",(0,o.jsx)(t.code,{children:"destruction_coeff"})," of the ",(0,o.jsx)(t.code,{children:"road"}),' agents it took to reach its destination:  "destruction_coeff = destruction_coeff - destroy". Then, the graph is updated.']}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"model-definition",children:"Model Definition"}),"\n",(0,o.jsx)(t.h3,{id:"global-section",children:"global section"}),"\n",(0,o.jsxs)(t.p,{children:["We add the ",(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.code,{children:"destroy"})})," parameter."]}),"\n",(0,o.jsxs)(t.p,{children:["In the global section, we define the ",(0,o.jsx)(t.code,{children:"destroy"})," variable:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"float destroy <- 0.02;\n"})}),"\n",(0,o.jsx)(t.p,{children:"In the experiment section, we add a parameter:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'parameter "Value of destruction when a people agent takes a road" var: destroy category: "Road" ;\n'})}),"\n",(0,o.jsxs)(t.p,{children:["We define a new reflex that updates the graph at each simulation step. For that, we use the ",(0,o.jsx)(t.code,{children:"with_weights"})," operator. This operator allows to update the weights of an existing graph."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"global {\n    ...\n    reflex update_graph{\n        map<road,float> weights_map <- road as_map (each:: (each.destruction_coeff * each.shape.perimeter));\n        the_graph <- the_graph with_weights weights_map;\n     }\n}\n"})}),"\n",(0,o.jsx)(t.h3,{id:"people-agents",children:"people agents"}),"\n",(0,o.jsxs)(t.p,{children:["At each time-step, after a ",(0,o.jsx)(t.code,{children:"people"})," agent has moved over one or multiple road segments, it updates the value of the destruction coefficient of ",(0,o.jsx)(t.code,{children:"road"})," agents crossed (i.e. roads belonging to the path followed). We have for that to set the argument ",(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.code,{children:"return_path"})})," to ",(0,o.jsx)(t.code,{children:"true"})," in the ",(0,o.jsx)(t.code,{children:"goto"})," action to obtain the path followed, then to compute the list of agents concerned by this path with the operator ",(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.code,{children:"agent_from_geometry"})}),"."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"species people skills: [moving]{\n    ...\n    reflex move when: the_target != nil {\n\tpath path_followed <- goto(target: the_target, on:the_graph, return_path: true);\n\tlist<geometry> segments <- path_followed.segments;\n\tloop line over: segments {\n\t    float dist <- line.perimeter;\n\t    ask road(path_followed agent_from_geometry line) { \n\t\tdestruction_coeff <- destruction_coeff + (destroy * dist / shape.perimeter);\n\t    }\n\t}\n\tif the_target = location {\n\t    the_target <- nil ;\n\t}\n    }\n    ...\n}\t\n"})}),"\n",(0,o.jsx)(t.h2,{id:"complete-model",children:"Complete Model"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'model tutorial_gis_city_traffic\n\nglobal {\n    file shape_file_buildings <- file("../includes/building.shp");\n    file shape_file_roads <- file("../includes/road.shp");\n    file shape_file_bounds <- file("../includes/bounds.shp");\n    geometry shape <- envelope(shape_file_bounds);\n    float step <- 10 #mn;\n    date starting_date <- date("2019-09-01-00-00-00");\t\n    int nb_people <- 100;\n    int min_work_start <- 6;\n    int max_work_start <- 8;\n    int min_work_end <- 16; \n    int max_work_end <- 20; \n    float min_speed <- 1.0 #km / #h;\n    float max_speed <- 5.0 #km / #h; \n    float destroy <- 0.02;\n    graph the_graph;\n\t\n    init {\n\tcreate building from: shape_file_buildings with: [type::string(read ("NATURE"))] {\n\t    if type="Industrial" {\n\t\tcolor <- #blue ;\n\t    }\n\t}\n\tcreate road from: shape_file_roads ;\n\tmap<road,float> weights_map <- road as_map (each:: (each.destruction_coeff * each.shape.perimeter));\n\tthe_graph <- as_edge_graph(road) with_weights weights_map;\t\n\t\t\n\tlist<building> residential_buildings <- building where (each.type="Residential");\n\tlist<building> industrial_buildings <- building  where (each.type="Industrial") ;\n\tcreate people number: nb_people {\n\t    speed <- rnd(min_speed, max_speed);\n\t    start_work <- rnd (min_work_start, max_work_start);\n\t    end_work <- rnd(min_work_end, max_work_end);\n\t    living_place <- one_of(residential_buildings) ;\n\t    working_place <- one_of(industrial_buildings) ;\n\t    objective <- "resting";\n\t    location <- any_location_in (living_place); \n\t}\n    }\n\t\n    reflex update_graph{\n\tmap<road,float> weights_map <- road as_map (each:: (each.destruction_coeff * each.shape.perimeter));\n\tthe_graph <- the_graph with_weights weights_map;\n    }\n}\n\nspecies building {\n    string type; \n    rgb color <- #gray ;\n\t\n    aspect base {\n\tdraw shape color: color ;\n    }\n}\n\nspecies road  {\n    float destruction_coeff <- rnd(1.0,2.0) max: 2.0;\n    int colorValue <- int(255*(destruction_coeff - 1)) update: int(255*(destruction_coeff - 1));\n    rgb color <- rgb(min([255, colorValue]),max ([0, 255 - colorValue]),0)  update: rgb(min([255, colorValue]),max ([0, 255 - colorValue]),0) ;\n\t\n    aspect base {\n\tdraw shape color: color ;\n    }\n}\n\nspecies people skills:[moving] {\n    rgb color <- #yellow ;\n    building living_place <- nil ;\n    building working_place <- nil ;\n    int start_work ;\n    int end_work  ;\n    string objective ; \n    point the_target <- nil ;\n\t\t\n    reflex time_to_work when: current_date.hour = start_work and objective = "resting"{\n\tobjective <- "working" ;\n\tthe_target <- any_location_in (working_place);\n    }\n\t\t\n    reflex time_to_go_home when: current_date.hour = end_work and objective = "working"{\n\tobjective <- "resting" ;\n\tthe_target <- any_location_in (living_place); \n    } \n\t \n    reflex move when: the_target != nil {\n\tpath path_followed <- goto(target: the_target, on:the_graph, return_path: true);\n\tlist<geometry> segments <- path_followed.segments;\n\tloop line over: segments {\n\t    float dist <- line.perimeter;\n\t    ask road(path_followed agent_from_geometry line) { \n\t\tdestruction_coeff <- destruction_coeff + (destroy * dist / shape.perimeter);\n\t    }\n\t}\n\tif the_target = location {\n\t    the_target <- nil ;\n\t}\n    }\n\t\n    aspect base {\n\tdraw circle(10) color: color border: #black;\n    }\n}\n\nexperiment road_traffic type: gui {\n    parameter "Shapefile for the buildings:" var: shape_file_buildings category: "GIS" ;\n    parameter "Shapefile for the roads:" var: shape_file_roads category: "GIS" ;\n    parameter "Shapefile for the bounds:" var: shape_file_bounds category: "GIS" ;\n    parameter "Number of people agents" var: nb_people category: "People" ;\n    parameter "Earliest hour to start work" var: min_work_start category: "People" min: 2 max: 8;\n    parameter "Latest hour to start work" var: max_work_start category: "People" min: 8 max: 12;\n    parameter "Earliest hour to end work" var: min_work_end category: "People" min: 12 max: 16;\n    parameter "Latest hour to end work" var: max_work_end category: "People" min: 16 max: 23;\n    parameter "minimal speed" var: min_speed category: "People" min: 0.1 #km/#h ;\n    parameter "maximal speed" var: max_speed category: "People" max: 10 #km/#h;\n    parameter "Value of destruction when a people agent takes a road" var: destroy category: "Road" ;\n\t\n    output {\n\tdisplay city_display type:opengl {\n\t    species building aspect: base ;\n\t    species road aspect: base ;\n\t    species people aspect: base ;\n\t}\n    }\n}\n'})})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>s});var o=n(96540);const a={},r=o.createContext(a);function i(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);