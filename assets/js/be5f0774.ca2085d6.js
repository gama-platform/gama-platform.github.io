"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[61219],{52845:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"PseudoVariables","title":"Pseudo-variables","description":"The expressions known as pseudo-variables are special read-only variables that are not declared anywhere (at least not in a species), and which represent a value that changes depending on the context of execution.","source":"@site/../docs/PseudoVariables.md","sourceDirName":".","slug":"/PseudoVariables","permalink":"/wiki/next/PseudoVariables","draft":false,"unlisted":false,"editUrl":"https://github.com/gama-platform/gama/wiki/PseudoVariables/_edit","tags":[],"version":"current","frontMatter":{"title":"Pseudo-variables"},"sidebar":"main","previous":{"title":"Units and constants","permalink":"/wiki/next/UnitsAndConstants"},"next":{"title":"Variables and Attributes","permalink":"/wiki/next/VariablesAndAttributes"}}');var i=s(74848),r=s(28453);const a={title:"Pseudo-variables"},l=void 0,c={},o=[{value:"Table of contents",id:"table-of-contents",level:2},{value:"self",id:"self",level:2},{value:"super",id:"super",level:2},{value:"myself",id:"myself",level:2},{value:"each",id:"each",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["The expressions known as ",(0,i.jsx)(n.strong,{children:"pseudo-variables"})," are special read-only variables that are not declared anywhere (at least not in a species), and which represent a value that changes depending on the context of execution."]}),"\n",(0,i.jsx)(n.h2,{id:"table-of-contents",children:"Table of contents"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#pseudo-variables",children:"Pseudo-variables"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#self",children:"self"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#myself",children:"myself"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#each",children:"each"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#super",children:"super"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"self",children:"self"}),"\n",(0,i.jsxs)(n.p,{children:["The pseudo-variable ",(0,i.jsx)(n.code,{children:"self"})," always holds a reference to the agent executing the current statement."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Example (sets the ",(0,i.jsx)(n.code,{children:"friend"})," attribute of another random agent of the same species to ",(0,i.jsx)(n.code,{children:"self"})," and conversely):"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"friend potential_friend <- one_of (species(self) - self);\nif potential_friend != nil {\n    potential_friend.friend <- self;\n    friend <- potential_friend;\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"super",children:"super"}),"\n",(0,i.jsxs)(n.p,{children:["The pseudo-variable ",(0,i.jsx)(n.code,{children:"super"})," behaves exactly in the same way as ",(0,i.jsx)(n.code,{children:"self"})," except when calling an action, in which case it represents an indirection to the parent species. It is mainly used for allowing to call inherited actions within redefined ones. For instance:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"species parent {\n\n    int add(int a, int b) {\n        return a + b;\n    }\n\n}\n\nspecies child parent: parent {\n\n    int add(int a, int b) {\n        // Calls the action defined in 'parent' with modified arguments\n        return super.add(a + 20, b + 20);\n    }\n\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"myself",children:"myself"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"myself"})," plays the same role as ",(0,i.jsx)(n.code,{children:"self"})," but in remotely-executed code (",(0,i.jsx)(n.code,{children:"ask"}),", ",(0,i.jsx)(n.code,{children:"create"}),", ",(0,i.jsx)(n.code,{children:"capture"})," and ",(0,i.jsx)(n.code,{children:"release"})," statements), where it represents the ",(0,i.jsx)(n.em,{children:"calling"})," agent when the code is executed by the ",(0,i.jsx)(n.em,{children:"remote"})," agent."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Example (asks the first agent of my species to set its color to my color):"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"ask first (species (self)){\n    color <- myself.color;\n}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Example (create 10 new agents of the species of my species, share the energy between them, turn them towards me, and make them move 4 times to get closer to me):"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"create species (self) number: 10 {\n   energy <- myself.energy / 10.0;\n   loop times: 4 {\n       heading <- towards (myself);\n       do move;\n   }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"each",children:"each"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"each"})," is available only in the right-hand argument of ",(0,i.jsx)(n.a,{href:"OperatorsSZ#Iterator-operators",children:"iterators"}),".  It is a pseudo-variable that represents, in turn, each of the elements of the left-hand container. It can then take any type depending on the context."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"list<string> names <- my_species collect each.name;  // each is of type my_species\nint max <- max(['aa', 'bbb', 'cccc'] collect length(each)); // each is of type string\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var t=s(96540);const i={},r=t.createContext(i);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);