"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[40868],{16384:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>s});var o=n(17624),r=n(4552);const i={title:"4. Weight for Road Network"},a=void 0,d={id:"RoadTrafficModel_step4",title:"4. Weight for Road Network",description:"The present model will introduce how to design a road system, or graph, based on the road GIS data and provide each edge a weight representing the destruction level of the road.",source:"@site/versioned_docs/version-1.8.1/RoadTrafficModel_step4.md",sourceDirName:".",slug:"/RoadTrafficModel_step4",permalink:"/wiki/1.8.1/RoadTrafficModel_step4",draft:!1,unlisted:!1,editUrl:"https://github.com/gama-platform/gama/wiki/RoadTrafficModel_step4/_edit",tags:[],version:"1.8.1",frontMatter:{title:"4. Weight for Road Network"},sidebar:"tuto",previous:{title:"3. Movement of People",permalink:"/wiki/1.8.1/RoadTrafficModel_step3"},next:{title:"5. Dynamic weights",permalink:"/wiki/1.8.1/RoadTrafficModel_step5"}},l={},s=[{value:"Formulation",id:"formulation",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"road agent",id:"road-agent",level:3},{value:"weighted road network",id:"weighted-road-network",level:3},{value:"Complete Model",id:"complete-model",level:2}];function c(e){const t={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.M)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["The present model will introduce how to design a road system, or graph, based on the road GIS data and provide each edge a ",(0,o.jsx)(t.code,{children:"weight"})," representing the destruction level of the road."]}),"\n",(0,o.jsx)(t.h2,{id:"formulation",children:"Formulation"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Add a ",(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.code,{children:"destruction_coeff"})})," variable to the ",(0,o.jsx)(t.code,{children:"road"})," agent. The value of this variable is higher or equal to 1 or lower or equal to 2. At initialization, the value of this variable is randomly defined between 1 and 2."]}),"\n",(0,o.jsxs)(t.li,{children:["In the road network graph, more a road is worn out (",(0,o.jsx)(t.code,{children:"destruction_coeff"})," high), more a ",(0,o.jsx)(t.code,{children:"people"}),' agent takes time to go all over it. Then the value of the arc representing the road in the graph is equal to "length of the road ',(0,o.jsx)(t.code,{children:"*"}),' destruction_coeff".']}),"\n",(0,o.jsxs)(t.li,{children:["The color of the road depends on the ",(0,o.jsx)(t.code,{children:"destruction_coeff"}),'. If "destruction_coeff = 1", the road is green, if "destruction_coeff = 2", the road is red.']}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"model-definition",children:"Model Definition"}),"\n",(0,o.jsx)(t.h3,{id:"road-agent",children:"road agent"}),"\n",(0,o.jsxs)(t.p,{children:["We add a ",(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.code,{children:"destruction_coeff"})})," variable which initial value is randomly defined between 1 and 2 and which have a max of 2. The color of the agent will depend on this variable. In order to simplify the GAML code, we define a new variable  ",(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.code,{children:"colorValue"})})," that represents the value of red color and that will be defined between 0 and 255."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"species road  {\n    float destruction_coeff <- rnd(1.0,2.0) max: 2.0;\n    int colorValue <- int(255*(destruction_coeff - 1)) update: int(255*(destruction_coeff - 1));\n    rgb color <- rgb(min([255, colorValue]),max ([0, 255 - colorValue]),0)  update: rgb(min([255, colorValue]),max ([0, 255 - colorValue]),0) ;\n    ...\n}\n"})}),"\n",(0,o.jsx)(t.h3,{id:"weighted-road-network",children:"weighted road network"}),"\n",(0,o.jsxs)(t.p,{children:["In GAMA, adding a weight for a graph is very simple, we use the ",(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.code,{children:"with_weights"})})," operator with the graph for left-operand and a weight map for the right-operand. The weight map contains the weight of each edge: [edge1::weight1, edge2:: weight2,...]. In this model, the weight will be equal to the length of the road (perimeter of the polyline) ",(0,o.jsx)(t.strong,{children:"its destruction coefficient"}),"."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"    init {\n        ...\n        create road from: shape_file_roads ;\n        map<road,float> weights_map <- road as_map (each:: (each.destruction_coeff * each.shape.perimeter));\n        the_graph <- as_edge_graph(road) with_weights weights_map;\n        ...\n    }\n"})}),"\n",(0,o.jsx)(t.h2,{id:"complete-model",children:"Complete Model"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'model tutorial_gis_city_traffic\n\nglobal {\n    file shape_file_buildings <- file("../includes/building.shp");\n    file shape_file_roads <- file("../includes/road.shp");\n    file shape_file_bounds <- file("../includes/bounds.shp");\n    geometry shape <- envelope(shape_file_bounds);\n    float step <- 10 #mn;\n    date starting_date <- date("2019-09-01-00-00-00");\n    int nb_people <- 100;\n    int min_work_start <- 6;\n    int max_work_start <- 8;\n    int min_work_end <- 16; \n    int max_work_end <- 20; \n    float min_speed <- 1.0 #km / #h;\n    float max_speed <- 5.0 #km / #h; \n    graph the_graph;\n\t\n    init {\n\tcreate building from: shape_file_buildings with: [type::string(read ("NATURE"))] {\n\t    if type="Industrial" {\n\t\tcolor <- #blue ;\n\t    }\n\t}\n\tcreate road from: shape_file_roads ;\n\tmap<road,float> weights_map <- road as_map (each:: (each.destruction_coeff * each.shape.perimeter));\n\tthe_graph <- as_edge_graph(road) with_weights weights_map;\n\t\t\n\tlist<building> residential_buildings <- building where (each.type="Residential");\n\tlist<building> industrial_buildings <- building  where (each.type="Industrial") ;\n\tcreate people number: nb_people {\n\t    speed <- rnd(min_speed, max_speed);\n\t    start_work <- rnd (min_work_start, max_work_start);\n\t    end_work <- rnd(min_work_end, max_work_end);\n\t    living_place <- one_of(residential_buildings) ;\n\t    working_place <- one_of(industrial_buildings) ;\n\t    objective <- "resting";\n\t    location <- any_location_in (living_place); \n\t}\n    }\n}\n\n\nspecies building {\n    string type; \n    rgb color <- #gray  ;\n\t\n    aspect base {\n\tdraw shape color: color ;\n    }\n}\n\nspecies road  {\n    float destruction_coeff <- rnd(1.0,2.0) max: 2.0;\n    int colorValue <- int(255*(destruction_coeff - 1)) update: int(255*(destruction_coeff - 1));\n    rgb color <- rgb(min([255, colorValue]),max ([0, 255 - colorValue]),0)  update: rgb(min([255, colorValue]),max ([0, 255 - colorValue]),0) ;\n\t\n    aspect base {\n\tdraw shape color: color ;\n    }\n}\n\nspecies people skills:[moving] {\n    rgb color <- #yellow ;\n    building living_place <- nil ;\n    building working_place <- nil ;\n    int start_work ;\n    int end_work  ;\n    string objective ; \n    point the_target <- nil ;\n\t\t\n    reflex time_to_work when: current_date.hour = start_work and objective = "resting"{\n\tobjective <- "working" ;\n\tthe_target <- any_location_in (working_place);\n    }\n\t\t\n    reflex time_to_go_home when: current_date.hour = end_work and objective = "working"{\n\tobjective <- "resting" ;\n\tthe_target <- any_location_in (living_place); \n    } \n\t \n    reflex move when: the_target != nil {\n\tdo goto target: the_target on: the_graph ; \n\tif the_target = location {\n\t    the_target <- nil ;\n\t}\n    }\n\t\n    aspect base {\n\tdraw circle(10) color: color border: #black;\n    }\n}\n\n\nexperiment road_traffic type: gui {\n    parameter "Shapefile for the buildings:" var: shape_file_buildings category: "GIS" ;\n    parameter "Shapefile for the roads:" var: shape_file_roads category: "GIS" ;\n    parameter "Shapefile for the bounds:" var: shape_file_bounds category: "GIS" ;\t\n    parameter "Number of people agents" var: nb_people category: "People" ;\n    parameter "Earliest hour to start work" var: min_work_start category: "People" min: 2 max: 8;\n    parameter "Latest hour to start work" var: max_work_start category: "People" min: 8 max: 12;\n    parameter "Earliest hour to end work" var: min_work_end category: "People" min: 12 max: 16;\n    parameter "Latest hour to end work" var: max_work_end category: "People" min: 16 max: 23;\n    parameter "minimal speed" var: min_speed category: "People" min: 0.1 #km/#h ;\n    parameter "maximal speed" var: max_speed category: "People" max: 10 #km/#h;\n\t\n    output {\n\tdisplay city_display type: opengl {\n\t    species building aspect: base ;\n\t    species road aspect: base ;\n\t    species people aspect: base ;\n\t}\n    }\n}\n'})})]})}function h(e={}){const{wrapper:t}={...(0,r.M)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},4552:(e,t,n)=>{n.d(t,{I:()=>d,M:()=>a});var o=n(11504);const r={},i=o.createContext(r);function a(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);