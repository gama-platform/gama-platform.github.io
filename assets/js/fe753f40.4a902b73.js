"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[22139],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>h});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},f="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),f=p(a),m=i,h=f["".concat(s,".").concat(m)]||f[m]||u[m]||o;return a?n.createElement(h,r(r({ref:t},d),{},{components:a})):n.createElement(h,r({ref:t},d))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=a.length,r=new Array(o);r[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[f]="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=a[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},34166:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>p,toc:()=>f});var n=a(87462),i=a(63366),o=(a(67294),a(3905)),r=["components"],l={title:"1. Loading of GIS Data"},s=void 0,p={unversionedId:"RoadTrafficModel_step1",id:"RoadTrafficModel_step1",title:"1. Loading of GIS Data",description:"This first step Illustrates how to load GIS data (shapefiles) and to read attributes from GIS data.",source:"@site/../docs/RoadTrafficModel_step1.md",sourceDirName:".",slug:"/RoadTrafficModel_step1",permalink:"/wiki/next/RoadTrafficModel_step1",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/RoadTrafficModel_step1/_edit",tags:[],version:"current",frontMatter:{title:"1. Loading of GIS Data"},sidebar:"tuto",previous:{title:"Road Traffic",permalink:"/wiki/next/RoadTrafficModel"},next:{title:"2. People Agents",permalink:"/wiki/next/RoadTrafficModel_step2"}},d={},f=[{value:"Formulation",id:"formulation",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"species",id:"species",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Agentification of GIS data",id:"agentification-of-gis-data",level:3},{value:"Time step",id:"time-step",level:3},{value:"Environment",id:"environment",level:3},{value:"Complete Model",id:"complete-model",level:2}],u={toc:f};function m(e){var t=e.components,a=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This first step Illustrates how to load GIS data (shapefiles) and to read attributes from GIS data."),(0,o.kt)("h2",{id:"formulation"},"Formulation"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Set the time duration of a time step to 10 minutes."),(0,o.kt)("li",{parentName:"ul"},"Load, agentify and display two layers of GIS data (building and road). Agentifying a GIS element will allow us to give it a behavior later on (thus not being simply a static/passive object)."),(0,o.kt)("li",{parentName:"ul"},"Read the 'NATURE' attribute of the building data: the buildings of 'Residential' type will be colored in gray, the buildings of 'Industrial' type will be color in blue.")),(0,o.kt)("h2",{id:"model-definition"},"Model Definition"),(0,o.kt)("h3",{id:"species"},"species"),(0,o.kt)("p",null,"In this first model, we have to define two species of agents: the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"building"))," agents and the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"road"))," ones. These agents will not have a particular behavior (for the moment), they will just be displayed.\nFor each of these species, we define a new attribute: ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"color"))," of type ",(0,o.kt)("inlineCode",{parentName:"p"},"rgb"),', with for initial value: "black" for the ',(0,o.kt)("inlineCode",{parentName:"p"},"road"),' agent and "gray" (by default) for the ',(0,o.kt)("inlineCode",{parentName:"p"},"building")," agent. Concerning the ",(0,o.kt)("inlineCode",{parentName:"p"},"building")," species, we define a second attribute named ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"type")),' representing the type of the building ("Residential" or "Industrial").'),(0,o.kt)("p",null,"At last, we define an aspect for these species. In this model, we want to represent the geometry of the agent, we then use the statement ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"draw"))," that allows to draw a given geometry. In order to draw the geometry of the agent, we use the attribute ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"shape"))," (which is a built-in attribute of all agents)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"species building {\n    string type; \n    rgb color <- #gray  ;\n    \n    aspect base {\n    draw shape color: color ;\n    }\n}\n\nspecies road  {\n    rgb color <- #black ;\n    \n    aspect base {\n    draw shape color: color ;\n    }\n}\n")),(0,o.kt)("h3",{id:"parameters"},"Parameters"),(0,o.kt)("p",null,'GAMA allows to automatically read GIS data that are formatted as shapefiles. In order to let the user chooses his/her shapefiles, we define three parameters. One allowing the user to choose the road shapefile, one allowing him/her to choose the building shapefile, and, at last, one allowing him/her to choose the bounds shapefile. We will come back later on the notion of "bounds" in GAMA.'),(0,o.kt)("p",null,"Definition of the three global variables of type ",(0,o.kt)("inlineCode",{parentName:"p"},"file")," concerning the GIS files:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'global {\n    file shape_file_buildings <- file("../includes/building.shp");\n    file shape_file_roads <- file("../includes/road.shp");\n    file shape_file_bounds <- file("../includes/bounds.shp");\n}\n')),(0,o.kt)("p",null,"All shapefiles are available in the model library (under Library models -> Tutorials -> Road Traffic) or you can download them by following this ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/gama-platform/gama/tree/GAMA_1.9.0/msi.gama.models/models/Tutorials/Road%20Traffic/includes"},"GitHub link"),"."),(0,o.kt)("p",null,"In the experiment section, we add three parameters to allow the user to change the shapefile used directly through the UI:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'experiment road_traffic type: gui {\n    parameter "Shapefile for the buildings:" var: shape_file_buildings category: "GIS" ;\n    parameter "Shapefile for the roads:" var: shape_file_roads category: "GIS" ;\n    parameter "Shapefile for the bounds:" var: shape_file_bounds category: "GIS" ;\n}\n')),(0,o.kt)("h3",{id:"agentification-of-gis-data"},"Agentification of GIS data"),(0,o.kt)("p",null,"In GAMA, the agentification of GIS data is very straightforward: it only requires to use the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"create"))," command with the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"from"))," facet to pass the shapefile. Each object of the shapefile will be directly used to instantiate an agent of the specified species. The reading of an attribute in a shapefile is also very simple. It only requires to use the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"with"))," facet: the argument of this facet is a dictionary of which the keys are the names of the agent attributes and the value the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"read")),' operator followed by the name of the shapefile attribute ("NATURE" in our case).'),(0,o.kt)("p",null,"In the ",(0,o.kt)("inlineCode",{parentName:"p"},"init")," block of the ",(0,o.kt)("inlineCode",{parentName:"p"},"global")," block, we create the road and building agents from the shapefiles. Concerning the ",(0,o.kt)("inlineCode",{parentName:"p"},"building"),' agents, we read the "NATURE" attribute of the shapefile to initiate the value of the ',(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"type"))," attribute. If the ",(0,o.kt)("inlineCode",{parentName:"p"},"type"),' attribute is equal to "Industrial" set the ',(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"color")),' attribute to "blue".'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'global {\n    ...\n    init {\n        create building from: shape_file_buildings with: [type::read ("NATURE")] {\n            if type="Industrial" {\n                color <- #blue ;\n            }\n        }\n        create road from: shape_file_roads ;\n    }\n} \n')),(0,o.kt)("h3",{id:"time-step"},"Time step"),(0,o.kt)("p",null,"In GAMA, by default, a time step represents 1 second. It is possible to redefine this value by overriding the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"step"))," global variable. This value of the time step is used by the moving primitives of GAMA."),(0,o.kt)("p",null,"In our model, we define that a step represents 10 minutes. Note that it is possible to define the unit of a value by using ",(0,o.kt)("inlineCode",{parentName:"p"},"#")," + unit name, e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"#mn")," for minutes or ",(0,o.kt)("inlineCode",{parentName:"p"},"#km")," for kilometers."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"global {\n    ...\n    float step <- 10 #mn;\n    ...\n}\n")),(0,o.kt)("h3",{id:"environment"},"Environment"),(0,o.kt)("p",null,"Building a GIS environment in GAMA requires nothing special, just to define the bounds of the environment, i.e. the geometry of the ",(0,o.kt)("inlineCode",{parentName:"p"},"world")," agent. It is possible to use a shapefile to automatically define it by computing its envelope. In this model, we use a specific shapefile to define it. However, it would be possible to use the road shapefile to define it and let GAMA computes its envelope automatically."),(0,o.kt)("h2",{id:"complete-model"},"Complete Model"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gaml",metastring:"reference",reference:!0},"https://github.com/gama-platform/gama/blob/GAMA_1.9.0/msi.gama.models/models/Tutorials/Road%20Traffic/models/Model%2001.gaml\n")))}m.isMDXComponent=!0}}]);