# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java#apache-maven-with-a-settings-path

name: Github Travis

on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ sources ]
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:  # For manual trigger
  repository_dispatch: # For POST request trigger
    types: automated-generation

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Prepare git
        run: |
          git config --global user.name "${{ secrets.BOT_GH_NAME}}"
          git config --global user.email "${{ secrets.BOT_GH_EMAIL}}"

      - name: Apply netrc creds with direct input again
        uses: little-core-labs/netrc-creds@master
        with:
          machine: github.com
          login: ${{ secrets.BOT_GH_NAME}}
          password: ${{ secrets.BOT_TOKEN}}

      #
      # PRE-COMPILE
      #
      - name: Get latest wiki
        run: git clone https://github.com/gama-platform/gama.wiki.git

      - name: Reorganise folders to be more Docusaurus-friendly
        shell: bash
        run: $GITHUB_WORKSPACE/script/unstructurize.sh

      - name: Fix small wiki default
        shell: sh
        run: |
          $GITHUB_WORKSPACE/script/link_fixer.sh
          # Remove blank line
          sed -i '/^$/d' $GITHUB_WORKSPACE/docs/_Sidebar.md

      - name: Generate Sidebar 
        run: |
          php $GITHUB_WORKSPACE/script/sidebarCopy.php
          php $GITHUB_WORKSPACE/script/sidebarSearch.php

      - name: Auto header
        shell: sh
        run: $GITHUB_WORKSPACE/script/autoHeader.sh

      #
      # COMPILATION
      #

      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Docusaurus
        run: yarn install
        working-directory: ./website

      - name: Build & Publish Docusaurus
        run: yarn run publish-gh-pages
        working-directory: ./website
        env:
          GIT_USER: ${{ secrets.BOT_GH_NAME}}