"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[52238],{7296:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"HeadlessLegacy","title":"Headless Legacy","description":"Table of contents","source":"@site/versioned_docs/version-1.8.2-RC2/HeadlessLegacy.md","sourceDirName":".","slug":"/HeadlessLegacy","permalink":"/wiki/1.8.2-RC2/HeadlessLegacy","draft":false,"unlisted":false,"editUrl":"https://github.com/gama-platform/gama/wiki/HeadlessLegacy/_edit","tags":[],"version":"1.8.2-RC2","frontMatter":{"title":"Headless Legacy"},"sidebar":"main","previous":{"title":"Running Headless","permalink":"/wiki/1.8.2-RC2/RunningHeadless"},"next":{"title":"Headless Batch","permalink":"/wiki/1.8.2-RC2/HeadlessBatch"}}');var r=t(74848),s=t(28453);const l={title:"Headless Legacy"},a=void 0,o={},d=[{value:"Table of contents",id:"table-of-contents",level:2},{value:"Getting started",id:"getting-started",level:2},{value:"Experiment Input File",id:"experiment-input-file",level:2},{value:"Heading",id:"heading",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Outputs",id:"outputs",level:3},{value:"Output Directory",id:"output-directory",level:2},{value:"Simulation Output",id:"simulation-output",level:2}];function h(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"table-of-contents",children:"Table of contents"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#headless-mode",children:"Headless Mode"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#getting-started",children:"Getting started"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#experiment-input-file",children:"Experiment Input File"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#heading",children:"Heading"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#parameters",children:"Parameters"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#outputs",children:"Outputs"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#output-directory",children:"Output Directory"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#simulation-output",children:"Simulation Output"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"getting-started",children:"Getting started"}),"\n",(0,r.jsxs)(n.p,{children:["This headless mode is the ",(0,r.jsx)(n.em,{children:"Legacy"})," one. So, if you are already familiar with headless from version 1.8.1 or older, nothing changed."]}),"\n",(0,r.jsxs)(n.p,{children:["This mode relies on writing an explicit simulation plan in XML file. Those simulations, mostly for legacy reason, have to be of ",(0,r.jsx)(n.em,{children:"type"})," ",(0,r.jsx)(n.code,{children:"gui"})," (which is pretty counterintuitive, but this type let you set the parameter value to each simulation independently), but you don't have to write it explicitly as it's the default type for an experiment."]}),"\n",(0,r.jsx)(n.p,{children:"You can generate a first XML file corresponding to an existing experiment with the following command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"bash ./gama-headless.sh -xml experimentName /path/to/inputFile.gaml /path/to/outputFile.xml\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["with:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"-xml"}),": the flag asking the headless to generate a XML file well-formatted for our experiment"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"experimentName"}),": the name of the ",(0,r.jsx)(n.code,{children:"experiment"})," you want to run in headless"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"/path/to/inputFile.gaml"}),": the path (relative or absolute) to your GAML file containing the experiment you want to run"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"/path/to/outputFile.xml"}),": the path (relative or absolute) to the generated XML file"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["You can see more in details the content of the generated XML file (applied on the model ",(0,r.jsx)(n.em,{children:"Predator Prey"}),") in ",(0,r.jsx)(n.a,{href:"#experiment-input-file",children:"the Experiment Input File part"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Once you finished preparing your XML file, you can run it with a command similar to the following one:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"bash ./gama-headless.sh /path/to/file.xml /path/to/generated/outputFolder\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["with:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"/path/to/file.xml"}),": the path (relative or absolute) to the XML file containing the full exploration plan to run by the headless"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"/path/to/generated/outputFolder"}),": the path (relative or absolute) which will be generated by GAMA and hold every output files (variables, snapshots, and console messages)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["You can see result output folder in ",(0,r.jsx)(n.a,{href:"#simulation-output",children:"the Simulation Output part"})]}),"\n",(0,r.jsx)(n.h2,{id:"experiment-input-file",children:"Experiment Input File"}),"\n",(0,r.jsxs)(n.p,{children:["The XML input file contains for example (you can find it next to the file ",(0,r.jsx)(n.code,{children:"gama-headless.sh"})," at the path ",(0,r.jsx)(n.code,{children:"samples/predatorPrey.xml"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n<Experiment_plan>\n\t<Simulation experiment="prey_predatorExp" finalStep="1000" id="0" seed="1.0" sourcePath="./samples/predatorPrey/predatorPrey.gaml">\n\t\t<Parameters>\n\t\t\t<Parameter name="Nb Preys: " type="INT" value="200" var="nb_preys_init"/>\n\t\t\t<Parameter name="Prey max energy: " type="FLOAT" value="1.0" var="prey_max_energy"/>\n\t\t\t<Parameter name="Prey max transfert: " type="FLOAT" value="0.1" var="prey_max_transfert"/>\n\t\t\t<Parameter name="Prey energy consumption: " type="FLOAT" value="0.05" var="prey_energy_consum"/>\n\t\t\t<Parameter name="Nb predators: " type="INT" value="20" var="nb_predators_init"/>\n\t\t\t<Parameter name="Predator max energy: " type="FLOAT" value="1.0" var="predator_max_energy"/>\n\t\t\t<Parameter name="Predator energy transfert: " type="FLOAT" value="0.5" var="predator_energy_transfert"/>\n\t\t\t<Parameter name="Predator energy consumption: " type="FLOAT" value="0.02" var="predator_energy_consum"/>\n\t\t</Parameters>\n\t\t<Outputs>\n\t\t\t<Output framerate="1" id="0" name="Number of preys"/>\n\t\t\t<Output framerate="1" id="1" name="Number of predators"/>\n\t\t\t<Output framerate="1" id="2" name="main_display"/>\n\t\t</Outputs>\n\t</Simulation>\n</Experiment_plan>\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"NB: Several simulations can be determined in one experiment plan. These simulations are run in parallel according to the number of allocated cores."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"heading",children:"Heading"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'<Simulation experiment="prey_predatorExp" finalStep="1000" id="0" seed="1.0" sourcePath="./samples/predatorPrey/predatorPrey.gaml">\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["with:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"experiment"})," (",(0,r.jsx)(n.strong,{children:"required"}),"): determines which experiment should be run on the model. This experiment should exist, otherwise, the headless mode will exit."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"finalStep"})," (",(0,r.jsx)(n.strong,{children:"required"}),"): determines the number of simulation steps you want to run."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"id"})," (",(0,r.jsx)(n.strong,{children:"required"}),"): permits to prefix output files for experiment plans with huge simulations."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"seed"})," (optional): permits to set the ",(0,r.jsx)(n.a,{href:"GlobalSpecies#seed",children:"seed"})," value of the simulation."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"sourcePath"})," (",(0,r.jsx)(n.strong,{children:"required"}),"): contains the relative or absolute path to read the gaml model."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"until"})," (optional): defines a stop condition in GAML. It can be combined with the ",(0,r.jsx)(n.code,{children:"finalStep"})," facet (in this case a simulation will finish when the stop condition is fulfilled or when the final step is reached)."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsx)(n.p,{children:"One line per parameter you want to specify a value to:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'<Parameter name="Nb Preys: " type="INT" value="200" var="nb_preys_init"/>\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["with:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"name"}),":  name of the parameter in the gaml model"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"type"})," (",(0,r.jsx)(n.strong,{children:"required"}),"):  type of the parameter (INT, FLOAT, BOOLEAN, STRING)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"value"})," (",(0,r.jsx)(n.strong,{children:"required"}),"): the chosen value"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"var"}),":  name of the parameter variable in the gaml model"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["NB: You need to set at least one of the attributes ",(0,r.jsx)(n.code,{children:"name"})," or ",(0,r.jsx)(n.code,{children:"var"})," in your ",(0,r.jsx)(n.code,{children:"Parameter"})," tag)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"outputs",children:"Outputs"}),"\n",(0,r.jsx)(n.p,{children:"One line per output value you want to retrieve. Outputs can be the name of monitors or displays defined in the 'output' section of experiments, or the names of attributes defined in the experiment or the model itself (in the 'global' section)."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'    ... with the name of a monitor defined in the \'output\' section of the experiment...\n    <Output framerate="1" id="1" name="Number of predators"/>\n    ... with the name of a (built-in) variable defined in the experiment itself...\n    <Output framerate="1" id="2" name="main_display"/>\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["with:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"framerate"})," (",(0,r.jsx)(n.strong,{children:"required"}),"): the frequency of the monitoring (each step, every 2 steps, every 100 steps...)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"id"})," (optional): permits to prefix output files for simulation with huge outputs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"name"})," (",(0,r.jsx)(n.strong,{children:"required"}),"): name of the output in the 'output'/'permanent' section in the experiment or name of the experiment/model attribute to retrieve"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"output_path"})," (optional): change the output directory where snapshot images are saved (for display output only!)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"NB: the lower the framerate value is, the longer the experiment."}),"\n",(0,r.jsx)(n.p,{children:"NB2: if the chosen output is a display, an image is produced and the output file contains the path to access this image"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"output-directory",children:"Output Directory"}),"\n",(0,r.jsx)(n.p,{children:"During headless experiments, a directory is created with the following structure:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Outputed-directory-path/\nout\n\u251c\u2500\u2500 console-outputs-0.txt\n\u251c\u2500\u2500 simulation-outputs0.xml\n\u2514\u2500\u2500 snapshot\n    \u251c\u2500\u2500 main_display0-0.png\n    \u251c\u2500\u2500 main_display0-1.png\n    \u251c\u2500\u2500 main_display0-2.png\n    \u251c\u2500\u2500 main_display0-3.png\n    \u251c\u2500\u2500 main_display0-4.png\n    \u2514\u2500\u2500 ...\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["with:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"console-outputs-<simulationId>.xml"}),": containing every message written in GAMA's console"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"simulation-outputs<simulationId>.xml"}),": containing variables' results in a XML format"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"snapshot"}),": containing the snapshots (i.e. screenshots of gui displays) produced during the simulation"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"simulation-output",children:"Simulation Output"}),"\n",(0,r.jsxs)(n.p,{children:["A file named ",(0,r.jsx)(n.code,{children:"simulation-output.xml"})," is created with the following contents when the experiment runs."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Simulation id=\"0\" >\n\t<Step id='0' >\n\t\t<Variable name='main_display' value='main_display2-0.png'/>\n\t\t<Variable name='number_of_preys' value='613'/>\n\t\t<Variable name='number_of_predators' value='51'/>\n                <Variable name='duration' value='6' />\n\t</Step>\n\t<Step id='1' >\n\t\t<Variable name='main_display' value='main_display2-0.png'/>\n\t\t<Variable name='number_of_preys' value='624'/>\n\t\t<Variable name='number_of_predators' value='51'/>\n                <Variable name='duration' value='5' />\n\t</Step>\n        <Step id='2'>\n\n...\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["With:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'<Simulation id="0" >'}),": tag containing results of the simulation. The ",(0,r.jsx)(n.code,{children:"id"})," is set one set in the input file, in the ",(0,r.jsx)(n.a,{href:"#heading",children:"heading part"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<Step id='0' >"}),": one block per step done containing the value of outputs variables. The ",(0,r.jsx)(n.code,{children:"id"})," corresponds to the step number","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<Variable />"})," with:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"name"}),": name of the output"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"value"}),": the current value of the model variable at the given step."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"NB: The value of an output is repeated according to the framerate defined in the input experiment file."}),"\n",(0,r.jsxs)(n.p,{children:["NB2: The ",(0,r.jsx)(n.code,{children:"value"})," of an output display gives the relative path to the generated image saved in '.png' format."]}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var i=t(96540);const r={},s=i.createContext(r);function l(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);