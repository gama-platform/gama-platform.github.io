"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[56875],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>d});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,l=e.originalType,c=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),u=s(t),d=o,f=u["".concat(c,".").concat(d)]||u[d]||m[d]||l;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var l=t.length,i=new Array(l);i[0]=u;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var s=2;s<l;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},26702:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>m});var r=t(87462),o=t(63366),l=(t(67294),t(3905)),i=["components"],a={title:"3. Connections"},c=void 0,s={unversionedId:"ThreeD_step3",id:"version-1.8.1/ThreeD_step3",title:"3. Connections",description:"Formulation",source:"@site/versioned_docs/version-1.8.1/ThreeD_step3.md",sourceDirName:".",slug:"/ThreeD_step3",permalink:"/wiki/1.8.1/ThreeD_step3",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/ThreeD_step3/_edit",tags:[],version:"1.8.1",frontMatter:{title:"3. Connections"},sidebar:"tuto",previous:{title:"2. Moving Cells",permalink:"/wiki/1.8.1/ThreeD_step2"},next:{title:"Incremental Model",permalink:"/wiki/1.8.1/IncrementalModel"}},p={},m=[{value:"Formulation",id:"formulation",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"Cells update",id:"cells-update",level:3},{value:"Complete Model",id:"complete-model",level:2}],u={toc:m};function d(e){var n=e.components,a=(0,o.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"formulation"},"Formulation"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Mapping the network of connection")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"http://www.youtube.com/watch?feature=player_embedded&v=6ZlBU6xTcfw"},(0,l.kt)("img",{alt:"3D tutorial: creation of a 3D distance graph amon cells.",src:t(13939).Z,width:"2274",height:"1640"}))),(0,l.kt)("h2",{id:"model-definition"},"Model Definition"),(0,l.kt)("p",null,"In this final step, we will display edges between cells that are within a given distance."),(0,l.kt)("h3",{id:"cells-update"},"Cells update"),(0,l.kt)("p",null,"We add a new reflex to collect the neighbors of the cell that are within a certain distance:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"species cells skills:[moving3D]{\n...\n    reflex compute_neighbors {\n        neighbors <- cells select ((each distance_to self) < 10);\n    }   \n}\n")),(0,l.kt)("p",null,"Then we update the cell aspect as follows. For each element (cells) of the ",(0,l.kt)("inlineCode",{parentName:"p"},"neighbors")," list, we draw a line between this neighbor's location and the current cell's location."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"aspect default {\n    draw sphere(environment_size*0.01) color: #orange;\n    loop pp over: neighbors {\n        draw line([self.location,pp.location]);\n    }   \n}\n")),(0,l.kt)("h2",{id:"complete-model"},"Complete Model"),(0,l.kt)("p",null,"The GIT version of the model can be found here ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/gama-platform/gama/blob/master/msi.gama.models/models/Tutorials/3D/models/Model%2003.gaml"},"Model 03.gaml")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'model Tuto3D\n\nglobal {\n    int nb_cells <- 100;\n    int environment_size <- 100;\n    geometry shape <- cube(environment_size);\n\n    init {\n    create cell number: nb_cells {\n        location <- {rnd(environment_size), rnd(environment_size), rnd(environment_size)};\n    }\n    }\n}\n\nspecies cell skills: [moving3D] {\n    rgb color;\n    list<cell> neighbors;\n    int offset;\n\n    reflex move {\n    do wander;\n    }\n\n    reflex compute_neighbors {\n    neighbors <- cell select ((each distance_to self) < 10);\n    }\n\n    aspect default {\n    draw sphere(environment_size * 0.01) color: #orange;\n    loop pp over: neighbors {\n        draw line([self.location, pp.location]);\n    }\n    }\n}\n\nexperiment Tuto3D type: gui {\n    parameter "Initial number of cells: " var: nb_cells min: 1 max: 1000 category: "Cells";\n    output {\n    display View1 type: opengl background: rgb(10, 40, 55) {\n        graphics "env" {\n        draw cube(environment_size) color: #black empty: true;\n        }\n        species cell;\n    }\n    }\n}\n')))}d.isMDXComponent=!0},13939:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/3D_model_3-f4cb0ac76b52df6f3c17f416a2ca8cbe.png"}}]);