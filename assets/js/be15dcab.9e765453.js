"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[13004],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>c});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=p(r),c=a,f=u["".concat(s,".").concat(c)]||u[c]||d[c]||i;return r?n.createElement(f,l(l({ref:t},m),{},{components:r})):n.createElement(f,l({ref:t},m))}));function c(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},36687:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>p,toc:()=>d});var n=r(87462),a=r(63366),i=(r(67294),r(3905)),l=["components"],o={title:"11. Writing Files"},s=void 0,p={unversionedId:"PredatorPrey_step11",id:"version-1.8.2-RC2/PredatorPrey_step11",title:"11. Writing Files",description:"This 11th step illustrates how to save data in a text file.",source:"@site/versioned_docs/version-1.8.2-RC2/PredatorPrey_step11.md",sourceDirName:".",slug:"/PredatorPrey_step11",permalink:"/wiki/PredatorPrey_step11",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/PredatorPrey_step11/_edit",tags:[],version:"1.8.2-RC2",frontMatter:{title:"11. Writing Files"},sidebar:"tuto",previous:{title:"10. Charts",permalink:"/wiki/PredatorPrey_step10"},next:{title:"12. Image loading",permalink:"/wiki/PredatorPrey_step12"}},m={},d=[{value:"Formulation",id:"formulation",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"global section",id:"global-section",level:3},{value:"Complete Model",id:"complete-model",level:2}],u={toc:d};function c(e){var t=e.components,r=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This 11th step illustrates how to save data in a text file."),(0,i.kt)("h2",{id:"formulation"},"Formulation"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"At each simulation step, write in a text file:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The time step"),(0,i.kt)("li",{parentName:"ul"},"The number of prey and predator agents"),(0,i.kt)("li",{parentName:"ul"},"The min and max energy of the prey and predator agents")))),(0,i.kt)("h2",{id:"model-definition"},"Model Definition"),(0,i.kt)("h3",{id:"global-section"},"global section"),(0,i.kt)("p",null,"The main way to write data inside a file is to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"save")," statement:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"save my_data type: file_type to: file_name;\n")),(0,i.kt)("p",null,"With:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"my_data"),": depends on the data to save and of the type of file"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"file_type")," : string"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"file_name")," : string")),(0,i.kt)("p",null,"There are 3 main possible types:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"shp")," (shapefile - GIS data): in that case, ",(0,i.kt)("inlineCode",{parentName:"li"},"my_data")," is treated as a list of agents or geometries: all their geometries are saved in the file (with some variables as attributes),"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"txt")," (text): in that case, ",(0,i.kt)("inlineCode",{parentName:"li"},"my_data")," is treated as a string, which is written directly in the file,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"csv"),": in that case, ",(0,i.kt)("inlineCode",{parentName:"li"},"my_data")," is treated as a list of values: ","[val1, val2, val3]",", that will be written in the file, separated by the ",(0,i.kt)("inlineCode",{parentName:"li"},",")," separator.")),(0,i.kt)("p",null,"We use this statement (in a global reflex called ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"save_result")),") to write:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The cycle step: use of the ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"cycle"))," keyword that returns the current simulation step."),(0,i.kt)("li",{parentName:"ul"},"The number of prey and predator agents: use of ",(0,i.kt)("inlineCode",{parentName:"li"},"nb_preys")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"nb_predators")," variables."),(0,i.kt)("li",{parentName:"ul"},"The min and max energy of the prey and predator agents: use of ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"list min_of expression"))," and ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"list max_of expression"))," keywords. ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'reflex save_result when: (nb_preys > 0) and (nb_predators > 0){\n    save ("cycle: "+ cycle + "; nbPreys: " + nb_preys\n      + "; minEnergyPreys: " + (prey min_of each.energy)\n      + "; maxSizePreys: " + (prey max_of each.energy) \n      + "; nbPredators: " + nb_predators           \n      + "; minEnergyPredators: " + (predator min_of each.energy)          \n      + "; maxSizePredators: " + (predator max_of each.energy)) \n      to: "results.txt" type: "text" rewrite: (cycle = 0) ? true : false;\n}\n')),(0,i.kt)("h2",{id:"complete-model"},"Complete Model"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gaml",metastring:"reference",reference:!0},"https://github.com/gama-platform/gama/blob/GAMA_1.8.2/msi.gama.models/models/Tutorials/Predator%20Prey/models/Model%2011.gaml\n")))}c.isMDXComponent=!0}}]);