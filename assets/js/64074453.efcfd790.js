"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[61793],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),h=r,u=d["".concat(s,".").concat(h)]||d[h]||m[h]||i;return n?o.createElement(u,a(a({ref:t},c),{},{components:n})):o.createElement(u,a({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,a[1]=l;for(var p=2;p<i;p++)a[p]=n[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},38197:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>p,toc:()=>d});var o=n(87462),r=n(63366),i=(n(67294),n(3905)),a=["components"],l={title:"8. Complex Behavior"},s=void 0,p={unversionedId:"PredatorPrey_step8",id:"version-1.8.2-RC1/PredatorPrey_step8",title:"8. Complex Behavior",description:"This eighth step illustrates how to define more complex actions, how to use conditional statements and iterator operators over containers.",source:"@site/versioned_docs/version-1.8.2-RC1/PredatorPrey_step8.md",sourceDirName:".",slug:"/PredatorPrey_step8",permalink:"/wiki/1.8.2-RC1/PredatorPrey_step8",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/PredatorPrey_step8/_edit",tags:[],version:"1.8.2-RC1",frontMatter:{title:"8. Complex Behavior"},sidebar:"tuto",previous:{title:"7. Agent Aspect",permalink:"/wiki/1.8.2-RC1/PredatorPrey_step7"},next:{title:"9. Stopping condition",permalink:"/wiki/1.8.2-RC1/PredatorPrey_step9"}},c={},d=[{value:"Formulation",id:"formulation",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"parent species",id:"parent-species",level:3},{value:"prey species",id:"prey-species",level:3},{value:"predator species",id:"predator-species",level:3},{value:"Complete Model",id:"complete-model",level:2}],m={toc:d};function h(e){var t=e.components,n=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This eighth step illustrates how to define more complex actions, how to use conditional statements and iterator operators over containers."),(0,i.kt)("h2",{id:"formulation"},"Formulation"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Definition of more complex behaviors for prey and predator agents:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The preys agents are moving to the cell containing the highest quantity of food."),(0,i.kt)("li",{parentName:"ul"},"The predator agents are moving if possible to a cell that contains preys, otherwise to a random cell.")))),(0,i.kt)("h2",{id:"model-definition"},"Model Definition"),(0,i.kt)("h3",{id:"parent-species"},"parent species"),(0,i.kt)("p",null,"We modify the ",(0,i.kt)("inlineCode",{parentName:"p"},"basic_move")," reflex of the ",(0,i.kt)("inlineCode",{parentName:"p"},"generic_species")," in order to give the ",(0,i.kt)("inlineCode",{parentName:"p"},"prey")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"predator")," more complex behaviors: instead of choosing a random vegetation cell in the neighborhood, the agents will choose a vegetation cell (still in the neighborhood) thanks to a ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"choose_cell"))," action. This action will return an empty (",(0,i.kt)("inlineCode",{parentName:"p"},"nil"),") value in the parent species and will be specialized for each species. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"species generic_species {\n    ...\n    reflex basic_move {\n    my_cell <- choose_cell();\n    location <- my_cell.location; \n    } \n    \n    vegetation_cell choose_cell {\n    return nil;\n    }\n    ...\n}\n")),(0,i.kt)("h3",{id:"prey-species"},"prey species"),(0,i.kt)("p",null,"We specialize the ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"choose_cell"))," action for the ",(0,i.kt)("inlineCode",{parentName:"p"},"prey")," species: the agent will choose the vegetation cell of the neighborhood (list ",(0,i.kt)("inlineCode",{parentName:"p"},"my_cell.neighbors2"),") that maximizes the quantity of food."),(0,i.kt)("p",null,"Note that GAMA offers numerous operators to manipulate lists and containers:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Unary operators: ",(0,i.kt)("inlineCode",{parentName:"li"},"min"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"max"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"sum"),"..."),(0,i.kt)("li",{parentName:"ul"},"Binary operators:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"where"),": returns a sub-list where all the elements verify the condition defined in the right operand."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"first_with"),": returns the first element of the list that verifies the condition defined in the right operand."),(0,i.kt)("li",{parentName:"ul"},"...")))),(0,i.kt)("p",null,"In the case of binary operators, each element (of the first operand list) can be accessed with the pseudo-variable ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"each")),"."),(0,i.kt)("p",null,"Thus the ",(0,i.kt)("inlineCode",{parentName:"p"},"choose_cell")," action of the ",(0,i.kt)("inlineCode",{parentName:"p"},"prey")," species is defined by:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"species prey parent: generic_species {\n    ...  \n    vegetation_cell choose_cell {\n        return (my_cell.neighbors2) with_max_of (each.food);\n    }\n    ...\n}\n")),(0,i.kt)("h3",{id:"predator-species"},"predator species"),(0,i.kt)("p",null,"We specialize the ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"choose_cell"))," species for the ",(0,i.kt)("inlineCode",{parentName:"p"},"predator")," species: the agent will choose, if possible, a vegetation cell of the neighborhood (list ",(0,i.kt)("inlineCode",{parentName:"p"},"my_cell.neighbors2"),") that contains at least a ",(0,i.kt)("inlineCode",{parentName:"p"},"prey")," agent; otherwise it will choose a random cell."),(0,i.kt)("p",null,"We use for this action the ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"first_with"))," operator on the list of neighbor vegetation cells (",(0,i.kt)("inlineCode",{parentName:"p"},"my_cell.neighbors2"),") with the following condition: the list of ",(0,i.kt)("inlineCode",{parentName:"p"},"prey")," agents contained in the cell is not empty. Note that we use the ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"shuffle"))," operator to randomize the order of the list of the neighbor cells."),(0,i.kt)("p",null,"If all the neighbor cells are empty, then the agent chooses a random cell in the neighborhood (",(0,i.kt)("inlineCode",{parentName:"p"},"one_of (my_cell.neighbors2)"),")."),(0,i.kt)("p",null,"GAMA contains statements that allow executing blocks depending on some conditions:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"if condition1 {...} \nelse if condition2{...} \n... \nelse {...} \n")),(0,i.kt)("p",null,"This statement means that if condition1 = true then the first block is executed; otherwise, if condition2 = true, then it is the second block, etc. When no conditions are satisfied and an else block is defined (it is optional), this latter is executed."),(0,i.kt)("p",null,"We then write the ",(0,i.kt)("inlineCode",{parentName:"p"},"choose_cell")," action as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"species predator parent: generic_species {\n    ...\n    vegetation_cell choose_cell {\n        vegetation_cell my_cell_tmp <- shuffle(my_cell.neighbors2) first_with (!(empty (prey inside (each))));\n    if my_cell_tmp != nil {\n        return my_cell_tmp;\n    } else {\n        return one_of (my_cell.neighbors2);\n    } \n    }\n    ...\n}\n")),(0,i.kt)("p",null,"Note there is ternary operator allowing to directly use a conditioned structure to evaluate a variable:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"condition ? value1 : value2\n")),(0,i.kt)("p",null,"if condition is true, then returns value1; otherwise, returns value2."),(0,i.kt)("h2",{id:"complete-model"},"Complete Model"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gaml",metastring:"reference",reference:!0},"https://github.com/gama-platform/gama/blob/GAMA_1.8.2/msi.gama.models/models/Tutorials/Predator%20Prey/models/Model%2008.gaml\n")))}h.isMDXComponent=!0}}]);