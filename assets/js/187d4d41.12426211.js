"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[12948],{63556:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>a});var i=t(17624),o=t(4552);const l={title:"2. Charts"},r=void 0,d={id:"IncrementalModel_step2",title:"2. Charts",description:"This step Illustrates how to define monitors and charts in GAMA. In addition, it illustrates how to define a stopping condition for the simulation.",source:"@site/versioned_docs/version-1.9.2/IncrementalModel_step2.md",sourceDirName:".",slug:"/IncrementalModel_step2",permalink:"/wiki/IncrementalModel_step2",draft:!1,unlisted:!1,editUrl:"https://github.com/gama-platform/gama/wiki/IncrementalModel_step2/_edit",tags:[],version:"1.9.2",frontMatter:{title:"2. Charts"},sidebar:"tuto",previous:{title:"1. Simple SI Model",permalink:"/wiki/IncrementalModel_step1"},next:{title:"3. Integration of GIS Data",permalink:"/wiki/IncrementalModel_step3"}},s={},a=[{value:"Formulation",id:"formulation",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"global variables",id:"global-variables",level:3},{value:"stopping condition",id:"stopping-condition",level:3},{value:"monitor",id:"monitor",level:3},{value:"chart",id:"chart",level:3},{value:"Complete Model",id:"complete-model",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"This step Illustrates how to define monitors and charts in GAMA. In addition, it illustrates how to define a stopping condition for the simulation."}),"\n",(0,i.jsx)(n.h2,{id:"formulation",children:"Formulation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Definition of new global variables: current_hour, nb_people_infected, nb_people_not_infected, infected_rate."}),"\n",(0,i.jsx)(n.li,{children:"Definition of a monitor to follow the current hour and the nb of people infected."}),"\n",(0,i.jsx)(n.li,{children:"Definition of a series chart to follow the number of people infected and not infected."}),"\n",(0,i.jsx)(n.li,{children:"Definition of a stopping condition (when infected rate = 1)."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Incremental model 2: plot of the disease spread.",src:t(10496).c+"",width:"3584",height:"2118"})}),"\n",(0,i.jsx)(n.h2,{id:"model-definition",children:"Model Definition"}),"\n",(0,i.jsx)(n.h3,{id:"global-variables",children:"global variables"}),"\n",(0,i.jsxs)(n.p,{children:["In order to define dynamic variable able to update itself, we use the ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"update"})})," facet of variable definition.\nIndeed, at each simulation step, all the agents (and the world agent) apply for each dynamic variable (in their definition order) its update expression."]}),"\n",(0,i.jsx)(n.p,{children:"We add 3 new global variables:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"nb_people_infected"})})," (int): nb of people with ",(0,i.jsx)(n.code,{children:"is_infected"})," is ",(0,i.jsx)(n.code,{children:"true"})," (use of the ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"list count condition"})})," operator that count the number of elements of the list for which the condition is true)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"nb_people_not_infected"})})," (int): ",(0,i.jsx)(n.code,{children:"nb_people - nb_people_infected"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"infected_rate"})})," (float): ",(0,i.jsx)(n.code,{children:"nb_people_infected / nb_people"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"global{\n    ...\n    int nb_people_infected <- nb_infected_init update: people count (each.is_infected);\n    int nb_people_not_infected <- nb_people - nb_infected_init update: nb_people - nb_people_infected;\n    float infected_rate update: nb_people_infected/nb_people;\n    ...\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"stopping-condition",children:"stopping condition"}),"\n",(0,i.jsxs)(n.p,{children:["We add a new reflex that stops the simulation when all the people agents are infected (i.e. if the ",(0,i.jsx)(n.code,{children:"infected_rate"})," is equal to 1). To stop the simulation, we use the ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"pause"})})," global action."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"global {\n    ...\n    reflex end_simulation when: infected_rate = 1.0 {\n\tdo pause;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"monitor",children:"monitor"}),"\n",(0,i.jsxs)(n.p,{children:["A monitor allows the modeler to follow the value of an arbitrary expression in GAML. It has to be defined in an output section. A ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"monitor"})})," is defined as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"    monitor monitor_name value: an_expression refresh:every(nb_steps);\n"})}),"\n",(0,i.jsx)(n.p,{children:"With:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"value"}),": mandatory, its value that will be displayed in the monitor."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"refresh"}),": bool, optional: if the expression is true, compute (default is true)."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["In this model, we define 2 monitors to follow: (i) the value of the variable ",(0,i.jsx)(n.code,{children:"infected_rate"}),", and (ii) to follow the time in the simulation (we will display the hour day)."]}),"\n",(0,i.jsxs)(n.p,{children:["As ",(0,i.jsx)(n.a,{href:"ManipulateDates",children:"detailed in the dedicated page"}),", GAML language provides a datatype to manage ",(0,i.jsx)(n.code,{children:"date"})," (with second, minute, hour, day, month and year), and compute automatically the date in the simulation from the global variable ",(0,i.jsx)(n.code,{children:"starting_date"})," of the simulation and the ",(0,i.jsx)(n.code,{children:"step"})," value: this value is stored in the ",(0,i.jsx)(n.code,{children:"current_date"})," global variable. To monitor the current hour, we can access to the ",(0,i.jsx)(n.code,{children:"hour"})," attribute of this variable (",(0,i.jsx)(n.code,{children:"current_date.hour"}),")."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'experiment main_experiment type: gui {\n    ...\n    output {\n\tmonitor "Current hour" value: current_date.hour;\n\tmonitor "Infected people rate" value: infected_rate;\n\t...\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"chart",children:"chart"}),"\n",(0,i.jsxs)(n.p,{children:["GAMA can display ",(0,i.jsx)(n.a,{href:"DefiningCharts",children:"various chart types"}),", for example:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Time series"}),"\n",(0,i.jsx)(n.li,{children:"Pie charts"}),"\n",(0,i.jsx)(n.li,{children:"Histograms"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"A chart must be defined in a display: it behaves exactly like any other layer.\nDefinition of a chart:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"chart chart_name type: chart_type  {\n     [data]\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The data to draw are defined inside the ",(0,i.jsx)(n.code,{children:"chart"})," block with the ",(0,i.jsx)(n.code,{children:"data"})," statement:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"data data_legend value: data_value\n"})}),"\n",(0,i.jsxs)(n.p,{children:['We add a new display called "chart" and refreshed every 10 simulation steps.\nInside this display, we define a chart of type ',(0,i.jsx)(n.code,{children:"series"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:['"Disease spreading"; background: white; of type series and style spline (no remove the markers)',"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"data1: susceptible; color : green"}),"\n",(0,i.jsx)(n.li,{children:"data2: infected; color : red"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'experiment main_experiment type: gui{\n    ...\n    output {\n\t...\n\tdisplay chart refresh: every(10#cycles) {\n\t    chart "Disease spreading" type: series style: spline {\n\t\tdata "susceptible" value: nb_people_not_infected color: #green;\n\t\tdata "infected" value: nb_people_infected color: #red;\n\t    }\n\t}\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"complete-model",children:"Complete Model"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-gaml",metastring:"reference",children:"https://github.com/gama-platform/gama/blob/GAMA_1.9.2/msi.gama.models/models/Tutorials/Incremental%20Model/models/Incremental%20Model%202.gaml\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},10496:(e,n,t)=>{t.d(n,{c:()=>i});const i=t.p+"assets/images/Incremental_model2-489c9a73d05d280b85e27db1951d5040.png"},4552:(e,n,t)=>{t.d(n,{I:()=>d,M:()=>r});var i=t(11504);const o={},l=i.createContext(o);function r(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);