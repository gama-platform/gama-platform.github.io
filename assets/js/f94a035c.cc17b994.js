"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3893],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),m=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=m(e.components);return a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=m(t),h=i,u=c["".concat(s,".").concat(h)]||c[h]||d[h]||r;return t?a.createElement(u,o(o({ref:n},p),{},{components:t})):a.createElement(u,o({ref:n},p))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var m=2;m<r;m++)o[m]=t[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},40447:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>m,toc:()=>d});var a=t(87462),i=t(63366),r=(t(67294),t(3905)),o=["components"],l={title:"Headless Server"},s=void 0,m={unversionedId:"HeadlessServer",id:"HeadlessServer",title:"Headless Server",description:"Running a Gama Headless server:",source:"@site/../docs/HeadlessServer.md",sourceDirName:".",slug:"/HeadlessServer",permalink:"/wiki/next/HeadlessServer",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/HeadlessServer/_edit",tags:[],version:"current",frontMatter:{title:"Headless Server"},sidebar:"side",previous:{title:"Headless Batch",permalink:"/wiki/next/HeadlessBatch"},next:{title:"Preferences",permalink:"/wiki/next/Preferences"}},p={},d=[{value:"Running a Gama Headless server:",id:"running-a-gama-headless-server",level:2},{value:"From the release",id:"from-the-release",level:3},{value:"From the command-line tool",id:"from-the-command-line-tool",level:3},{value:"From the source code",id:"from-the-source-code",level:3},{value:"API description",id:"api-description",level:2},{value:"Available commands",id:"available-commands",level:3},{value:"The <code>launch</code> command",id:"the-launch-command",level:4},{value:"The <code>play</code> command",id:"the-play-command",level:4},{value:"The <code>step</code> command",id:"the-step-command",level:4},{value:"The <code>stepBack</code> command",id:"the-stepback-command",level:4},{value:"The <code>pause</code> command",id:"the-pause-command",level:4},{value:"The <code>stop</code> command",id:"the-stop-command",level:4},{value:"The <code>reload</code> command",id:"the-reload-command",level:4},{value:"The <code>expression</code> command",id:"the-expression-command",level:4},{value:"The <code>exit</code> command",id:"the-exit-command",level:4},{value:"The <code>compile</code> command",id:"the-compile-command",level:4},{value:"Answers format",id:"answers-format",level:3},{value:"Python wrapper",id:"python-wrapper",level:2},{value:"Javascript Client",id:"javascript-client",level:2},{value:"Hello World Visualization in MapBox",id:"hello-world-visualization-in-mapbox",level:3},{value:"Hello World Message example",id:"hello-world-message-example",level:3}],c={toc:d};function h(e){var n=e.components,t=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"running-a-gama-headless-server"},"Running a Gama Headless server:"),(0,r.kt)("h3",{id:"from-the-release"},"From the release"),(0,r.kt)("p",null,"Go to the ",(0,r.kt)("inlineCode",{parentName:"p"},"headless")," directory in your Gama installation folder and run the script ",(0,r.kt)("inlineCode",{parentName:"p"},"gama-headless.sh")," (or ",(0,r.kt)("inlineCode",{parentName:"p"},"gama-headless.bat"),") with the argument ",(0,r.kt)("inlineCode",{parentName:"p"},"-socket")," followed by the socket you want your Gama server to run on."),(0,r.kt)("p",null,"For example on Mac OS you could do:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"cd Gama.app/Contents/headless\n")),(0,r.kt)("p",null,"to move to the right directory, then run the script to listen on port ",(0,r.kt)("inlineCode",{parentName:"p"},"6868")," with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"bash gama-headless.sh -socket 6868\n")),(0,r.kt)("h3",{id:"from-the-command-line-tool"},"From the command-line tool"),(0,r.kt)("p",null,"The users who installed gama through a ",(0,r.kt)("inlineCode",{parentName:"p"},".deb")," file or ",(0,r.kt)("inlineCode",{parentName:"p"},"aur")," have access to the command ",(0,r.kt)("inlineCode",{parentName:"p"},"gama-headless")," and thus only need to open a terminal and run ",(0,r.kt)("inlineCode",{parentName:"p"},"gama-headless -socket 6868")," to run a Gama server on the port ",(0,r.kt)("inlineCode",{parentName:"p"},"6868"),". "),(0,r.kt)("h3",{id:"from-the-source-code"},"From the source code"),(0,r.kt)("p",null,"In Eclipse, instantiate a headless server by running ",(0,r.kt)("inlineCode",{parentName:"p"},"msi.gama.headless.id4_full")," with the following argument ",(0,r.kt)("inlineCode",{parentName:"p"},"-os ${target.os} -ws ${target.ws} -arch ${target.arch} -nl ${target.nl} -socket 6868")," (you can specify any other port)"),(0,r.kt)("h2",{id:"api-description"},"API description"),(0,r.kt)("h3",{id:"available-commands"},"Available commands"),(0,r.kt)("p",null,"Once a client connected, gama-server will sent back an id, it is the ",(0,r.kt)("inlineCode",{parentName:"p"},"socket_id")," and represents the current connection. It must be saved by the client and reused in every command sent to gama-server.\nAll the commands sent to gama-server must be formatted as a ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," object. "),(0,r.kt)("p",null,"The available commands are:"),(0,r.kt)("h4",{id:"the-launch-command"},"The ",(0,r.kt)("inlineCode",{parentName:"h4"},"launch")," command"),(0,r.kt)("p",null,"This command is used to ask the server to initialize a specific experiment in a file in the server's file-system. The command will return an id that represents the ",(0,r.kt)("inlineCode",{parentName:"p"},"experiment_id")," that should be used in all the other commands used to control this specific experiment.\nIt is triggered by sending a json object formatted as follows to the server"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "type": "launch",\n  "socket_id": "<socket_id>",\n  "model": "<gaml_file_path>",\n  "experiment": "<experiment_name>",\n  "parameters": "<params>", //optional\n  "until": "<end_condition>" //optional\n}\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"model")," parameter indicates the path of the experiment file on the server's file-system, and ",(0,r.kt)("inlineCode",{parentName:"p"},"experiment")," is the actual name of the experiment to run.\nYou can add an array of parameters that will be used to initialize the experiment's variables with the values you picked.\nThe value of ",(0,r.kt)("inlineCode",{parentName:"p"},"parameters")," should be formatted as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'[\n  {\n    "type": "<type of the parameter>",\n    "value": "<value of the parameter>",\n    "name": "<name of the parameter in the gaml file>"\n  },\n  {\n    "type": "<type of the parameter>",\n    "value": "<value of the parameter>",\n    "name": "<name of the parameter in the gaml file>"\n  },\n ...\n]\n')),(0,r.kt)("p",null,"You can also add an ending condition to your simulation with the parameter ",(0,r.kt)("inlineCode",{parentName:"p"},"until"),", the condition must be expressed in gaml."),(0,r.kt)("h4",{id:"the-play-command"},"The ",(0,r.kt)("inlineCode",{parentName:"h4"},"play")," command"),(0,r.kt)("p",null,"This command is used to actually run an experimented already initialized.\nIt is triggered by sending a json object formatted as follows to the server"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "type": "play",\n  "socket_id": "<socket_id>",\n  "exp_id": "<experiment_id>",\n}\n')),(0,r.kt)("h4",{id:"the-step-command"},"The ",(0,r.kt)("inlineCode",{parentName:"h4"},"step")," command"),(0,r.kt)("p",null,"This command is used to process one (and only one) step of a simulation.\nIt is triggered by sending a json object formatted as follows to the server"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "type": "step",\n  "socket_id": "<socket_id>",\n  "exp_id": "<experiment_id>",\n}\n')),(0,r.kt)("h4",{id:"the-stepback-command"},"The ",(0,r.kt)("inlineCode",{parentName:"h4"},"stepBack")," command"),(0,r.kt)("p",null,"This command is used to rollback the simulation one (and only one) step back. This command only works on certain experiments.\nIt is triggered by sending a json object formatted as follows to the server"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "type": "stepBack",\n  "socket_id": "<socket_id>",\n  "exp_id": "<experiment_id>",\n}\n')),(0,r.kt)("h4",{id:"the-pause-command"},"The ",(0,r.kt)("inlineCode",{parentName:"h4"},"pause")," command"),(0,r.kt)("p",null,"This command is used to pause a running experiment.\nIt is triggered by sending a json object formatted as follows to the server"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "type": "pause",\n  "socket_id": "<socket_id>",\n  "exp_id": "<experiment_id>",\n}\n')),(0,r.kt)("h4",{id:"the-stop-command"},"The ",(0,r.kt)("inlineCode",{parentName:"h4"},"stop")," command"),(0,r.kt)("p",null,"This command is used to stop (kill) a running experiment.\nIt is triggered by sending a json object formatted as follows to the server"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "type": "stop",\n  "socket_id": "<socket_id>",\n  "exp_id": "<experiment_id>",\n}\n')),(0,r.kt)("h4",{id:"the-reload-command"},"The ",(0,r.kt)("inlineCode",{parentName:"h4"},"reload")," command"),(0,r.kt)("p",null,"This command is used to reload an experiment. The experiment will be stop and the initialization process run again. You can use this command to change the simulation parameters or the ending condition.\nIt is triggered by sending a json object formatted as follows to the server"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "type": "reload",\n  "socket_id": "<socket_id>",\n  "exp_id": "<experiment_id>",\n  "parameters": "<params>", //optional\n  "until": "<end_condition>" //optional\n}\n')),(0,r.kt)("p",null,"Just like for the ",(0,r.kt)("inlineCode",{parentName:"p"},"launch")," command, the ",(0,r.kt)("inlineCode",{parentName:"p"},"parameters")," and the ",(0,r.kt)("inlineCode",{parentName:"p"},"until")," parameters are optional and must follow the same formatting."),(0,r.kt)("h4",{id:"the-expression-command"},"The ",(0,r.kt)("inlineCode",{parentName:"h4"},"expression")," command"),(0,r.kt)("p",null,"This command is used to ask the server to evaluate a ",(0,r.kt)("inlineCode",{parentName:"p"},"gaml")," expression having an experiment as context.",(0,r.kt)("br",{parentName:"p"}),"\n","It is triggered by sending a json object formatted as follows to the server"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "type": "expression",\n  "socket_id": "<socket_id>",\n  "exp_id": "<experiment_id>",\n  "expr": "<expression to evaluate>",\n}\n')),(0,r.kt)("p",null,"For example if you want to know the number of a ",(0,r.kt)("inlineCode",{parentName:"p"},"people")," agents currently present in the simulation represented by the id ",(0,r.kt)("inlineCode",{parentName:"p"},"123"),", you could send this command to gama-server:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "type": "expression",\n  "socket_id": "<socket_id>",\n  "exp_id": "123",\n  "expr": "length(people)",\n}\n')),(0,r.kt)("h4",{id:"the-exit-command"},"The ",(0,r.kt)("inlineCode",{parentName:"h4"},"exit")," command"),(0,r.kt)("p",null,"This command is used to kill gama-server.\nIt is triggered by sending a json object formatted as follows to the server"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "type": "exit",\n  "socket_id": "<socket_id>",\n}\n')),(0,r.kt)("h4",{id:"the-compile-command"},"The ",(0,r.kt)("inlineCode",{parentName:"h4"},"compile")," command"),(0,r.kt)("p",null,"This command is used to ask gama-server to compile a gaml file present on the server's file-system, it is useful to know if your gaml file contains any syntax error.\nIt is triggered by sending a json object formatted as follows to the server"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "type": "compile",\n  "socket_id": "<socket_id>",\n  "model": "<gaml_file_path>",\n  "experiment": "<experiment_name>",\n}\n')),(0,r.kt)("p",null,"Just like for the ",(0,r.kt)("inlineCode",{parentName:"p"},"launch")," command, the ",(0,r.kt)("inlineCode",{parentName:"p"},"model")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"experiment")," parameters represent the path of the gaml file on the server's file-system, and the name of an experiment."),(0,r.kt)("h3",{id:"answers-format"},"Answers format"),(0,r.kt)("h2",{id:"python-wrapper"},"Python wrapper"),(0,r.kt)("p",null,"A python package is available to interact with Gama server as a client, you can find it ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/gama-platform/Gama-client-python"},"here"),". It will take care of formatting the queries to the server and receiving the answers. You simply have to install the package into your python environment with the command ",(0,r.kt)("inlineCode",{parentName:"p"},"pip install gama-client")," and then import ",(0,r.kt)("inlineCode",{parentName:"p"},"gama-client")," into your python files and instantiate a GamaClient object to start communicating with Gama server. For more informations follow the ",(0,r.kt)("inlineCode",{parentName:"p"},"README.md")," available on the package's github."),(0,r.kt)("p",null,"Here is an example python program using it to run a gaml file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import time\nimport gama_client\nimport asyncio\n\n\nasync def main():\n    MY_SERVER_URL = "localhost"\n    MY_SERVER_PORT = 6868\n    GAML_FILE_PATH_ON_SERVER = "/opt/gama-platform/headless/samples/predatorPrey/predatorPrey.gaml"\n    EXPERIMENT_NAME = "prey_predatorExp"\n\n    client = gama_client.GamaClient(MY_SERVER_URL, MY_SERVER_PORT)\n\n    print("connecting to Gama server")\n    await client.connect()\n\n    print("initialize a gaml model")\n    experiment_id = await client.init_experiment(GAML_FILE_PATH_ON_SERVER, EXPERIMENT_NAME)\n    if experiment_id == "":\n        print("error while initializing")\n        return\n\n    print("initialization successful, running the model")\n    playing = await client.play(experiment_id)\n    if not playing:\n        print("error while trying to run the experiment", experiment_id)\n        return\n\n    print("model running, waiting a bit")\n    time.sleep(3)\n\n    print("pausing the model")\n    if not await client.pause(experiment_id):\n        print("unable to pause the experiment", experiment_id)\n        return\n\n    print("asking simulation the value of: cycle=", await client.expression(experiment_id, r"cycle"))\n    print("asking simulation the value of: nb_preys/nb_preys_init=", await client.expression(experiment_id, r"nb_preys/nb_preys_init"))\n\nif __name__ == "__main__":\n    asyncio.run(main())\n\n')),(0,r.kt)("h2",{id:"javascript-client"},"Javascript Client"),(0,r.kt)("p",null,"The current javascript client version is being developed in this repository ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/gama-platform/gama.client"},"gama.client")),(0,r.kt)("h3",{id:"hello-world-visualization-in-mapbox"},"Hello World Visualization in MapBox"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Clone the repository ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/gama-platform/gama.client"},"gama.client")),(0,r.kt)("li",{parentName:"ul"},"In ",(0,r.kt)("inlineCode",{parentName:"li"},"Javascript/gama_client.js")," edit the following variable ",(0,r.kt)("inlineCode",{parentName:"li"},"ABSOLUTE_PATH_TO_GAMA")," to your local path (e.g ",(0,r.kt)("inlineCode",{parentName:"li"},"var ABSOLUTE_PATH_TO_GAMA = '/Users/arno/';")," "),(0,r.kt)("li",{parentName:"ul"},"open ",(0,r.kt)("inlineCode",{parentName:"li"},"Javascript/index.html"),"in a browser")),(0,r.kt)("h3",{id:"hello-world-message-example"},"Hello World Message example"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"In ",(0,r.kt)("inlineCode",{parentName:"li"}," chain_messages.js")," edit the following variable ",(0,r.kt)("inlineCode",{parentName:"li"},"ABSOLUTE_PATH_TO_GAMA")," to your local path (e.g ",(0,r.kt)("inlineCode",{parentName:"li"},"var ABSOLUTE_PATH_TO_GAMA = '/Users/arno/';")," "),(0,r.kt)("li",{parentName:"ul"},"open ",(0,r.kt)("inlineCode",{parentName:"li"},"Javascript/message_example"),"in a browser")))}h.isMDXComponent=!0}}]);