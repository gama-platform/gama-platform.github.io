"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[12017],{88932:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"IncrementalModel_step1","title":"1. Simple SI Model","description":"This first step Illustrates how to write a model in GAMA. In particular, it describes how to structure a model and how to define species - which are the key components of GAMA models.","source":"@site/versioned_docs/version-1.9.1/IncrementalModel_step1.md","sourceDirName":".","slug":"/IncrementalModel_step1","permalink":"/wiki/1.9.1/IncrementalModel_step1","draft":false,"unlisted":false,"editUrl":"https://github.com/gama-platform/gama/wiki/IncrementalModel_step1/_edit","tags":[],"version":"1.9.1","frontMatter":{"title":"1. Simple SI Model"},"sidebar":"tuto","previous":{"title":"Incremental Model","permalink":"/wiki/1.9.1/IncrementalModel"},"next":{"title":"2. Charts","permalink":"/wiki/1.9.1/IncrementalModel_step2"}}');var s=i(74848),l=i(28453);const o={title:"1. Simple SI Model"},r=void 0,d={},a=[{value:"Formulation",id:"formulation",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"model structure",id:"model-structure",level:3},{value:"species",id:"species",level:3},{value:"Internal state",id:"internal-state",level:4},{value:"global section",id:"global-section",level:3},{value:"global variables",id:"global-variables",level:4},{value:"Model initialization",id:"model-initialization",level:4},{value:"experiment",id:"experiment",level:3},{value:"input",id:"input",level:4},{value:"output",id:"output",level:4},{value:"Complete Model",id:"complete-model",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"This first step Illustrates how to write a model in GAMA. In particular, it describes how to structure a model and how to define species - which are the key components of GAMA models."}),"\n",(0,s.jsx)(n.h2,{id:"formulation",children:"Formulation"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Definition of the ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"people"})})," species with a variable (",(0,s.jsx)(n.code,{children:"is_infected"}),") , an aspect (",(0,s.jsx)(n.code,{children:"default"}),") and two behaviors (",(0,s.jsx)(n.code,{children:"move"})," and ",(0,s.jsx)(n.code,{children:"infect"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:["Definition of ",(0,s.jsx)(n.code,{children:"nb_infected_init"}),", ",(0,s.jsx)(n.code,{children:"infection_distance"})," and ",(0,s.jsx)(n.code,{children:"proba_infection"})," parameters."]}),"\n",(0,s.jsxs)(n.li,{children:["Creation of ",(0,s.jsx)(n.strong,{children:"500"})," ",(0,s.jsx)(n.code,{children:"people"})," agents randomly located in the environment (size: 500x500)."]}),"\n",(0,s.jsx)(n.li,{children:"Definition a display to visualize the people agents."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Incremental model 1: display of people agents taking into account the infectious state of the agents.",src:i(67231).A+"",width:"660",height:"505"})}),"\n",(0,s.jsx)(n.h2,{id:"model-definition",children:"Model Definition"}),"\n",(0,s.jsx)(n.h3,{id:"model-structure",children:"model structure"}),"\n",(0,s.jsx)(n.p,{children:"A GAMA model is composed of three types of sections:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"global"})}),': this section, which is unique, defines the "world" agent, a special agent of a GAMA model. It represents all that is global to the model: dynamics, variables, actions. In addition, it allows to initialize the simulation (init block).']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"species"})}),": these sections define the species of agents composing the model."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"experiment"})}),": these sections define a context of the execution of the simulations. In particular, it defines the input (parameters) and output (displays, files...) of a model."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["More details about the different sections of a GAMA model can be found ",(0,s.jsx)(n.a,{href:"ModelOrganization",children:"here"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"species",children:"species"}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.a,{href:"RegularSpecies",children:"species"})," represents a \xabprototype\xbb of agents: it defines their common properties."]}),"\n",(0,s.jsx)(n.p,{children:"A species definition requires the definition of three different elements:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"the internal state of its agents (attributes)"}),"\n",(0,s.jsx)(n.li,{children:"their behavior"}),"\n",(0,s.jsx)(n.li,{children:"how they are displayed (aspects)"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"internal-state",children:"Internal state"}),"\n",(0,s.jsxs)(n.p,{children:["An ",(0,s.jsx)(n.a,{href:"RegularSpecies#declaration",children:"attribute"})," is defined as follows: the type of the attribute and name. Numerous types of attributes are available: ",(0,s.jsx)(n.code,{children:"int"})," (integer), ",(0,s.jsx)(n.code,{children:"float"})," (floating-point number), ",(0,s.jsx)(n.code,{children:"string"}),", ",(0,s.jsx)(n.code,{children:"bool"})," (boolean, ",(0,s.jsx)(n.code,{children:"true"})," or ",(0,s.jsx)(n.code,{children:"false"}),"), ",(0,s.jsx)(n.code,{children:"point"})," (coordinates), ",(0,s.jsx)(n.code,{children:"list"}),", ",(0,s.jsx)(n.code,{children:"pair"}),", ",(0,s.jsx)(n.code,{children:"map"}),", ",(0,s.jsx)(n.code,{children:"file"}),", ",(0,s.jsx)(n.code,{children:"matrix"}),", species of agents, ",(0,s.jsx)(n.code,{children:"rgb"})," (color), ",(0,s.jsx)(n.code,{children:"graph"}),", ",(0,s.jsx)(n.code,{children:"path"}),"..."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Optional facets: ",(0,s.jsx)(n.code,{children:"<-"})," (initial value), ",(0,s.jsx)(n.code,{children:"update"})," (value recomputed at each step of the simulation), ",(0,s.jsx)(n.code,{children:"function:{..}"})," (value computed each time the variable is used), ",(0,s.jsx)(n.code,{children:"min"}),", ",(0,s.jsx)(n.code,{children:"max"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:'In addition to the attributes the modeler explicitly defines, species "inherits" other attributes called "built-in" variables:'}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["A name (",(0,s.jsx)(n.code,{children:"name"}),"): the identifier of the species."]}),"\n",(0,s.jsxs)(n.li,{children:["A shape (",(0,s.jsx)(n.code,{children:"shape"}),"): the default shape of the agents to be constructed after the species. It can be ",(0,s.jsx)(n.em,{children:"a point, a polygon, etc."}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["A location (",(0,s.jsx)(n.code,{children:"location"}),"): the centroid of its shape."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["We will give a variable to ",(0,s.jsx)(n.code,{children:"people"})," agents: ",(0,s.jsx)(n.code,{children:"is_infected"})," (bool):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"species people skills:[moving]{\t\t\n    bool is_infected <- false;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Concerning the display of an agent, ",(0,s.jsx)(n.a,{href:"RegularSpecies#the-aspect-statement",children:"aspects"})," have to be defined. An aspect represents a possible way to display the agents of a species: ",(0,s.jsx)(n.code,{children:"aspect aspect_name {...}"}),".\nIn the block of an aspect, it is possible to ",(0,s.jsx)(n.code,{children:"draw"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"A geometry: for instance, the shape of the agent."}),"\n",(0,s.jsx)(n.li,{children:"An image: to draw icons."}),"\n",(0,s.jsx)(n.li,{children:"A text: to draw a text."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["We define here one aspect of this species. In this model, we want to display for each people agent a circle of radius 5 and red or green according to the value of ",(0,s.jsx)(n.code,{children:"is_infected"})," (if infected: red, green otherwise). We then use the keyword ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"draw"})})," with a ",(0,s.jsx)(n.code,{children:"circle"})," shape. To define the color that depends on ",(0,s.jsx)(n.code,{children:"is_infected"}),", we use the tertiary operator ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"condition ? val1 : val2"})}),". If the condition is true, this operator will return ",(0,s.jsx)(n.code,{children:"val1"}),", otherwise ",(0,s.jsx)(n.code,{children:"val2"}),". Note that it is possible to get a color value by using the symbol ",(0,s.jsx)(n.code,{children:"#"})," + color name: e.g. ",(0,s.jsx)(n.code,{children:"#blue"}),", ",(0,s.jsx)(n.code,{children:"#red"}),", ",(0,s.jsx)(n.code,{children:"#white"}),", ",(0,s.jsx)(n.code,{children:"#yellow"}),", ",(0,s.jsx)(n.code,{children:"#magenta"}),", ",(0,s.jsx)(n.code,{children:"#pink"}),"..."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"species people skills:[moving] {\t\t\n    ...\n    aspect default {\n\tdraw circle(5) color: is_infected ? #red : #green;\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Concerning the behavior of agents, the simplest way to define it is through reflexes. A ",(0,s.jsx)(n.code,{children:"reflex"})," is a block of statements (that can be defined in global or any species) that will be automatically executed at each simulation step if its condition is true. A reflex is defined as follows:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"    reflex reflex_name when: condition {...}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"when"})})," facet is optional: when it is omitted, the reflex is activated at each time step. Note that if several reflexes are defined for a species, the reflexes will be activated following their definition order."]}),"\n",(0,s.jsxs)(n.p,{children:["We define a first reflex called ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"move"})})," that allows the people agents to move using the ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"wander"})})," action (provided by the ",(0,s.jsx)(n.code,{children:"moving"})," skill) that allows to randomly move (with taking into account the agent ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"speed"})}),")."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"species people skills: [moving] {\n    ...\n    reflex move {\n\tdo wander;\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Note that an action is a capability available to the agents of a species (what they can do). It is a block of statements that can be used and reused whenever needed. Some actions, called primitives, are directly coded in Java: for instance, the ",(0,s.jsx)(n.strong,{children:"wander"})," action defined in the ",(0,s.jsx)(n.strong,{children:"moving"})," skill."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"An action can accept arguments. For instance, write takes an argument called message."}),"\n",(0,s.jsx)(n.li,{children:"An action can return a result."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"There are two ways to call an action: using a statement or as part of an expression"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"for actions that do not return a result:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"do action_name arg1: v1 arg2: v2;\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"for actions that return a result:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"my_var <- self action_name (arg1:v1, arg2:v2);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The second reflex we have to define is the ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"infect"})})," one. This reflex will be activated only if ",(0,s.jsx)(n.code,{children:"is_infected"})," is true. This reflex consists is asking all the people agents at a distance lower or equal to ",(0,s.jsx)(n.code,{children:"infection_distance"})," to become infected with a probability ",(0,s.jsx)(n.code,{children:"proba_infection"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"species people skills:[moving]{\t\t\n    ...\n    reflex infect when: is_infected{\n\task people at_distance infection_distance {\n\t    if (flip(proba_infection)) {\n\t        is_infected <- true;\n\t    }\n\t}\n    }\n    ...\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Note that we used the ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"ask"})})," statement. This statement allows to make a remote agent executes a list of statements. We used as well the ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"flip"})})," operator that allows to test a probability."]}),"\n",(0,s.jsx)(n.h3,{id:"global-section",children:"global section"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"global"})," section represents the definition of the species of a specific agent (called ",(0,s.jsx)(n.code,{children:"world"}),").\nThe world agent represents everything that is global to the model: dynamics, variables...\nIt allows to init simulations (",(0,s.jsx)(n.code,{children:"init"})," block): the world is always created and initialized first when a simulation is launched. The geometry (shape) of the world agent is by default a square with 100m for side size, but can be redefined if necessary. In the same way, the modeler can redefine the ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"step"})})," variable that represents the duration of a simulation step and that is by default 1 second."]}),"\n",(0,s.jsx)(n.h4,{id:"global-variables",children:"global variables"}),"\n",(0,s.jsxs)(n.p,{children:["For our model, we define 5 global variables: ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"nb_people"})})," (int, init value: 500), ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"infection_distance"})})," (float value, init value: 2 meters), ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"proba_infection"})})," (float, init value: 0.05), ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"nb_infected_init"})})," (int, init value: 5) and ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"agent_speed"})})," (float, init value: 5 #km/#h). In addition, we redefine the geometry of the world by a square of 500 meters size and a simulation step of 1 minute."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"global { \n    int nb_people <- 500;\n    float agent_speed <- 5.0 #km/#h;\n    float infection_distance <- 2.0 #m;\n    float proba_infection <- 0.05;\n    int nb_infected_init <- 5;\n    float step <- 1 #minutes;\n    geometry shape<-square(500 #m);\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"model-initialization",children:"Model initialization"}),"\n",(0,s.jsxs)(n.p,{children:["The init section of the global block allows to initialize the model.\nThe statement ",(0,s.jsx)(n.code,{children:"create"})," allows to create agents of a specific species: ",(0,s.jsx)(n.code,{children:"create species\\_name"})," + :"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"number"}),": number of agents to create (int, 1 by default)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"from"}),": GIS file to use to create the agents (string or file)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"returns"}),": list of created agents (list)"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["For our model, the definition of the ",(0,s.jsx)(n.code,{children:"init"})," block in order to create ",(0,s.jsx)(n.code,{children:"nb_people"})," people agents. We set the init value of the ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"speed"})})," variable (given by the ",(0,s.jsx)(n.code,{children:"moving"})," skill) to the value of the global variable ",(0,s.jsx)(n.code,{children:"agent_speed"})," (i.e. 5km/h)."]}),"\n",(0,s.jsxs)(n.p,{children:["In addition, we ask ",(0,s.jsx)(n.code,{children:"nb_infected_init"})," people to become infected (use of the ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"nb among list"})})," to randomly draw nb elements of the list)."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"global{ \n    ...\n    init{\n\tcreate people number:nb_people {\n\t    speed <- agent_speed;\n\t}\n\task nb_infected_init among people {\n\t    is_infected <- true;\n\t}\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"experiment",children:"experiment"}),"\n",(0,s.jsxs)(n.p,{children:["An ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"experiment"})})," block defines how a model can be simulated (executed). Several experiments can be defined for a model. They are defined using : ",(0,s.jsx)(n.code,{children:"experiment exp\\_name type: gui/batch {"}),"[input]",(0,s.jsx)(n.code,{children:" "}),"[output]",(0,s.jsx)(n.code,{children:"}"}),"."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"gui: experiment with a graphical interface, which displays its input parameters and outputs."}),"\n",(0,s.jsx)(n.li,{children:"batch: Allows to setup a series of simulations (w/o graphical interface)."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"In our model, we define a gui experiment called main_experiment :"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"experiment main_experiment type: gui {\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"input",children:"input"}),"\n",(0,s.jsx)(n.p,{children:"Experiments can define (input) parameters. A parameter definition allows to make the value of a global variable definable by the user through the graphic interface."}),"\n",(0,s.jsx)(n.p,{children:"A parameter is defined as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"parameter title var: global_var category: cat;\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"title"}),": string to display"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"var"}),": reference to a global variable (defined in the global section)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"category"}),": string used to \xabstore\xbb the operators on the UI - optional"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"<-"}),": init value - optional"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"min"}),": min value - optional"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"max"}),": min value - optional"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Note that the ",(0,s.jsx)(n.code,{children:"init"}),", ",(0,s.jsx)(n.code,{children:"min"})," and ",(0,s.jsx)(n.code,{children:"max"})," values can be defined in the global variable definition."]}),"\n",(0,s.jsxs)(n.p,{children:["In the experiment, we define three parameters from the global variables ",(0,s.jsx)(n.code,{children:"infection_distance"}),", ",(0,s.jsx)(n.code,{children:"proba_infection"})," and ",(0,s.jsx)(n.code,{children:"nb_infected_init"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'experiment main_experiment type: gui{\n    parameter "Infection distance" var: infection_distance;\n    parameter "Proba infection" var: proba_infection min: 0.0 max: 1.0;\n    parameter "Nb people infected at init" var: nb_infected_init ;\n    ...\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"output",children:"output"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"output"})})," block is defined in an experiment and defines how to visualize a simulation (with one or more ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"display"})})," blocks that define separate windows). Each display can be refreshed independently by defining the facet ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"refresh"})})," (expecting a boolean expression, the display will be refreshed every time the expression is evaluated to true. This expression can be described in terms of nb of simulation, with e.g. ",(0,s.jsx)(n.code,{children:"every(5#cycle)"}),")."]}),"\n",(0,s.jsx)(n.p,{children:"Each display can include different layers (like in a GIS):"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["All the agents of a species: ",(0,s.jsx)(n.code,{children:"species  my_species aspect: my_aspect;"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Agents lists: ",(0,s.jsx)(n.code,{children:"agents layer_name value: agents_list aspect: my_aspect;"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Images: ",(0,s.jsx)(n.code,{children:"image image_file_name;"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"Charts: see later."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Note that it is possible to define a ",(0,s.jsx)(n.a,{href:"G__3DSpecificInstructions",children:"opengl display"})," (for 3D display) by using the facet ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"type: opengl"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["In our model, we define a display to draw the ",(0,s.jsx)(n.code,{children:"people"})," agents with their ",(0,s.jsx)(n.code,{children:"default"})," aspect. (note that, if the ",(0,s.jsx)(n.code,{children:"aspect"})," facet is omitted, the aspect named ",(0,s.jsx)(n.code,{children:"default"})," will be used)"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"experiment main_experiment type: gui{\n    ...\n    output {\n\tdisplay map {\n\t    species people ; // 'default' aspect is used automatically\t\t\t\n\t}\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"complete-model",children:"Complete Model"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gaml",metastring:"reference",children:"https://github.com/gama-platform/gama.old/blob/GAMA_1.9.0/msi.gama.models/models/Tutorials/Incremental%20Model/models/Incremental%20Model%201.gaml\n"})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},67231:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/Incremental_model1-b99edbb47188bc8e6b7d2fc4231a15aa.jpg"},28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>r});var t=i(96540);const s={},l=t.createContext(s);function o(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);