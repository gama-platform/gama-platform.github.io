"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[55437],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(t),m=o,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||a;return t?r.createElement(f,l(l({ref:n},p),{},{components:t})):r.createElement(f,l({ref:n},p))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=m;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[d]="string"==typeof e?e:o,l[1]=i;for(var c=2;c<a;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},40366:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>f,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var r=t(87462),o=t(63366),a=(t(67294),t(3905)),l=["components"],i={"^title":"FallingObjects"},s=void 0,c={unversionedId:"FallingObjects",id:"FallingObjects",title:"FallingObjects",description:"Path: Plugin models/Physics Engine/models/Hello World.gaml",source:"@site/../docs/FallingObjects.md",sourceDirName:".",slug:"/FallingObjects",permalink:"/wiki/next/FallingObjects",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/FallingObjects/_edit",tags:[],version:"current",frontMatter:{"^title":"FallingObjects"}},p={},d=[],u={toc:d},m="wrapper";function f(e){var n=e.components,t=(0,o.Z)(e,l);return(0,a.kt)(m,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("img",{width:"960",alt:"Annotation 2023-04-15 200120_p6_HelloWorld",src:"https://user-images.githubusercontent.com/4437331/232246100-6ab90a5d-3142-479e-ad2b-b3cfe7c37f12.png"}),(0,a.kt)("p",null,"Path: Plugin models/Physics Engine/models/Hello World.gaml"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"\n/**\n* Name: Falling Objects\n* Author: Arnaud Grignard - Alexis Drogoul\n* Description: This is a very simple model that shows how the physics engine works. The model inherits from 'physical_world' and ball agents use the \n* skill 'physics'. The ball agents fall on a floor, giggle a bit, exchange colors, and fall from the floor to the void. The user can click on any of them to give it some impulse\n* Tags: physics_engine, skill, spatial_computation, 3d\n*/\n\nmodel FallingHelloWorld\n\n\n\nglobal parent: physical_world {\n    bool use_native <- true;\n    float restitution <- 0.8; // the \"bounciness\" of the world\n    float friction <- 0.2; // the deceleration it imposes on other objects\n    int environment_size <- 500; \n    int max_substeps <-0;\n    float step <- 0.006; \n    geometry shape <- box(environment_size,environment_size,10);\n    \n    init {\n        //If the world is to be considered as a physical object in the world, it must register itself\n        do register([self]);\n        create ball number: 100;\n    }\n} \n\n\nspecies ball skills: [dynamic_body] {\n    float radius <- float(rnd(25) + 1);\n    geometry shape <- flip(0.3) ? cube(radius) : (flip(0.5) ? sphere(radius) : cone3D(radius, radius));\n    point location <- {rnd(environment_size), rnd(environment_size), rnd(environment_size)};\n    rgb color <- #grey;\n    float restitution <- 0.7;\n    float mass <- 1.0;\n    float damping <- 0.1;\n    float angular_damping <- 0.3;\n    float friction <- 0.2;\n\n    // A callback method when a contact is made with another agent. Here, we simply take its color\n    action contact_added_with (agent other) {\n        if (other is ball) {\n            shape <- shape * 1.01;  \n            color <- rnd_color(255);        \n            do update_body;\n        }\n    }\n\n    reflex manage_location when: location.z < -20 {\n        do die;\n    }\n\n    aspect default {\n        draw shape color: color rotate: rotation;\n        // We can also draw the bounding box of the agent in the physical world\n//  draw aabb color: #black wireframe: true;\n    }\n\n}\n\nexperiment Display type: gui {\n    output {    \n        display Falling  type: 3d background:rgb(128,128,128) axes:false{\n            graphics World refresh: false{\n                 draw shape color: #white;\n            }\n            event #mouse_down {\n                ball target <- ball with_min_of(each distance_to #user_location);\n                ask target {\n                    do apply impulse: {rnd(10)-5,rnd(10)-5,50}; // vertical, with some random side moves\n                }\n            }\n            species ball;           \n        }\n\n    }\n}\n\n")))}f.isMDXComponent=!0}}]);