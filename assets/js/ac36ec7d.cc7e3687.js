"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[71517],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),d=r,m=p["".concat(s,".").concat(d)]||p[d]||f[d]||o;return n?i.createElement(m,a(a({ref:t},u),{},{components:n})):i.createElement(m,a({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,a[1]=l;for(var c=2;c<o;c++)a[c]=n[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},42660:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>c,toc:()=>p});var i=n(87462),r=n(63366),o=(n(67294),n(3905)),a=["components"],l={"^title":"Anisotropic Diffusion Simple Field"},s=void 0,c={unversionedId:"Anisotropic_Diffusion_Simple_Field",id:"Anisotropic_Diffusion_Simple_Field",title:"Anisotropic_Diffusion_Simple_Field",description:"Path: Plugin models/Diffusion Statement/models/Anisotropic Diffusion (Simple, Field).gaml",source:"@site/../docs/Anisotropic_Diffusion_Simple_Field.md",sourceDirName:".",slug:"/Anisotropic_Diffusion_Simple_Field",permalink:"/wiki/next/Anisotropic_Diffusion_Simple_Field",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/Anisotropic_Diffusion_Simple_Field/_edit",tags:[],version:"current",frontMatter:{"^title":"Anisotropic Diffusion Simple Field"}},u={},p=[],f={toc:p},d="wrapper";function m(e){var t=e.components,n=(0,r.Z)(e,a);return(0,o.kt)(d,(0,i.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("img",{width:"960",alt:"Annotation 2023-04-16 162623_anisotropicDiffusionSimpleField",src:"https://user-images.githubusercontent.com/4437331/232320103-9a570e0e-3fee-4d55-9b2b-0f1903f1dbb3.png"}),(0,o.kt)("p",null,"Path: Plugin models/Diffusion Statement/models/Anisotropic Diffusion (Simple, Field).gaml"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'\n/**\n* Name: Anisotropic diffusion (Simple)\n* Author: Benoit Gaudou\n* Description: This model is used to show how to construct an anisotropic diffusion through a grid. The cell at the center of the grid emit a pheromon at each step, which is spread \n*     through the grid thanks to the diffusion mechanism, using a particular matrix of diffusion.\n* Tags: diffusion, matrix, math, elevation\n*/\nmodel anisotropic_diffusion\n\nglobal {\n    geometry shape <- rectangle(100,100);\n    int size <- 100; // better to have a pow of 2 for the size of the grid\n    field cells <- field(size, size, 0.0);\n    int rnd_component -> rnd(8) - 4;\n    \n    \n    init {\n        loop i from: 0 to: size - 1 {\n            loop j from: 0 to: size - 1 {\n                cells[i,j] <- j*size+i;\n            }\n        } \n    }\n\n    // Declare the anisotropic matrix (diffuse to the left-upper direction)\n    matrix<float> mat_diff <- matrix([\n        [4 / 9, 2.5 / 9, 0 / 9], \n        [2.5 / 9, 0 / 9, 0 / 9], \n        [0 / 9, 0 / 9, 0.1 / 9]\n    ]);\n\n    reflex diff {\n        diffuse "phero" on: cells matrix: mat_diff;\n    }\n\n    reflex new_Value {\n        loop i from: -10 to: 10 step: 5 {\n            cells[size / 2 - i + rnd_component, size / 2 + i + rnd_component] <- 15;\n        }\n        \n    }\n}\n\nexperiment diffusion type: gui autorun: true {\n    output synchronized: true {\n        layout #split;\n        display "Brewer" type: 3d  background: #black antialias:true  {\n            camera \'default\' location: {-36.7763,-33.4928,81.1831} target: {30.905,35.6694,0.0};\n            light #default intensity: 60;\n            mesh cells scale: 5 grayscale: true color:(brewer_colors("Set3")) triangulation: true;\n        }\n\n        display "HSB Smoothed 2" type: 3d background: #black {\n            camera \'default\' location: {50.7757,142.7832,27.2522} target: {50.3509,7.5626,0.0};\n            mesh cells scale: 5 color: cells collect hsb(float(each)/5,1,1) triangulation: true smooth: true;\n        }\n        display "One Color Smoothed 4 with Lines" type: 3d background: #black {\n            camera \'default\' location: {50.7757,142.7832,27.2522} target: {50.3509,7.5626,0.0};\n            mesh cells scale: 5 color:  palette([#lightblue, #blue, #blue, #darkblue]) triangulation: true border: #white smooth: 4;\n        }\n        \n\n        display "Scale" type: 3d background: #black {\n            camera \'default\' location: {48.6197,99.6662,110.4741} target: {50.6666,17.0904,0.0};\n            mesh cells scale:5 color: scale([#red::1, #yellow::2, #green::3, #blue::6])  ;\n        }\n        \n        display "Simple gradient" type: 3d background: #white antialias:true { \n            camera \'default\' location: {50.7757,142.7832,27.2522} target: {50.3509,7.5626,0.0};\n            mesh cells scale:0 color: palette([#lightblue, #blue, #blue, #darkblue]) ;\n            \n        }\n    }\n\n}\n\n\n')))}m.isMDXComponent=!0}}]);