"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[86755],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>f});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),p=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=p(e.components);return i.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,f=u["".concat(l,".").concat(d)]||u[d]||c[d]||r;return n?i.createElement(f,o(o({ref:t},m),{},{components:n})):i.createElement(f,o({ref:t},m))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<r;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},78093:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>p,toc:()=>u});var i=n(87462),a=n(63366),r=(n(67294),n(3905)),o=["components"],s={title:"Save and Restore simulations"},l=void 0,p={unversionedId:"Save-and-restore-simulations",id:"version-1.8.2-RC2/Save-and-restore-simulations",title:"Save and Restore simulations",description:"Last version of GAMA has introduced new features to save the state of a simulation at a given simulation cycle. This has two main applications:",source:"@site/versioned_docs/version-1.8.2-RC2/Save-and-restore-simulations.md",sourceDirName:".",slug:"/Save-and-restore-simulations",permalink:"/wiki/Save-and-restore-simulations",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/Save-and-restore-simulations/_edit",tags:[],version:"1.8.2-RC2",frontMatter:{title:"Save and Restore simulations"},sidebar:"side",previous:{title:"Using Comodel",permalink:"/wiki/Comodel"},next:{title:"Using network",permalink:"/wiki/UsingNetwork"}},m={},u=[{value:"Save a simulation",id:"save-a-simulation",level:2},{value:"Restore a simulation",id:"restore-a-simulation",level:2},{value:"Memorize simulation",id:"memorize-simulation",level:2}],c={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,r.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Last version of GAMA has introduced new features to save the state of a simulation at a given simulation cycle. This has two main applications:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The possibility to save the state of a simulation"),(0,r.kt)("li",{parentName:"ul"},"The possibility to restore a simulation from this file."),(0,r.kt)("li",{parentName:"ul"},"The possibility to go backward to an older state of a simulation.")),(0,r.kt)("h2",{id:"save-a-simulation"},"Save a simulation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'experiment saveSimu type: gui {\n\n    reflex store when: cycle = 5 {      \n        write "================ START SAVE + self " + " - " + cycle ;       \n        write "Save of simulation : " + saveSimulation(\'saveSimu.gsim\');\n        write "================ END SAVE + self " + " - " + cycle ;         \n    }   \n    \n    output {\n        display main_display {\n            species road aspect: geom;\n            species people aspect: base;                        \n        }\n    }   \n}\n')),(0,r.kt)("h2",{id:"restore-a-simulation"},"Restore a simulation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'experiment reloadSavedSimuOnly type: gui {\n    \n    action _init_ {\n        create simulation from: saved_simulation_file("saveSimu.gsim"); \n    }\n\n    output {\n        display main_display {\n            species road aspect: geom;\n            species people aspect: base;                        \n        }\n    }   \n}\n')),(0,r.kt)("h2",{id:"memorize-simulation"},"Memorize simulation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'model memorize\n\nglobal {\n    init{\n        create people number:1; \n    }\n}\n    \nspecies people skills: [moving] {\n        \n    init{\n        location <- {50, 50};       \n    }\n    reflex movement {\n        location <- {location.x + 1,location.y};\n    }\n        \n    aspect base {\n        draw circle(5) color: color;\n        draw ""+cycle;\n    }\n}\n\nexperiment memorizeExp type: memorize {\n\n    output {\n        display map {\n            species people aspect: base;\n        }\n    }\n}\n')))}d.isMDXComponent=!0}}]);