"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[56520],{61191:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var i=t(74848),o=t(28453);const l={title:"2. People Agents"},r=void 0,s={id:"RoadTrafficModel_step2",title:"2. People Agents",description:"This second step illustrates how to obtain a random point inside a geometry. We will also define some moving agent called people.",source:"@site/versioned_docs/version-1.8.1/RoadTrafficModel_step2.md",sourceDirName:".",slug:"/RoadTrafficModel_step2",permalink:"/wiki/1.8.1/RoadTrafficModel_step2",draft:!1,unlisted:!1,editUrl:"https://github.com/gama-platform/gama/wiki/RoadTrafficModel_step2/_edit",tags:[],version:"1.8.1",frontMatter:{title:"2. People Agents"},sidebar:"tuto",previous:{title:"1. Loading of GIS Data",permalink:"/wiki/1.8.1/RoadTrafficModel_step1"},next:{title:"3. Movement of People",permalink:"/wiki/1.8.1/RoadTrafficModel_step3"}},a={},d=[{value:"Formulation",id:"formulation",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"species",id:"species",level:3},{value:"Parameter",id:"parameter",level:3},{value:"Creation and placement of the people agents",id:"creation-and-placement-of-the-people-agents",level:3}];function c(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["This second step illustrates how to obtain a random point inside a geometry. We will also define some moving agent called ",(0,i.jsx)(n.code,{children:"people"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"formulation",children:"Formulation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Define a new species of agents: the ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"people"})})," agents. The ",(0,i.jsx)(n.code,{children:"people"})," agents have a point for geometry and are represented by a yellow circle of radius 10m."]}),"\n",(0,i.jsxs)(n.li,{children:["At initialization, 100 ",(0,i.jsx)(n.code,{children:"people"})," agents are created. Each ",(0,i.jsx)(n.code,{children:"people"})," agent is placed inside a building of type 'Residential' (randomly selected)."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"model-definition",children:"Model Definition"}),"\n",(0,i.jsx)(n.h3,{id:"species",children:"species"}),"\n",(0,i.jsxs)(n.p,{children:["We define a new species of agents: the ",(0,i.jsx)(n.strong,{children:"people"})," agents. In this model, these agents will not have a specific behavior yet. They will be just displayed. Thus, we just have to define an aspect for the agents. We want to represent the ",(0,i.jsx)(n.code,{children:"people"})," agents by a yellow circle of radius 10m. We then use the ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"circle"})})," operator to define the shape to draw in the ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"draw"})})," command, with the expected inner color (facet ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"color"})}),") and border color (facet ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"border"})}),")."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"species people {\n    rgb color <- #yellow ;\n\t\n    aspect base {\n\tdraw circle(10) color: color border: #black;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"parameter",children:"Parameter"}),"\n",(0,i.jsxs)(n.p,{children:["We add a new parameter: the number of ",(0,i.jsx)(n.code,{children:"people"})," agents created."]}),"\n",(0,i.jsxs)(n.p,{children:["In the global section, we first define the ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"nb_people"})})," variable:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"    int nb_people <- 100;\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In the ",(0,i.jsx)(n.code,{children:"experiment"})," section, we introduce a new ",(0,i.jsx)(n.code,{children:"parameter"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'    parameter "Number of people agents" var: nb_people category: "People" ;\n'})}),"\n",(0,i.jsx)(n.h3,{id:"creation-and-placement-of-the-people-agents",children:"Creation and placement of the people agents"}),"\n",(0,i.jsxs)(n.p,{children:["We have to create ",(0,i.jsx)(n.code,{children:"nb_people"})," ",(0,i.jsx)(n.code,{children:"people"})," agents. Each ",(0,i.jsx)(n.code,{children:"people"}),"agent is placed in a building of type 'Residential' randomly selected. In order to simplify the GAML code, we define a local variable ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"residential_buildings"})})," that contain the list of the buildings of type 'Residential'. To filter the list of ",(0,i.jsx)(n.code,{children:"building"})," agents (obtained by ",(0,i.jsx)(n.code,{children:"building"}),"), we use the ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"where"})})," operator. We use the operator ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"one_of"})})," to randomly select one agent of this list. There are several ways to place a ",(0,i.jsx)(n.code,{children:"people"})," agent inside the selected building. In this tutorial, we choose to use the ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"any_location_in"})})," operator. This operator returns a random point situated inside the operand geometry."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'model tutorial_gis_city_traffic\n\nglobal {\n    file shape_file_buildings <- file("../includes/building.shp");\n    file shape_file_roads <- file("../includes/road.shp");\n    file shape_file_bounds <- file("../includes/bounds.shp");\n    geometry shape <- envelope(shape_file_bounds);\n    float step <- 10 #mn;\n    int nb_people <- 100;\n\t\n    init {\n\tcreate building from: shape_file_buildings with: [type::string(read ("NATURE"))] {\n\t    if type="Industrial" {\n\t\tcolor <- #blue ;\n\t    }\n\t}\n\tcreate road from: shape_file_roads ;\n\t\t\n\tlist<building> residential_buildings <- building where (each.type="Residential");\n\tcreate people number: nb_people {\n\t    location <- any_location_in (one_of (residential_buildings));\n\t}\n    }\n}\n\nspecies building {\n    string type; \n    rgb color <- #gray  ;\n\t\n    aspect base {\n\tdraw shape color: color ;\n    }\n}\n\nspecies road  {\n    rgb color <- #black ;\n    aspect base {\n\tdraw shape color: color ;\n    }\n}\n\nspecies people {\n    rgb color <- #yellow ;\n\t\n    aspect base {\n\tdraw circle(10) color: color border: #black;\n    }\n}\n\nexperiment road_traffic type: gui {\n    parameter "Shapefile for the buildings:" var: shape_file_buildings category: "GIS" ;\n    parameter "Shapefile for the roads:" var: shape_file_roads category: "GIS" ;\n    parameter "Shapefile for the bounds:" var: shape_file_bounds category: "GIS" ;\n    parameter "Number of people agents" var: nb_people category: "People" ;\n\t\n    output {\n\tdisplay city_display type:opengl {\n\t    species building aspect: base ;\n\t    species road aspect: base ;\n\t    species people aspect: base ;\n\t}\n    }\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var i=t(96540);const o={},l=i.createContext(o);function r(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);