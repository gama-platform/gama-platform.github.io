require 'yaml'
require 'uri'

# use Jekyll configuration file
CONFIG = YAML.load_file("_config.yml")
URL_LAYOUT_DEFAULT = "../_layouts/default.html"
URL_MENU_FILE = "./WebsiteTreeStructure.txt"
task default: :build_dev

# == Helpers ===========================================
def check_configuration
  if CONFIG['wikiToJekyll'].nil? or CONFIG['wikiToJekyll'].empty?
    raise "Please set your configuration in _config.yml. See the readme."
  end
end

# shortener to get configuration parameter
def g(key)
  CONFIG['wikiToJekyll'][ key ]
end


def get_wiki_repository_url

  derived_url = ':https =>//github.com/' + g('user_name') + '/' + g('repository_name') + '.wiki.git'

  url = g('wiki_repository_url') || derived_url

end

# IMPORTANT ++++++++++++++++
# you submodule MUST be added with the :https =>// scheme
# git add submoudle :https =>//github.com/userName/RepositoryName.wiki.git
# otherwise you will have github errors
def update_wiki_submodule
  cd g('wiki_source') do
    pullCommand = 'git pull origin master'
    puts "Updating wiki submodule"
    output = `#{pullCommand}`

    if output.include? 'Already up-to-date'
      abort("No update necessary") # exit
    end
  end
end

def clean_wiki_folders
  if File.exist?(g('wiki_dest'))
    puts "remove older wiki pages"
    subdir_list= Dir.entries("#{g('wiki_source')}").select {|entry| File.directory? File.join("#{g('wiki_source')}",entry) and !(entry =='.'|| entry =='.git' || entry == '..') }
    puts("Looking for subfolders")
    subdir_list.each do |subfolder| 
      removeFolder(subfolder)
    end
    Dir.glob("#{g('wiki_dest')}/*.md") do |wikiPage|
      puts "removing #{g('wiki_dest')}"
      rm_rf wikiPage
    end
  else
    puts "create the dest dir for wiki pages"
    FileUtils.mkdir(g('wiki_dest'))
  end
end
def removeFolder(folder)
  puts "removing "+File.join("#{g('wiki_dest')}",folder)
  subdir_list=Dir.entries(File.join("#{g('wiki_source')}",folder)).select {|entry| File.directory? File.join("#{g('wiki_source')}",folder,entry) and !(entry =='.'||entry =='.git' || entry == '..') }
  subdir_list.each do |subfolder| 
    removeFolder(File.join(folder,subfolder))
  end
  Dir.glob(File.join("#{g('wiki_dest')}",folder,"/*.md")) do |wikiPage|
    rm_rf wikiPage
  end
  FileUtils.rm_rf(File.join("#{g('wiki_dest')}",folder))
end
def copy_wiki_pages
    # here we only glob page beginning by a letter
    # no _footer.md or thing like this
    subdir_list= Dir.entries("#{g('wiki_source')}").select {|entry| File.directory? File.join("#{g('wiki_source')}",entry) and !(entry =='.'|| entry =='.git' || entry == '..') }
    puts("Looking for subfolders...")
    subdir_list.each do |subfolder| 
      findPages(subfolder)
    end
    
    
    Dir.glob(File.join("#{g('wiki_source')}","[A-Za-z]*.*")) do |aFile|
      wikiPageFileName = File.basename(aFile).gsub(" ","-")
      wikiPagePath     = File.join("#{g('wiki_dest')}",wikiPageFileName)
      if(File.extname(aFile)==".md")
        # remove extension
        wikiPageName    = wikiPageFileName.sub(/.[^.]+\z/,'')
        wikiPageTitle = File.basename(wikiPageName)
        File.foreach(aFile) do |line|
          if(line.include? "#")and(line[0]=="#")
            wikiPageTitle = line.gsub("\#","")
            wikiPageTitle = wikiPageTitle.gsub("\n","")
            if(wikiPageTitle[0]!=" ")
              wikiPageTitle=" "+wikiPageTitle
            end
            break
          end
        end 
        fileContent      = File.read(aFile)
        fileContent.gsub('\(resources','\(\/resources')
        puts "generating #{wikiPagePath}"
        # write the new file with yaml front matter
        open(wikiPagePath, 'w') do |newWikiPage|
          newWikiPage.puts "---"
          newWikiPage.puts ":layout => default"
          newWikiPage.puts ":title => #{wikiPageTitle}"
          # used to transform links
          newWikiPage.puts ":wikiPageName => #{wikiPageName}"
          newWikiPage.puts ":wikiPagePath => #{wikiPagePath}"
          # used to generate a wiki specific menu. see readme
          newWikiPage.puts "---"
          newWikiPage.puts ""
          File.foreach(aFile) do |line|
            if(line.include? "(resources/")and(line.include?"![")
              newWikiPage.puts linkup(line)
            else
              if(line.include?"[")and(!line.include?"http")and(!line.include?"![")
                #Change the link for a page coming from the website
                newWikiPage.puts changeLink(line)
              else
                newWikiPage.puts line
              end
            end
          end
        end
      else
        FileUtils.cp(aFile,wikiPagePath)
      end
      
    end

    defineLayoutMenu()
end
def findPages(folder)
  FileUtils.mkdir(File.join("#{g('wiki_dest')}",folder))
  subdir_list=Dir.entries(File.join("#{g('wiki_source')}",folder)).select {|entry| File.directory? File.join("#{g('wiki_source')}",folder,entry) and !(entry =='.'||entry =='.git' || entry == '..') }
  subdir_list.each do |subfolder| 
    findPages(File.join(folder,subfolder))
  end 
  Dir.glob(File.join("#{g('wiki_source')}",folder,"[A-Za-z]*.*")) do |aFile|
    wikiPageFileName = File.basename(aFile).gsub(" ","-")
    wikiPagePath     = File.join("#{g('wiki_dest')}",folder, wikiPageFileName)
    
    if(File.extname(aFile)==".md")
      # remove extension
      wikiPageName    = wikiPageFileName.sub(/.[^.]+\z/,'')
      wikiPageTitle = File.basename(wikiPageName)
      File.foreach(aFile) do |line|
        if(line.include? "#")and(line[0]=="#")
          wikiPageTitle = line.gsub("\#","")
          wikiPageTitle = wikiPageTitle.gsub("\n","")
          if(wikiPageTitle[0]!=" ")
            wikiPageTitle=" "+wikiPageTitle
          end
          break
        end
      end 
      fileContent      = File.read(aFile)
      folderString = File.join("#{g('wiki_dest')}",folder)
      puts "generating #{wikiPagePath}"
      # write the new file with yaml front matter
      open(wikiPagePath, 'w') do |newWikiPage|
        newWikiPage.puts "---"
        newWikiPage.puts ":layout => default"
        newWikiPage.puts ":title =>#{wikiPageTitle}"
        # used to transform links
        newWikiPage.puts ":wikiPageName => #{wikiPageName}"
        newWikiPage.puts ":wikiPagePath => #{wikiPagePath}"
        # used to generate a wiki specific menu. see readme
        newWikiPage.puts "---"
        newWikiPage.puts ""
        File.foreach(aFile) do |line|
          if(line.include? "(resources/")and(line.include?"![")
            newWikiPage.puts linkup(line)
          else
            if(line.include?"[")and(!line.include?"http")and(!line.include?"![")
              #Change the link for a page coming from the website
              newWikiPage.puts changeLink(line)
            else
              newWikiPage.puts line
            end
          end
        end
      end
    else
      FileUtils.cp(aFile,wikiPagePath)
    end
  end
end
def changeLink(str)
  reg =  %r{
    \[         # Literal opening bracket
      (        # Capture what we find in here
        [^\]]+ # One or more characters other than close bracket
      )        # Stop capturing
    \]         # Literal closing bracket
    \(         # Literal opening parenthesis
      (        # Capture what we find in here
        [^)]+  # One or more characters other than close parenthesis
      )        # Stop capturing
    \)         # Literal closing parenthesis
  }
  print("WORKING ON AN INTERNAL LINK")
  parts = str.match(reg)
  if(parts.count>1)
    oldUnder = -1
    arr = Array.new
    res="#{g('wiki_dest')}"
    File.foreach(File.join("#{g('wiki_source')}",URL_MENU_FILE)) do |line|
      currentUnder = count_em(line,"-")
      if(currentUnder>oldUnder)
        oldUnder = currentUnder
        arr.push(line.gsub("-",""))
      else
        if(currentUnder<oldUnder)
          loop do 
            arr.pop
            oldUnder = oldUnder -1
            break if oldUnder==currentUnder
          end
        else
          arr.pop
          arr.push(line.gsub("-",""))
        end
      end
      if(line.gsub("-","")==parts[2])
        arr.each{|aLink| res= res+"/"+aLink}
      end
    end
    print("LINK FOUND : "+str.gsub(r, '[\1]('+res+')'))
    return str.gsub(r, '[\1]('+res+')')
  else
    print("LINK NOT FOUND : "+str)
    str
  end
    
  
  
end
def linkup( str )
  str.gsub %r{
    \[         # Literal opening bracket
      (        # Capture what we find in here
        [^\]]+ # One or more characters other than close bracket
      )        # Stop capturing
    \]         # Literal closing bracket
    \(         # Literal opening parenthesis
      (        # Capture what we find in here
        [^)]+  # One or more characters other than close parenthesis
      )        # Stop capturing
    \)         # Literal closing parenthesis
  }x, '[\1](/\2)'
end
def build_jekyll
  system 'jekyll build'
end
def count_em(string, substring)
  string.scan(/(?=#{substring})/).count
end
def defineLayoutMenu
  
  rm_rf File.join("#{g('wiki_source')}",URL_LAYOUT_DEFAULT)
  open(File.join("#{g('wiki_source')}",URL_LAYOUT_DEFAULT), 'w') do |newLayout|
    newLayout.puts '<!doctype html><html lang="en"><head><meta charset="utf-8"><title>{{ title }}</title>{% include style.html %}</head>
    <body>
    
      <div id="left">'
    oldUnder=-1
    arborescence = []
    File.foreach(File.join("#{g('wiki_source')}",URL_MENU_FILE)) do |line|
      
      currentUnder = count_em(line,"-")
      #Fils du courant
      if(currentUnder>oldUnder)
        if(oldUnder==-1)
          newLayout.puts '<nav>
		<ul class="mcd-menu">'
        else
          newLayout.puts "<ul class='sub'>"
        end
        oldUnder=currentUnder
        arborescence.push(line.gsub("-","").gsub("\n",""))
      else
        #PÃ¨re du courant
        if(currentUnder<oldUnder)
          arborescence.pop
          loop do 
            newLayout.puts "</ul>"
            oldUnder = oldUnder -1
            arborescence.pop
            break if oldUnder==currentUnder
          end
          arborescence.push(line.gsub("-","").gsub("\n",""))
        #FrÃ¨re du courant
        else
          arborescence.pop
          arborescence.push(line.gsub("-","").gsub("\n",""))
        end
      end
      fileWithName = "#{g('wiki_dest')}"
      arborescence.each{|aString| fileWithName = fileWithName+"/"+aString}
      title=line
      if(File.exists?(fileWithName+".md"))
        File.foreach(fileWithName+".md") do |row|
          if(row.include? ":title =>")
            title = row
            break
          end
        end 
        newLayout.puts "<li><a href='/"+fileWithName+".html'>"+title.gsub(":title => ","")+"</a>"+"</li>"
      else
        newLayout.puts "<li>"+title.gsub("-","")+"</li>"
      end
    end
    newLayout.puts '</ul></ul></div><div id="right">{{ content }}</div></body></html>'
  end
  
 
end
def deploy
    puts "deploying"
    system "git add -A"
    message = "Site wiki update #{Time.now.utc}"
    puts "\n## :Committing => #{message}"
    system "git commit -m \"#{message}\""
    puts "\n## Pushing website"
    system "git push #{g('deploy_remote')} #{g('deploy_branch')}"
    puts "\n## Github Pages deploy complete"
end

# synch repository wiki pages with Jekyll
# needs a public wiki
task :wiki do |t|
    check_configuration
    update_wiki_submodule
    :Rake =>:Task[:wikibuild].execute
    if g('commit_and_push') == true
        deploy
    end
    puts "Wiki synchronisation success !"
end

# add wiki as a submodule
task :wikisub do |t|

  puts "adding wiki as submodule"
  check_configuration
  wiki_repository = get_wiki_repository_url
  command = 'git submodule add ' + wiki_repository + ' ' + g('wiki_source')
  command += ' && git submodule init'
  command += ' && git submodule update'
  puts 'command : ' + command

  output = `#{command}`

  if output.include? 'failed'
    abort("submodule add failed : verify you configuration and that your wiki is public") # exit
  end

  puts "wiki submodule OK"
end


task :wikibuild do |t|
  puts ':rake =>wikibuild'
  clean_wiki_folders
  copy_wiki_pages
  build_jekyll
end

task :build_dev do |t|
  puts "Building with dev parameters"
  sh 'jekyll build --config _config.yml,_config_dev.yml --trace'
end

task :prod do |t|
  puts "Building with production parameters"
  sh 'jekyll build'
end

task :deploy do |t|
    deploy
end
