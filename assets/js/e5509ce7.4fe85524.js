"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[91678],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=d(n),m=i,f=c["".concat(p,".").concat(m)]||c[m]||u[m]||r;return n?a.createElement(f,o(o({ref:t},s),{},{components:n})):a.createElement(f,o({ref:t},s))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var d=2;d<r;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},75195:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>m,frontMatter:()=>l,metadata:()=>d,toc:()=>u});var a=n(87462),i=n(63366),r=(n(67294),n(3905)),o=["components"],l={title:"2. Charts"},p=void 0,d={unversionedId:"IncrementalModel_step2",id:"IncrementalModel_step2",title:"2. Charts",description:"This step Illustrates how to define monitors and charts in GAMA. In addition, it illustrates how to define a stopping condition for the simulation.",source:"@site/../docs/IncrementalModel_step2.md",sourceDirName:".",slug:"/IncrementalModel_step2",permalink:"/wiki/next/IncrementalModel_step2",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/IncrementalModel_step2/_edit",tags:[],version:"current",frontMatter:{title:"2. Charts"},sidebar:"tuto",previous:{title:"1. Simple SI Model",permalink:"/wiki/next/IncrementalModel_step1"},next:{title:"3. Integration of GIS Data",permalink:"/wiki/next/IncrementalModel_step3"}},s={},u=[{value:"Formulation",id:"formulation",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"global variables",id:"global-variables",level:3},{value:"stopping condition",id:"stopping-condition",level:3},{value:"monitor",id:"monitor",level:3},{value:"chart",id:"chart",level:3},{value:"Complete Model",id:"complete-model",level:2}],c={toc:u};function m(e){var t=e.components,l=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},c,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This step Illustrates how to define monitors and charts in GAMA. In addition, it illustrates how to define a stopping condition for the simulation."),(0,r.kt)("h2",{id:"formulation"},"Formulation"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Definition of new global variables: current","_","hour, nb","_","people","_","infected, nb","_","people","_","not","_","infected, infected","_","rate."),(0,r.kt)("li",{parentName:"ul"},"Definition of a monitor to follow the current hour and the nb of people infected."),(0,r.kt)("li",{parentName:"ul"},"Definition of a series chart to follow the number of people infected and not infected."),(0,r.kt)("li",{parentName:"ul"},"Definition of a stopping condition (when infected rate = 1).")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Incremental model 2: plot of the disease spread.",src:n(12373).Z,width:"3584",height:"2118"})),(0,r.kt)("h2",{id:"model-definition"},"Model Definition"),(0,r.kt)("h3",{id:"global-variables"},"global variables"),(0,r.kt)("p",null,"In order to define dynamic variable able to update itself, we use the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"update"))," facet of variable definition.\nIndeed, at each simulation step, all the agents (and the world agent) apply for each dynamic variable (in their definition order) its update expression."),(0,r.kt)("p",null,"We add 3 new global variables:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"nb_people_infected"))," (int): nb of people with ",(0,r.kt)("inlineCode",{parentName:"li"},"is_infected")," is ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," (use of the ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"list count condition"))," operator that count the number of elements of the list for which the condition is true)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"nb_people_not_infected"))," (int): ",(0,r.kt)("inlineCode",{parentName:"li"},"nb_people - nb_people_infected")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"infected_rate"))," (float): ",(0,r.kt)("inlineCode",{parentName:"li"},"nb_people_infected / nb_people")," ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"global{\n    ...\n    int nb_people_infected <- nb_infected_init update: people count (each.is_infected);\n    int nb_people_not_infected <- nb_people - nb_infected_init update: nb_people - nb_people_infected;\n    float infected_rate update: nb_people_infected/nb_people;\n    ...\n}\n")),(0,r.kt)("h3",{id:"stopping-condition"},"stopping condition"),(0,r.kt)("p",null,"We add a new reflex that stops the simulation when all the people agents are infected (i.e. if the ",(0,r.kt)("inlineCode",{parentName:"p"},"infected_rate")," is equal to 1). To stop the simulation, we use the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"pause"))," global action."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"global {\n    ...\n    reflex end_simulation when: infected_rate = 1.0 {\n    do pause;\n    }\n}\n")),(0,r.kt)("h3",{id:"monitor"},"monitor"),(0,r.kt)("p",null,"A monitor allows the modeler to follow the value of an arbitrary expression in GAML. It has to be defined in an output section. A ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"monitor"))," is defined as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    monitor monitor_name value: an_expression refresh:every(nb_steps);\n")),(0,r.kt)("p",null,"With:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value"),": mandatory, its value that will be displayed in the monitor."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"refresh"),": bool, optional: if the expression is true, compute (default is true).")),(0,r.kt)("p",null,"In this model, we define 2 monitors to follow: (i) the value of the variable ",(0,r.kt)("inlineCode",{parentName:"p"},"infected_rate"),", and (ii) to follow the time in the simulation (we will display the hour day). "),(0,r.kt)("p",null,"As ",(0,r.kt)("a",{parentName:"p",href:"ManipulateDates"},"detailed in the dedicated page"),", GAML language provides a datatype to manage ",(0,r.kt)("inlineCode",{parentName:"p"},"date")," (with second, minute, hour, day, month and year), and compute automatically the date in the simulation from the global variable ",(0,r.kt)("inlineCode",{parentName:"p"},"starting_date")," of the simulation and the ",(0,r.kt)("inlineCode",{parentName:"p"},"step")," value: this value is stored in the ",(0,r.kt)("inlineCode",{parentName:"p"},"current_date")," global variable. To monitor the current hour, we can access to the ",(0,r.kt)("inlineCode",{parentName:"p"},"hour")," attribute of this variable (",(0,r.kt)("inlineCode",{parentName:"p"},"current_date.hour"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'experiment main_experiment type: gui {\n    ...\n    output {\n    monitor "Current hour" value: current_date.hour;\n    monitor "Infected people rate" value: infected_rate;\n    ...\n    }\n}\n')),(0,r.kt)("h3",{id:"chart"},"chart"),(0,r.kt)("p",null,"GAMA can display ",(0,r.kt)("a",{parentName:"p",href:"DefiningCharts"},"various chart types"),", for example:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Time series"),(0,r.kt)("li",{parentName:"ul"},"Pie charts"),(0,r.kt)("li",{parentName:"ul"},"Histograms")),(0,r.kt)("p",null,"A chart must be defined in a display: it behaves exactly like any other layer.\nDefinition of a chart:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"chart chart_name type: chart_type  {\n     [data]\n}\n")),(0,r.kt)("p",null,"The data to draw are defined inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"chart")," block with the ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," statement:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"data data_legend value: data_value\n")),(0,r.kt)("p",null,'We add a new display called "chart" and refreshed every 10 simulation steps.\nInside this display, we define a chart of type ',(0,r.kt)("inlineCode",{parentName:"p"},"series"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'"Disease spreading"; background: white; of type series and style spline (no remove the markers)',(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"data1: susceptible; color : green"),(0,r.kt)("li",{parentName:"ul"},"data2: infected; color : red")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'experiment main_experiment type: gui{\n    ...\n    output {\n    ...\n    display chart refresh: every(10#cycles) {\n        chart "Disease spreading" type: series style: spline {\n        data "susceptible" value: nb_people_not_infected color: #green;\n        data "infected" value: nb_people_infected color: #red;\n        }\n    }\n    }\n}\n')),(0,r.kt)("h2",{id:"complete-model"},"Complete Model"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"https://github.com/gama-platform/gama/blob/GAMA_1.8.2/msi.gama.models/models/Tutorials/Incremental%20Model/models/Incremental%20Model%202.gaml\n")))}m.isMDXComponent=!0},12373:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Incremental_model2-489c9a73d05d280b85e27db1951d5040.png"}}]);