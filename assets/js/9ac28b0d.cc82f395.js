"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[32426],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>u});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},c="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=s(t),m=r,u=c["".concat(p,".").concat(m)]||c[m]||f[m]||o;return t?a.createElement(u,i(i({ref:n},d),{},{components:t})):a.createElement(u,i({ref:n},d))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},81136:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>p,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var a=t(87462),r=t(63366),o=(t(67294),t(3905)),i=["components"],l={title:"2. People Agents"},p=void 0,s={unversionedId:"RoadTrafficModel_step2",id:"version-1.8.1/RoadTrafficModel_step2",title:"2. People Agents",description:"This second step illustrates how to obtain a random point inside a geometry. We will also define some moving agent called people.",source:"@site/versioned_docs/version-1.8.1/RoadTrafficModel_step2.md",sourceDirName:".",slug:"/RoadTrafficModel_step2",permalink:"/wiki/1.8.1/RoadTrafficModel_step2",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/RoadTrafficModel_step2/_edit",tags:[],version:"1.8.1",frontMatter:{title:"2. People Agents"},sidebar:"tuto",previous:{title:"1. Loading of GIS Data",permalink:"/wiki/1.8.1/RoadTrafficModel_step1"},next:{title:"3. Movement of People",permalink:"/wiki/1.8.1/RoadTrafficModel_step3"}},d={},c=[{value:"Formulation",id:"formulation",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"species",id:"species",level:3},{value:"Parameter",id:"parameter",level:3},{value:"Creation and placement of the people agents",id:"creation-and-placement-of-the-people-agents",level:3}],f={toc:c},m="wrapper";function u(e){var n=e.components,t=(0,r.Z)(e,i);return(0,o.kt)(m,(0,a.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This second step illustrates how to obtain a random point inside a geometry. We will also define some moving agent called ",(0,o.kt)("inlineCode",{parentName:"p"},"people"),"."),(0,o.kt)("h2",{id:"formulation"},"Formulation"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Define a new species of agents: the ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"people"))," agents. The ",(0,o.kt)("inlineCode",{parentName:"li"},"people")," agents have a point for geometry and are represented by a yellow circle of radius 10m."),(0,o.kt)("li",{parentName:"ul"},"At initialization, 100 ",(0,o.kt)("inlineCode",{parentName:"li"},"people")," agents are created. Each ",(0,o.kt)("inlineCode",{parentName:"li"},"people")," agent is placed inside a building of type 'Residential' (randomly selected).")),(0,o.kt)("h2",{id:"model-definition"},"Model Definition"),(0,o.kt)("h3",{id:"species"},"species"),(0,o.kt)("p",null,"We define a new species of agents: the ",(0,o.kt)("strong",{parentName:"p"},"people")," agents. In this model, these agents will not have a specific behavior yet. They will be just displayed. Thus, we just have to define an aspect for the agents. We want to represent the ",(0,o.kt)("inlineCode",{parentName:"p"},"people")," agents by a yellow circle of radius 10m. We then use the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"circle"))," operator to define the shape to draw in the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"draw"))," command, with the expected inner color (facet ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"color")),") and border color (facet ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"border")),")."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"species people {\n    rgb color <- #yellow ;\n    \n    aspect base {\n    draw circle(10) color: color border: #black;\n    }\n}\n")),(0,o.kt)("h3",{id:"parameter"},"Parameter"),(0,o.kt)("p",null,"We add a new parameter: the number of ",(0,o.kt)("inlineCode",{parentName:"p"},"people")," agents created."),(0,o.kt)("p",null,"In the global section, we first define the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"nb_people"))," variable:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    int nb_people <- 100;\n")),(0,o.kt)("p",null,"In the ",(0,o.kt)("inlineCode",{parentName:"p"},"experiment")," section, we introduce a new ",(0,o.kt)("inlineCode",{parentName:"p"},"parameter"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    parameter "Number of people agents" var: nb_people category: "People" ;\n')),(0,o.kt)("h3",{id:"creation-and-placement-of-the-people-agents"},"Creation and placement of the people agents"),(0,o.kt)("p",null,"We have to create ",(0,o.kt)("inlineCode",{parentName:"p"},"nb_people")," ",(0,o.kt)("inlineCode",{parentName:"p"},"people")," agents. Each ",(0,o.kt)("inlineCode",{parentName:"p"},"people"),"agent is placed in a building of type 'Residential' randomly selected. In order to simplify the GAML code, we define a local variable ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"residential_buildings"))," that contain the list of the buildings of type 'Residential'. To filter the list of ",(0,o.kt)("inlineCode",{parentName:"p"},"building")," agents (obtained by ",(0,o.kt)("inlineCode",{parentName:"p"},"building"),"), we use the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"where"))," operator. We use the operator ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"one_of"))," to randomly select one agent of this list. There are several ways to place a ",(0,o.kt)("inlineCode",{parentName:"p"},"people")," agent inside the selected building. In this tutorial, we choose to use the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"any_location_in"))," operator. This operator returns a random point situated inside the operand geometry."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'model tutorial_gis_city_traffic\n\nglobal {\n    file shape_file_buildings <- file("../includes/building.shp");\n    file shape_file_roads <- file("../includes/road.shp");\n    file shape_file_bounds <- file("../includes/bounds.shp");\n    geometry shape <- envelope(shape_file_bounds);\n    float step <- 10 #mn;\n    int nb_people <- 100;\n    \n    init {\n    create building from: shape_file_buildings with: [type::string(read ("NATURE"))] {\n        if type="Industrial" {\n        color <- #blue ;\n        }\n    }\n    create road from: shape_file_roads ;\n        \n    list<building> residential_buildings <- building where (each.type="Residential");\n    create people number: nb_people {\n        location <- any_location_in (one_of (residential_buildings));\n    }\n    }\n}\n\nspecies building {\n    string type; \n    rgb color <- #gray  ;\n    \n    aspect base {\n    draw shape color: color ;\n    }\n}\n\nspecies road  {\n    rgb color <- #black ;\n    aspect base {\n    draw shape color: color ;\n    }\n}\n\nspecies people {\n    rgb color <- #yellow ;\n    \n    aspect base {\n    draw circle(10) color: color border: #black;\n    }\n}\n\nexperiment road_traffic type: gui {\n    parameter "Shapefile for the buildings:" var: shape_file_buildings category: "GIS" ;\n    parameter "Shapefile for the roads:" var: shape_file_roads category: "GIS" ;\n    parameter "Shapefile for the bounds:" var: shape_file_bounds category: "GIS" ;\n    parameter "Number of people agents" var: nb_people category: "People" ;\n    \n    output {\n    display city_display type:opengl {\n        species building aspect: base ;\n        species road aspect: base ;\n        species people aspect: base ;\n    }\n    }\n}\n')))}u.isMDXComponent=!0}}]);