"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[90602],{5749:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/create_chart-4ad99eecc8b0d4d27d7ca13a52a477a2.gif"},28453:(e,i,t)=>{t.d(i,{R:()=>l,x:()=>r});var n=t(96540);const a={},s=n.createContext(a);function l(e){const i=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),n.createElement(s.Provider,{value:i},e.children)}},36825:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/sim_with_chart-2f56fb52532887e207e557c7261f0ba0.gif"},45187:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/create_aspect-0e6bf000abe6327b399ebe6f3ca1f71c.gif"},48761:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/create_reflex-80b3c8a23afb0859116cdcb4c4a9b896.gif"},55650:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/create_diagram-99c1e2b0a12f3a863c8cf64c3b9b4a87.gif"},63867:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/run_sim-187f0ce12f62c7fde7c4ab9453a28092.gif"},73009:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"G__GraphicalEditorTutorial","title":"Creation of a basic disease spreading model","description":"This tutorial illustrates how to create simple agents and make them move in their environment.","source":"@site/versioned_docs/version-1.8.2-RC2/G__GraphicalEditorTutorial.md","sourceDirName":".","slug":"/G__GraphicalEditorTutorial","permalink":"/wiki/1.8.2-RC2/G__GraphicalEditorTutorial","draft":false,"unlisted":false,"editUrl":"https://github.com/gama-platform/gama/wiki/G__GraphicalEditorTutorial/_edit","tags":[],"version":"1.8.2-RC2","frontMatter":{"title":"Creation of a basic disease spreading model"}}');var a=t(74848),s=t(28453);const l={title:"Creation of a basic disease spreading model"},r=void 0,o={},d=[{value:"Formulation",id:"formulation",level:2},{value:"Diagram Definition",id:"diagram-definition",level:2},{value:"Project and diagram",id:"project-and-diagram",level:3},{value:"diagram structure",id:"diagram-structure",level:3},{value:"species",id:"species",level:3},{value:"Internal state",id:"internal-state",level:4},{value:"Behavior",id:"behavior",level:4},{value:"Display",id:"display",level:4},{value:"global section",id:"global-section",level:3},{value:"Model initialization",id:"model-initialization",level:4},{value:"experiment",id:"experiment",level:3},{value:"output",id:"output",level:4},{value:"Run simulation",id:"run-simulation",level:4},{value:"Define a chart",id:"define-a-chart",level:4}];function c(e){const i={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.p,{children:"This tutorial illustrates how to create simple agents and make them move in their environment."}),"\n",(0,a.jsx)(i.h2,{id:"formulation",children:"Formulation"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:"Define the people species with a moving skill"}),"\n",(0,a.jsx)(i.li,{children:"Define the move reflex that allows the people agent to move randomly and the infect_others reflex that allows them to infect other people agents."}),"\n",(0,a.jsx)(i.li,{children:"Define the aspect of the people species"}),"\n",(0,a.jsx)(i.li,{children:"Add the people species to a display"}),"\n",(0,a.jsx)(i.li,{children:"Add a chart display to follow the evolution of the number of infected people"}),"\n"]}),"\n",(0,a.jsx)(i.h2,{id:"diagram-definition",children:"Diagram Definition"}),"\n",(0,a.jsx)(i.h3,{id:"project-and-diagram",children:"Project and diagram"}),"\n",(0,a.jsx)(i.p,{children:'The first step of this tutorial consists in defining a new project, then in defining a new model from a skeleton (choose "skeleton" in "Choose a diagram".'}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{alt:"images/graphical_editor/create_diagram.gif",src:t(55650).A+"",width:"2422",height:"1440"})}),"\n",(0,a.jsx)(i.h3,{id:"diagram-structure",children:"diagram structure"}),"\n",(0,a.jsx)(i.p,{children:"A GAMA diagram is composed of three main types of elements:"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:'**world **: this element, generated at the creation of the diagram, that is unique, defines the "world" agent, a special agent of a GAMA model. It represents all that is global to the model: dynamics, variables, actions. In addition, it allows to initialize the simulation (init block).'}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"species"})," and ",(0,a.jsx)(i.strong,{children:"grid"}),": these elements define the species of agents composing the model."]}),"\n",(0,a.jsx)(i.li,{children:"**experiment **: these elements define a context of the execution of the simulations. In particular, it defines the input (parameters) and output (displays, files...) of a model."}),"\n"]}),"\n",(0,a.jsx)(i.h3,{id:"species",children:"species"}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{alt:"images/graphical_editor/create_people.gif",src:t(87434).A+"",width:"2785",height:"1542"})}),"\n",(0,a.jsxs)(i.p,{children:["A ",(0,a.jsx)(i.a,{href:"RegularSpecies",children:"species"})," represents a \xabprototype\xbb of agents: it defines their common properties."]}),"\n",(0,a.jsx)(i.p,{children:"Three main elements can be defined in a species:"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:"the internal state of its agents (attributes)"}),"\n",(0,a.jsx)(i.li,{children:"their behavior"}),"\n",(0,a.jsx)(i.li,{children:"how they are displayed (aspects)"}),"\n"]}),"\n",(0,a.jsxs)(i.p,{children:["In our model, we define a new people species. In addition, we want to add a new capability to our agent: the possibility to move randomly. For that, we add a specific skill to our people agents. A ",(0,a.jsx)(i.a,{href:"AttachingSkills",children:"skill"})," is a built-in module that provides the modeler a self-contain and relevant set of actions and variables. The ",(0,a.jsx)(i.a,{href:"__BuiltInSkills#moving",children:"moving"})," provides the agents with several attributes and actions related to movement."]}),"\n",(0,a.jsx)(i.h4,{id:"internal-state",children:"Internal state"}),"\n",(0,a.jsxs)(i.p,{children:["An ",(0,a.jsx)(i.a,{href:"RegularSpecies#declaration",children:"attribute"})," is defined as follows: type of the attribute and name. Numerous types of attributes are available: ",(0,a.jsx)(i.em,{children:"int (integer), float (floating-point number), string, bool (boolean, true or false), point (coordinates), list, pair, map, file, matrix, agents species, rgb (color), graph, path..."})]}),"\n",(0,a.jsx)(i.p,{children:'In addition to the attributes the modeler explicitly defines, species "inherits" other attributes called "built-in" variables:'}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:["A name (",(0,a.jsx)(i.em,{children:"name"}),"): the identifier of the species"]}),"\n",(0,a.jsxs)(i.li,{children:["A shape (",(0,a.jsx)(i.em,{children:"shape"}),"): the default shape of the agents to be constructed after the species. It can be ",(0,a.jsx)(i.em,{children:"a point, a polygon, etc."})]}),"\n",(0,a.jsxs)(i.li,{children:["A location (",(0,a.jsx)(i.em,{children:"location"}),"): the centroid of its shape."]}),"\n"]}),"\n",(0,a.jsx)(i.p,{children:"In our model, we define 2 new attributes to our people agents:"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"is_infected"})," of type bool, with for initial value: false"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"color"})," of type rgb, with for initial value: #green"]}),"\n"]}),"\n",(0,a.jsx)(i.h4,{id:"behavior",children:"Behavior"}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{alt:"images/graphical_editor/create_reflex.gif",src:t(48761).A+"",width:"2785",height:"1542"})}),"\n",(0,a.jsx)(i.p,{children:"GAMA proposes several ways to define the behavior of a species: dynamic variables (update facet), reflexes..."}),"\n",(0,a.jsxs)(i.p,{children:["A ",(0,a.jsx)(i.a,{href:"DefiningActionsAndBehaviors#behaviors",children:"reflex"})," is a element (that can be defined to the world or any species) that will be automatically executed at each simulation step if its condition is true. The condition is optional: when it is omitted, the reflex is activated at each time step."]}),"\n",(0,a.jsxs)(i.p,{children:["We define a first reflex called ",(0,a.jsx)(i.strong,{children:"move"})," that is activated at each simulation step (no condition) and that makes the people move randomly using the wander action from the ",(0,a.jsx)(i.a,{href:"BuiltInSkills#moving",children:"moving"})," skill with an amplitude of 30\xb0."]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{children:"do wander amplitude: 30.0;\n"})}),"\n",(0,a.jsxs)(i.p,{children:["We define a second reflex called ",(0,a.jsx)(i.strong,{children:"infect"})," that is activated only when the agent is infected (is_infected = true) and that ask all the people at a distance of 5m to test a probability to be infected."]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{children:"ask people at_distance 5.0 {\n     if flip(0.1) {\n\tis_infected <- true;\n        color <- #red;\n     }\n}\n"})}),"\n",(0,a.jsxs)(i.p,{children:["The ",(0,a.jsx)(i.a,{href:"Statements#ask",children:"ask"})," allows an agent to ask other agents to do something (i.e. to execute a sequence of statements). The ",(0,a.jsx)(i.a,{href:"Operators#at_distance",children:"at_distance"})," operator allows to get the list of agents (here of people agents) that are located at a distance lower or equal to the given distance (here 5m). The ",(0,a.jsx)(i.a,{href:"Operators#flip",children:"flip"})," operator allows to test a probability."]}),"\n",(0,a.jsx)(i.h4,{id:"display",children:"Display"}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{alt:"images/graphical_editor/create_aspect.gif",src:t(45187).A+"",width:"2785",height:"1542"})}),"\n",(0,a.jsxs)(i.p,{children:["An agent ",(0,a.jsx)(i.a,{href:"RegularSpecies#the-aspect-statement",children:"aspects"})," have to be defined. An aspect is a way to display the agents of a species."]}),"\n",(0,a.jsx)(i.p,{children:"In an aspect, it is possible to draw:"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:"A geometry: for instance, the shape of the agent (but it may be a different one, for instance, a circle instead of a complex polygon)"}),"\n",(0,a.jsx)(i.li,{children:"An image: to draw icons"}),"\n",(0,a.jsx)(i.li,{children:"A text: to draw a text"}),"\n"]}),"\n",(0,a.jsxs)(i.p,{children:["In our model, we define an aspect for the people agent called ",(0,a.jsx)(i.strong,{children:"circle"})," that draw the agents as a circle of 1m radius with a color that depends on their ",(0,a.jsx)(i.strong,{children:"color"})," attribute. If the people agent is infected, it will be drawn in red, in green otherwise."]}),"\n",(0,a.jsx)(i.h3,{id:"global-section",children:"global section"}),"\n",(0,a.jsxs)(i.p,{children:["The global section represents a specific agent, called ",(0,a.jsx)(i.a,{href:"GlobalSpecies",children:"world"}),". Defining this agent follows the same principle as any agent and is, thus, defined after a species.\nThe world agent represents everything that is global to the model: dynamics, variables...\nIt allows to initialize simulations (init block): the world is always created and initialized first when a simulation is launched (before any other agents). The geometry (shape) of the world agent is by default a square with 100m for side size but can be redefined if necessary. The ",(0,a.jsx)(i.em,{children:"step"})," attribute of the world agent allows to specify the duration of one simulation step (by default, 1 step = 1 seconde)."]}),"\n",(0,a.jsx)(i.h4,{id:"model-initialization",children:"Model initialization"}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{alt:"images/graphical_editor/init_sim.gif",src:t(86190).A+"",width:"2785",height:"1542"})}),"\n",(0,a.jsxs)(i.p,{children:["The init section of the world allows to initialize the define what will happen at the initialization of a simulation, for instance, to create agents. We use the statement ",(0,a.jsx)(i.em,{children:"create"}),"  to create agents of a specific species: ",(0,a.jsx)(i.strong,{children:"create"})," species_name + :"]}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:"number: number of agents to create (int, 1 by default)"}),"\n",(0,a.jsx)(i.li,{children:"from: GIS file to use to create the agents (optional, string or file)"}),"\n",(0,a.jsx)(i.li,{children:"returns: list of created agents (list)"}),"\n"]}),"\n",(0,a.jsxs)(i.p,{children:["For our model, we define the init block in order to create ",(0,a.jsx)(i.em,{children:"nb_people"})," ",(0,a.jsx)(i.em,{children:"people"})," agents and ask ",(0,a.jsx)(i.em,{children:"nb_infected_init"})," of them to be infected:"]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{children:"create people number: nb_people;\nask one_of(people) {\n   is_infected <- true;\n   color <- #red;\n}\n"})}),"\n",(0,a.jsx)(i.h3,{id:"experiment",children:"experiment"}),"\n",(0,a.jsx)(i.p,{children:"An experiment defines how a model can be simulated (executed). Several experiments can be defined for a given model. Two types of experiment exists:"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:"gui: experiment with a graphical interface, which displays its input parameters and outputs."}),"\n",(0,a.jsx)(i.li,{children:"batch: Allows to setup a series of simulations (w/o graphical interface)."}),"\n"]}),"\n",(0,a.jsxs)(i.p,{children:["In our model, a gui experiment called ",(0,a.jsx)(i.em,{children:"my_GUI_xp"})," is already defined."]}),"\n",(0,a.jsx)(i.h4,{id:"output",children:"output"}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{alt:"images/graphical_editor/define_display.gif",src:t(76874).A+"",width:"2785",height:"1542"})}),"\n",(0,a.jsxs)(i.p,{children:[(0,a.jsx)(i.a,{href:"DefiningGUIExperiment",children:"Output"})," blocks are defined in an experiment and define how to visualize a simulation (with one or more ",(0,a.jsx)(i.a,{href:"DefiningDisplaysGeneralities",children:"display"})," blocks that define separate windows). Each display can be refreshed independently by defining the facet ",(0,a.jsx)(i.strong,{children:"refresh_every:"})," nb (int) (the display will be refreshed every nb steps of the simulation)."]}),"\n",(0,a.jsx)(i.p,{children:"Each display can include different layers (like in a GIS):"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:["Agents lists : ",(0,a.jsx)(i.strong,{children:"agents"})," layer_name value: agents_list aspect: my_aspect;"]}),"\n",(0,a.jsxs)(i.li,{children:["Agents species : ",(0,a.jsx)(i.strong,{children:"species"}),"  my_species aspect: my_aspect"]}),"\n",(0,a.jsxs)(i.li,{children:["Images: ",(0,a.jsx)(i.strong,{children:"image"})," layer_name file: image_file;"]}),"\n",(0,a.jsx)(i.li,{children:"Charts : see later."}),"\n"]}),"\n",(0,a.jsxs)(i.p,{children:["Note that it is possible to define a ",(0,a.jsx)(i.a,{href:"Defining3DDisplays",children:"opengl display"})," (for 3D display or just to optimize the display) by using the facet ",(0,a.jsx)(i.code,{children:"type: opengl"}),"."]}),"\n",(0,a.jsxs)(i.p,{children:["In our model, we add to the existing display ",(0,a.jsx)(i.em,{children:"my_display"})," a layer for the people species with the circle aspect."]}),"\n",(0,a.jsx)(i.h4,{id:"run-simulation",children:"Run simulation"}),"\n",(0,a.jsxs)(i.p,{children:["To run the simulation, just click on the button corresponding to the existing experiment (in our case ",(0,a.jsx)(i.em,{children:"my_GUI_xp"}),")\n",(0,a.jsx)(i.img,{alt:"images/graphical_editor/run_sim.gif",src:t(63867).A+"",width:"2785",height:"1542"})]}),"\n",(0,a.jsx)(i.h4,{id:"define-a-chart",children:"Define a chart"}),"\n",(0,a.jsxs)(i.p,{children:["It is possible to define a chart layer in a display. In our model, we add a new display called ",(0,a.jsx)(i.em,{children:"chart"})," in which we define a layer of type chart to display the evolution of the number of infected and susceptible people."]}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{alt:"images/graphical_editor/create_chart.gif",src:t(5749).A+"",width:"2785",height:"1580"})}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{alt:"images/graphical_editor/sim_with_chart.gif",src:t(36825).A+"",width:"2785",height:"1580"})})]})}function h(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,a.jsx)(i,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},76874:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/define_display-7ad71eb2f6604a42f513e9d2a121c137.gif"},86190:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/init_sim-a5e0ee5e40fa62d88c85a26c385c7b69.gif"},87434:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/create_people-38b5856a7324536ec879e83f6fc40000.gif"}}]);