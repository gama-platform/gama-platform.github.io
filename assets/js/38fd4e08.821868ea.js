"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[24306],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=r.createContext({}),p=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(d.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),h=p(n),f=a,m=h["".concat(d,".").concat(f)]||h[f]||c[f]||o;return n?r.createElement(m,i(i({ref:t},s),{},{components:n})):r.createElement(m,i({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=h;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},29822:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>d,default:()=>f,frontMatter:()=>l,metadata:()=>p,toc:()=>c});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),i=["components"],l={title:"4. Weight for Road Network"},d=void 0,p={unversionedId:"RoadTrafficModel_step4",id:"version-1.8.1/RoadTrafficModel_step4",title:"4. Weight for Road Network",description:"The present model will introduce how to design a road system, or graph, based on the road GIS data and provide each edge a weight representing the destruction level of the road.",source:"@site/versioned_docs/version-1.8.1/RoadTrafficModel_step4.md",sourceDirName:".",slug:"/RoadTrafficModel_step4",permalink:"/wiki/1.8.1/RoadTrafficModel_step4",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/RoadTrafficModel_step4/_edit",tags:[],version:"1.8.1",frontMatter:{title:"4. Weight for Road Network"},sidebar:"tuto",previous:{title:"3. Movement of People",permalink:"/wiki/1.8.1/RoadTrafficModel_step3"},next:{title:"5. Dynamic weights",permalink:"/wiki/1.8.1/RoadTrafficModel_step5"}},s={},c=[{value:"Formulation",id:"formulation",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"road agent",id:"road-agent",level:3},{value:"weighted road network",id:"weighted-road-network",level:3},{value:"Complete Model",id:"complete-model",level:2}],h={toc:c};function f(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The present model will introduce how to design a road system, or graph, based on the road GIS data and provide each edge a ",(0,o.kt)("inlineCode",{parentName:"p"},"weight")," representing the destruction level of the road."),(0,o.kt)("h2",{id:"formulation"},"Formulation"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Add a ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"destruction_coeff"))," variable to the ",(0,o.kt)("inlineCode",{parentName:"li"},"road")," agent. The value of this variable is higher or equal to 1 or lower or equal to 2. At initialization, the value of this variable is randomly defined between 1 and 2."),(0,o.kt)("li",{parentName:"ul"},"In the road network graph, more a road is worn out (",(0,o.kt)("inlineCode",{parentName:"li"},"destruction_coeff")," high), more a ",(0,o.kt)("inlineCode",{parentName:"li"},"people"),' agent takes time to go all over it. Then the value of the arc representing the road in the graph is equal to "length of the road ',(0,o.kt)("inlineCode",{parentName:"li"},"*")," destruction","_",'coeff".'),(0,o.kt)("li",{parentName:"ul"},"The color of the road depends on the ",(0,o.kt)("inlineCode",{parentName:"li"},"destruction_coeff"),'. If "destruction',"_",'coeff = 1", the road is green, if "destruction',"_",'coeff = 2", the road is red.')),(0,o.kt)("h2",{id:"model-definition"},"Model Definition"),(0,o.kt)("h3",{id:"road-agent"},"road agent"),(0,o.kt)("p",null,"We add a ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"destruction_coeff"))," variable which initial value is randomly defined between 1 and 2 and which have a max of 2. The color of the agent will depend on this variable. In order to simplify the GAML code, we define a new variable  ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"colorValue"))," that represents the value of red color and that will be defined between 0 and 255."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"species road  {\n    float destruction_coeff <- rnd(1.0,2.0) max: 2.0;\n    int colorValue <- int(255*(destruction_coeff - 1)) update: int(255*(destruction_coeff - 1));\n    rgb color <- rgb(min([255, colorValue]),max ([0, 255 - colorValue]),0)  update: rgb(min([255, colorValue]),max ([0, 255 - colorValue]),0) ;\n    ...\n}\n")),(0,o.kt)("h3",{id:"weighted-road-network"},"weighted road network"),(0,o.kt)("p",null,"In GAMA, adding a weight for a graph is very simple, we use the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"with_weights"))," operator with the graph for left-operand and a weight map for the right-operand. The weight map contains the weight of each edge: ","[edge1::weight1, edge2:: weight2,...]",". In this model, the weight will be equal to the length of the road (perimeter of the polyline) ",(0,o.kt)("strong",{parentName:"p"},"its destruction coefficient"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    init {\n        ...\n        create road from: shape_file_roads ;\n        map&lt;road,float> weights_map <- road as_map (each:: (each.destruction_coeff * each.shape.perimeter));\n        the_graph <- as_edge_graph(road) with_weights weights_map;\n        ...\n    }\n")),(0,o.kt)("h2",{id:"complete-model"},"Complete Model"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'model tutorial_gis_city_traffic\n\nglobal {\n    file shape_file_buildings <- file("../includes/building.shp");\n    file shape_file_roads <- file("../includes/road.shp");\n    file shape_file_bounds <- file("../includes/bounds.shp");\n    geometry shape <- envelope(shape_file_bounds);\n    float step <- 10 #mn;\n    date starting_date <- date("2019-09-01-00-00-00");\n    int nb_people <- 100;\n    int min_work_start <- 6;\n    int max_work_start <- 8;\n    int min_work_end <- 16; \n    int max_work_end <- 20; \n    float min_speed <- 1.0 #km / #h;\n    float max_speed <- 5.0 #km / #h; \n    graph the_graph;\n    \n    init {\n    create building from: shape_file_buildings with: [type::string(read ("NATURE"))] {\n        if type="Industrial" {\n        color <- #blue ;\n        }\n    }\n    create road from: shape_file_roads ;\n    map&lt;road,float> weights_map <- road as_map (each:: (each.destruction_coeff * each.shape.perimeter));\n    the_graph <- as_edge_graph(road) with_weights weights_map;\n        \n    list&lt;building> residential_buildings <- building where (each.type="Residential");\n    list&lt;building> industrial_buildings <- building  where (each.type="Industrial") ;\n    create people number: nb_people {\n        speed <- rnd(min_speed, max_speed);\n        start_work <- rnd (min_work_start, max_work_start);\n        end_work <- rnd(min_work_end, max_work_end);\n        living_place <- one_of(residential_buildings) ;\n        working_place <- one_of(industrial_buildings) ;\n        objective <- "resting";\n        location <- any_location_in (living_place); \n    }\n    }\n}\n\n\nspecies building {\n    string type; \n    rgb color <- #gray  ;\n    \n    aspect base {\n    draw shape color: color ;\n    }\n}\n\nspecies road  {\n    float destruction_coeff <- rnd(1.0,2.0) max: 2.0;\n    int colorValue <- int(255*(destruction_coeff - 1)) update: int(255*(destruction_coeff - 1));\n    rgb color <- rgb(min([255, colorValue]),max ([0, 255 - colorValue]),0)  update: rgb(min([255, colorValue]),max ([0, 255 - colorValue]),0) ;\n    \n    aspect base {\n    draw shape color: color ;\n    }\n}\n\nspecies people skills:[moving] {\n    rgb color <- #yellow ;\n    building living_place <- nil ;\n    building working_place <- nil ;\n    int start_work ;\n    int end_work  ;\n    string objective ; \n    point the_target <- nil ;\n        \n    reflex time_to_work when: current_date.hour = start_work and objective = "resting"{\n    objective <- "working" ;\n    the_target <- any_location_in (working_place);\n    }\n        \n    reflex time_to_go_home when: current_date.hour = end_work and objective = "working"{\n    objective <- "resting" ;\n    the_target <- any_location_in (living_place); \n    } \n     \n    reflex move when: the_target != nil {\n    do goto target: the_target on: the_graph ; \n    if the_target = location {\n        the_target <- nil ;\n    }\n    }\n    \n    aspect base {\n    draw circle(10) color: color border: #black;\n    }\n}\n\n\nexperiment road_traffic type: gui {\n    parameter "Shapefile for the buildings:" var: shape_file_buildings category: "GIS" ;\n    parameter "Shapefile for the roads:" var: shape_file_roads category: "GIS" ;\n    parameter "Shapefile for the bounds:" var: shape_file_bounds category: "GIS" ;  \n    parameter "Number of people agents" var: nb_people category: "People" ;\n    parameter "Earliest hour to start work" var: min_work_start category: "People" min: 2 max: 8;\n    parameter "Latest hour to start work" var: max_work_start category: "People" min: 8 max: 12;\n    parameter "Earliest hour to end work" var: min_work_end category: "People" min: 12 max: 16;\n    parameter "Latest hour to end work" var: max_work_end category: "People" min: 16 max: 23;\n    parameter "minimal speed" var: min_speed category: "People" min: 0.1 #km/#h ;\n    parameter "maximal speed" var: max_speed category: "People" max: 10 #km/#h;\n    \n    output {\n    display city_display type: opengl {\n        species building aspect: base ;\n        species road aspect: base ;\n        species people aspect: base ;\n    }\n    }\n}\n')))}f.isMDXComponent=!0}}]);