"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[36803],{97669:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"RoadTrafficModel_step6","title":"6. Charts","description":"This 6th step illustrates how to display charts.","source":"@site/versioned_docs/version-1.8.1/RoadTrafficModel_step6.md","sourceDirName":".","slug":"/RoadTrafficModel_step6","permalink":"/wiki/1.8.1/RoadTrafficModel_step6","draft":false,"unlisted":false,"editUrl":"https://github.com/gama-platform/gama/wiki/RoadTrafficModel_step6/_edit","tags":[],"version":"1.8.1","frontMatter":{"title":"6. Charts"},"sidebar":"tuto","previous":{"title":"5. Dynamic weights","permalink":"/wiki/1.8.1/RoadTrafficModel_step5"},"next":{"title":"7. Automatic Road Repair","permalink":"/wiki/1.8.1/RoadTrafficModel_step7"}}');var a=n(74848),r=n(28453);const i={title:"6. Charts"},s=void 0,l={},d=[{value:"Formulation",id:"formulation",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"chart display",id:"chart-display",level:3},{value:"Complete Model",id:"complete-model",level:2}];function c(e){const t={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"This 6th step illustrates how to display charts."}),"\n",(0,a.jsx)(t.h2,{id:"formulation",children:"Formulation"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["Add a chart to display the evolution of the road destruction: the mean value of the ",(0,a.jsx)(t.code,{children:"destruction_coeff"})," of the ",(0,a.jsx)(t.code,{children:"road"})," agents, and its max value (refreshed every 10 simulation steps)."]}),"\n",(0,a.jsxs)(t.li,{children:["Add a chart to display the activity of the ",(0,a.jsx)(t.code,{children:"people"})," agent (working or staying home, refreshed every 10 simulation steps)."]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"model-definition",children:"Model Definition"}),"\n",(0,a.jsx)(t.h3,{id:"chart-display",children:"chart display"}),"\n",(0,a.jsxs)(t.p,{children:["First, we add a chart of type ",(0,a.jsx)(t.strong,{children:(0,a.jsx)(t.code,{children:"series"})})," to display the road destruction evolution. To compute the mean of the ",(0,a.jsx)(t.code,{children:"destruction_coeff"}),", we combine the ",(0,a.jsx)(t.strong,{children:"mean"})," and ",(0,a.jsx)(t.strong,{children:(0,a.jsx)(t.code,{children:"collect"})})," operators. ",(0,a.jsx)(t.code,{children:"collect"})," takes a container and an expression as operands and will compute a new list, each element being the evaluation on the container operand of the expression. ",(0,a.jsx)(t.code,{children:"mean"})," computes the average of all the elements of a list. For the max, we use the ",(0,a.jsx)(t.strong,{children:(0,a.jsx)(t.code,{children:"max_of"})})," operator. (Note that the operator ",(0,a.jsx)(t.code,{children:"mean_of"})," also exists to replace ",(0,a.jsx)(t.code,{children:"mean"})," and ",(0,a.jsx)(t.code,{children:"collect"}),")."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:'     output {\n         display chart_display refresh:every(10#cycles) {\n             chart "Road Status" type: series size: {1, 0.5} position: {0, 0} {\n                 data "Mean road destruction" value: mean (road collect each.destruction_coeff) style: line color: #green ;\n\t         data "Max road destruction" value: road max_of each.destruction_coeff style: line color: #red ;\n\t     }\n             ...\n         }\n     }\n'})}),"\n",(0,a.jsxs)(t.p,{children:["Second, we add a chart of type ",(0,a.jsx)(t.strong,{children:(0,a.jsx)(t.code,{children:"pie"})})," to display the activity of the ",(0,a.jsx)(t.code,{children:"people"})," agents. We use for that the ",(0,a.jsx)(t.code,{children:"objective"})," variable of the ",(0,a.jsx)(t.code,{children:"people"})," agents and the ",(0,a.jsx)(t.strong,{children:(0,a.jsx)(t.code,{children:"count"})})," operator that allows computing the number of elements of a list that verify a condition."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:'    output {\n      ...\n      display chart_display refresh: every(10#cycles) {\n          ...\n          chart "People Objectif" type: pie style: exploded size: {1, 0.5} position: {0, 0.5}{\n\t       data "Working" value: people count (each.objective="working") color: #magenta ;\n\t       data "Resting" value: people count (each.objective="resting") color: #blue ;\n\t  }\n     }\n   }\n'})}),"\n",(0,a.jsxs)(t.p,{children:["We chose to display the 2 charts on the same display. As a consequence, we specified the ",(0,a.jsx)(t.code,{children:"size"})," and ",(0,a.jsx)(t.code,{children:"position"})," of each of them to define the layout of this display."]}),"\n",(0,a.jsx)(t.h2,{id:"complete-model",children:"Complete Model"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:'model tutorial_gis_city_traffic\n\nglobal {\n    file shape_file_buildings <- file("../includes/building.shp");\n    file shape_file_roads <- file("../includes/road.shp");\n    file shape_file_bounds <- file("../includes/bounds.shp");\n    geometry shape <- envelope(shape_file_bounds);\n    float step <- 10 #mn;\n    date starting_date <- date("2019-09-01-00-00-00");\t\n    int nb_people <- 100;\n    int min_work_start <- 6;\n    int max_work_start <- 8;\n    int min_work_end <- 16; \n    int max_work_end <- 20; \n    float min_speed <- 1.0 #km / #h;\n    float max_speed <- 5.0 #km / #h; \n    float destroy <- 0.02;\n    graph the_graph;\n\t\n    init {\n\tcreate building from: shape_file_buildings with: [type::string(read ("NATURE"))] {\n\t    if type="Industrial" {\n\t\tcolor <- #blue ;\n\t    }\n\t}\n\tcreate road from: shape_file_roads ;\n\tmap<road,float> weights_map <- road as_map (each:: (each.destruction_coeff * each.shape.perimeter));\n\tthe_graph <- as_edge_graph(road) with_weights weights_map;\t\n\t\t\n\tlist<building> residential_buildings <- building where (each.type="Residential");\n\tlist<building> industrial_buildings <- building  where (each.type="Industrial") ;\n\tcreate people number: nb_people {\n\t    speed <- rnd(min_speed, max_speed);\n\t    start_work <- rnd (min_work_start, max_work_start);\n\t    end_work <- rnd(min_work_end, max_work_end);\n\t    living_place <- one_of(residential_buildings) ;\n\t    working_place <- one_of(industrial_buildings) ;\n\t    objective <- "resting";\n\t    location <- any_location_in (living_place); \n\t}\n    }\n\t\n    reflex update_graph{\n\tmap<road,float> weights_map <- road as_map (each:: (each.destruction_coeff * each.shape.perimeter));\n\tthe_graph <- the_graph with_weights weights_map;\n    }\n}\n\nspecies building {\n    string type; \n    rgb color <- #gray ;\n\t\n    aspect base {\n\tdraw shape color: color ;\n    }\n}\n\nspecies road  {\n    float destruction_coeff <- rnd(1.0,2.0) max: 2.0;\n    int colorValue <- int(255*(destruction_coeff - 1)) update: int(255*(destruction_coeff - 1));\n    rgb color <- rgb(min([255, colorValue]),max ([0, 255 - colorValue]),0)  update: rgb(min([255, colorValue]),max ([0, 255 - colorValue]),0) ;\n\t\n    aspect base {\n\tdraw shape color: color ;\n    }\n}\n\nspecies people skills:[moving] {\n    rgb color <- #yellow ;\n    building living_place <- nil ;\n    building working_place <- nil ;\n    int start_work ;\n    int end_work  ;\n    string objective ; \n    point the_target <- nil ;\n\t\t\n    reflex time_to_work when: current_date.hour = start_work and objective = "resting"{\n\tobjective <- "working" ;\n\tthe_target <- any_location_in (working_place);\n    }\n\t\t\n    reflex time_to_go_home when: current_date.hour = end_work and objective = "working"{\n\tobjective <- "resting" ;\n\tthe_target <- any_location_in (living_place); \n    } \n\t \n    reflex move when: the_target != nil {\n\tpath path_followed <- goto(target: the_target, on:the_graph, return_path: true);\n\tlist<geometry> segments <- path_followed.segments;\n\tloop line over: segments {\n\t    float dist <- line.perimeter;\n\t    ask road(path_followed agent_from_geometry line) { \n\t\tdestruction_coeff <- destruction_coeff + (destroy * dist / shape.perimeter);\n\t    }\n\t}\n\tif the_target = location {\n\t    the_target <- nil ;\n\t}\n    }\n\t\n    aspect base {\n\tdraw circle(10) color: color border: #black;\n    }\n}\n\nexperiment road_traffic type: gui {\n    parameter "Shapefile for the buildings:" var: shape_file_buildings category: "GIS" ;\n    parameter "Shapefile for the roads:" var: shape_file_roads category: "GIS" ;\n    parameter "Shapefile for the bounds:" var: shape_file_bounds category: "GIS" ;\n    parameter "Number of people agents" var: nb_people category: "People" ;\n    parameter "Earliest hour to start work" var: min_work_start category: "People" min: 2 max: 8;\n    parameter "Latest hour to start work" var: max_work_start category: "People" min: 8 max: 12;\n    parameter "Earliest hour to end work" var: min_work_end category: "People" min: 12 max: 16;\n    parameter "Latest hour to end work" var: max_work_end category: "People" min: 16 max: 23;\n    parameter "minimal speed" var: min_speed category: "People" min: 0.1 #km/#h ;\n    parameter "maximal speed" var: max_speed category: "People" max: 10 #km/#h;\n    parameter "Value of destruction when a people agent takes a road" var: destroy category: "Road" ;\n\t\n    output {\n\tdisplay city_display type:opengl {\n\t    species building aspect: base ;\n\t    species road aspect: base ;\n\t    species people aspect: base ;\n\t}\n\tdisplay chart_display refresh: every(10#cycles) { \n\t    chart "Road Status" type: series size: {1, 0.5} position: {0, 0} {\n\t\tdata "Mean road destruction" value: mean (road collect each.destruction_coeff) style: line color: #green ;\n\t\tdata "Max road destruction" value: road max_of each.destruction_coeff style: line color: #red ;\n\t    }\n\t    chart "People Objectif" type: pie style: exploded size: {1, 0.5} position: {0, 0.5}{\n\t\tdata "Working" value: people count (each.objective="working") color: #magenta ;\n\t\tdata "Resting" value: people count (each.objective="resting") color: #blue ;\n\t    }\n\t}\n    }\n}\n'})})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>s});var o=n(96540);const a={},r=o.createContext(a);function i(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);