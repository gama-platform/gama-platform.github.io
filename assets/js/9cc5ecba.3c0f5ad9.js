"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[98479],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>v});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),u=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return i.createElement(l.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=u(n),d=r,v=m["".concat(l,".").concat(d)]||m[d]||c[d]||a;return n?i.createElement(v,o(o({ref:t},p),{},{components:n})):i.createElement(v,o({ref:t},p))}));function v(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:r,o[1]=s;for(var u=2;u<a;u++)o[u]=n[u];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},24773:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>v,frontMatter:()=>s,metadata:()=>u,toc:()=>m});var i=n(87462),r=n(63366),a=(n(67294),n(3905)),o=["components"],s={title:"Save and Restore simulations"},l=void 0,u={unversionedId:"Save-and-restore-simulations",id:"version-1.8.1/Save-and-restore-simulations",title:"Save and Restore simulations",description:"[//]: # (startConcept|use_saveSimulation)",source:"@site/versioned_docs/version-1.8.1/Save-and-restore-simulations.md",sourceDirName:".",slug:"/Save-and-restore-simulations",permalink:"/wiki/1.8.1/Save-and-restore-simulations",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/Save-and-restore-simulations/_edit",tags:[],version:"1.8.1",frontMatter:{title:"Save and Restore simulations"},sidebar:"side",previous:{title:"Using Comodel",permalink:"/wiki/1.8.1/Comodel"},next:{title:"Using network",permalink:"/wiki/1.8.1/UsingNetwork"}},p={},m=[{value:"Save a simulation",id:"save-a-simulation",level:2},{value:"Restore a simulation",id:"restore-a-simulation",level:2},{value:"Saved simulation file type: gsim",id:"saved-simulation-file-type-gsim",level:2},{value:"Other serialization operators",id:"other-serialization-operators",level:2}],c={toc:m},d="wrapper";function v(e){var t=e.components,n=(0,r.Z)(e,o);return(0,a.kt)(d,(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Last version of GAMA has introduced new features to save the state of a simulation at a given simulation cycle. This has two main applications:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The possibility to step forward and backward in a simulation,"),(0,a.kt)("li",{parentName:"ul"},"The possibility to save the state of a simulation in a file and to restore a simulation from this file.")),(0,a.kt)("h2",{id:"save-a-simulation"},"Save a simulation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'experiment saveSimu type: gui {\n\n    reflex store when: cycle = 5 {      \n        write "================ START SAVE + self " + " - " + cycle ;       \n        write "Save of simulation : " + saveSimulation(\'saveSimu.gsim\');\n        write "================ END SAVE + self " + " - " + cycle ;         \n    }   \n    \n    output {\n        display main_display {\n            species road aspect: geom;\n            species people aspect: base;                        \n        }\n    }   \n}\n')),(0,a.kt)("h2",{id:"restore-a-simulation"},"Restore a simulation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'experiment reloadSavedSimuOnly type: gui {\n    \n    action _init_ {\n        create simulation from: saved_simulation_file("saveSimu.gsim"); \n    }\n\n    output {\n        display main_display {\n            species road aspect: geom;\n            species people aspect: base;                        \n        }\n    }   \n}\n')),(0,a.kt)("h2",{id:"saved-simulation-file-type-gsim"},"Saved simulation file type: gsim"),(0,a.kt)("h2",{id:"other-serialization-operators"},"Other serialization operators"))}v.isMDXComponent=!0}}]);