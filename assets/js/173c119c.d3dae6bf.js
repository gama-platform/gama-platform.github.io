"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[39539],{4708:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>d,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"ManipulateBasicSpecies","title":"Manipulate basic species","description":"In this chapter, we will learn how to manipulate some basic species. As you already know, a species can be seen as the definition of a type of agent (we call agent the instance of a species). In OOP (Object-Oriented Programming), a species can be seen as the class. Each species is then defined by some attributes (\\"member\\" in OOP), actions (\\"method\\" in OOP) and behavior (\\"method\\" in OOP).","source":"@site/versioned_docs/version-1.8.1/ManipulateBasicSpecies.md","sourceDirName":".","slug":"/ManipulateBasicSpecies","permalink":"/wiki/1.8.1/ManipulateBasicSpecies","draft":false,"unlisted":false,"editUrl":"https://github.com/gama-platform/gama/wiki/ManipulateBasicSpecies/_edit","tags":[],"version":"1.8.1","frontMatter":{"title":"Manipulate basic species"},"sidebar":"main","previous":{"title":"Basic programming concepts in GAML","permalink":"/wiki/1.8.1/BasicProgrammingConceptsInGAML"},"next":{"title":"The global species","permalink":"/wiki/1.8.1/GlobalSpecies"}}');var i=s(74848),a=s(28453);const c={title:"Manipulate basic species"},o=void 0,r={},l=[];function h(e){const n={a:"a",code:"code",p:"p",strong:"strong",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["In this chapter, we will learn how to manipulate some basic species. As you already know, a species can be seen as the definition of a type of ",(0,i.jsx)(n.strong,{children:"agent"})," (we call agent the instance of a species). In OOP (Object-Oriented Programming), a ",(0,i.jsx)(n.strong,{children:"species"})," can be seen as the class. Each species is then defined by some ",(0,i.jsx)(n.strong,{children:"attributes"}),' ("member" in OOP), ',(0,i.jsx)(n.strong,{children:"actions"}),' ("method" in OOP) and ',(0,i.jsx)(n.strong,{children:"behavior"}),' ("method" in OOP).']}),"\n",(0,i.jsxs)(n.p,{children:["In this section, we will first learn how to declare the ",(0,i.jsx)(n.strong,{children:"world agent"}),", using the ",(0,i.jsx)(n.a,{href:"GlobalSpecies",children:(0,i.jsx)(n.strong,{children:"global species"})}),". We will then learn how to declare ",(0,i.jsx)(n.a,{href:"RegularSpecies",children:(0,i.jsx)(n.strong,{children:"regular species"})})," which will populate our world. The following lesson will be dedicated to learn how to ",(0,i.jsx)(n.a,{href:"DefiningActionsAndBehaviors",children:(0,i.jsx)(n.strong,{children:"define actions and behaviors"})})," for all those species. We will then learn how ",(0,i.jsx)(n.a,{href:"InteractionBetweenAgents",children:(0,i.jsx)(n.strong,{children:"agents can interact between each other"})}),", especially with the statement ",(0,i.jsx)(n.code,{children:"ask"}),". In the next chapter then, we will see how to ",(0,i.jsx)(n.a,{href:"AttachingSkills",children:(0,i.jsx)(n.strong,{children:"attach skills"})})," to our species, giving them new attributes and actions. This section will be closed with a last lesson dealing with how ",(0,i.jsx)(n.a,{href:"Inheritance",children:(0,i.jsx)(n.strong,{children:"inheritance"})})," works in GAML."]})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>o});var t=s(96540);const i={},a=t.createContext(i);function c(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);