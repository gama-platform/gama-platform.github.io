"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[78342],{36464:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>a});var t=n(74848),s=n(28453);const l={title:"1. Basic Model"},r=void 0,o={id:"PredatorPrey_step1",title:"1. Basic Model",description:"Content",source:"@site/../docs/PredatorPrey_step1.md",sourceDirName:".",slug:"/PredatorPrey_step1",permalink:"/wiki/next/PredatorPrey_step1",draft:!1,unlisted:!1,editUrl:"https://github.com/gama-platform/gama/wiki/PredatorPrey_step1/_edit",tags:[],version:"current",frontMatter:{title:"1. Basic Model"},sidebar:"tuto",previous:{title:"Predator Prey",permalink:"/wiki/next/PredatorPrey"},next:{title:"2. Vegetation Dynamic",permalink:"/wiki/next/PredatorPrey_step2"}},d={},a=[{value:"Content",id:"content",level:2},{value:"Formulation",id:"formulation",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"Model structure",id:"model-structure",level:3},{value:"Species",id:"species",level:3},{value:"Internal state",id:"internal-state",level:4},{value:"Behavior",id:"behavior",level:4},{value:"Display",id:"display",level:4},{value:"Prey species code",id:"prey-species-code",level:4},{value:"global section",id:"global-section",level:3},{value:"global attributes",id:"global-attributes",level:4},{value:"Model initialization",id:"model-initialization",level:4},{value:"experiment",id:"experiment",level:3},{value:"input",id:"input",level:4},{value:"output",id:"output",level:4},{value:"Complete Model",id:"complete-model",level:2}];function c(e){const i={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h2,{id:"content",children:"Content"}),"\n",(0,t.jsx)(i.p,{children:"This first step Illustrates how to write a model in GAMA. In particular, it describes how to structure a model and how to define species - that are the key components of GAMA models."}),"\n",(0,t.jsx)(i.h2,{id:"formulation",children:"Formulation"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Definition of the ",(0,t.jsx)(i.strong,{children:(0,t.jsx)(i.code,{children:"prey"})})," species"]}),"\n",(0,t.jsxs)(i.li,{children:["Definition of a ",(0,t.jsx)(i.strong,{children:(0,t.jsx)(i.code,{children:"nb_preys_init"})})," parameter"]}),"\n",(0,t.jsxs)(i.li,{children:["Creation of ",(0,t.jsx)(i.code,{children:"nb_preys_init"})," ",(0,t.jsx)(i.code,{children:"prey"})," agents randomly located in the environment (size: 100x100)"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"model-definition",children:"Model Definition"}),"\n",(0,t.jsx)(i.h3,{id:"model-structure",children:"Model structure"}),"\n",(0,t.jsx)(i.p,{children:"A GAMA model is composed of three types of sections:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:(0,t.jsx)(i.code,{children:"global"})}),': this section, that is unique, defines the "world" agent, a special agent of a GAMA model. It represents all that is global to the model: dynamics, variables, actions. In addition, it allows to initialize the simulation (',(0,t.jsx)(i.code,{children:"init"})," block)."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:(0,t.jsx)(i.code,{children:"species"})})," and ",(0,t.jsx)(i.strong,{children:(0,t.jsx)(i.code,{children:"grid"})}),': these sections define the species of agents composing the model. Grid is defined in the following model step "vegetation dynamic";']}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:(0,t.jsx)(i.code,{children:"experiment"})}),": these sections define the execution context of the simulations. In particular, it defines the input (parameters) and output (displays, files...) of a model."]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["More details about the different sections of a GAMA model can be found ",(0,t.jsx)(i.a,{href:"ModelOrganization",children:"here"}),"."]}),"\n",(0,t.jsx)(i.h3,{id:"species",children:"Species"}),"\n",(0,t.jsxs)(i.p,{children:["A ",(0,t.jsx)(i.a,{href:"RegularSpecies",children:"species"}),' represents a "prototype" of agents: it defines their common properties.']}),"\n",(0,t.jsx)(i.p,{children:"A species definition requires the definition of three different elements:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"the internal state of its agents (attributes)"}),"\n",(0,t.jsx)(i.li,{children:"their behavior"}),"\n",(0,t.jsx)(i.li,{children:"how they are displayed (aspects)"}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"internal-state",children:"Internal state"}),"\n",(0,t.jsxs)(i.p,{children:["An ",(0,t.jsx)(i.a,{href:"RegularSpecies#declaration",children:"attribute"})," is defined as follows: the type of the attribute and name. Numerous types of attributes are available: ",(0,t.jsx)(i.code,{children:"int"})," (integer), ",(0,t.jsx)(i.code,{children:"float"})," (floating-point number), ",(0,t.jsx)(i.code,{children:"string"}),", ",(0,t.jsx)(i.code,{children:"bool"})," (boolean, ",(0,t.jsx)(i.code,{children:"true"})," or ",(0,t.jsx)(i.code,{children:"false"}),"), ",(0,t.jsx)(i.code,{children:"point"})," (coordinates), ",(0,t.jsx)(i.code,{children:"list"}),", ",(0,t.jsx)(i.code,{children:"pair"}),", ",(0,t.jsx)(i.code,{children:"map"}),", ",(0,t.jsx)(i.code,{children:"file"}),", ",(0,t.jsx)(i.code,{children:"matrix"}),", species of agents, ",(0,t.jsx)(i.code,{children:"rgb"})," (color), ",(0,t.jsx)(i.code,{children:"graph"}),", ",(0,t.jsx)(i.code,{children:"path"}),"..."]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Optional facets: ",(0,t.jsx)(i.code,{children:"<-"})," (initial value), ",(0,t.jsx)(i.code,{children:"update"})," (value recomputed at each step of the simulation), ",(0,t.jsx)(i.code,{children:"function:{..}"})," (value computed each time the variable is used), ",(0,t.jsx)(i.code,{children:"min"}),", ",(0,t.jsx)(i.code,{children:"max"})]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:'In addition to the attributes the modeler explicitly defines, species "inherits" other attributes called "built-in" variables:'}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["A name (",(0,t.jsx)(i.code,{children:"name"}),"): the identifier of the species."]}),"\n",(0,t.jsxs)(i.li,{children:["A shape (",(0,t.jsx)(i.code,{children:"shape"}),"): the default shape of the agents to be constructed after the species. It can be ",(0,t.jsx)(i.em,{children:"a point, a polygon, etc."}),"."]}),"\n",(0,t.jsxs)(i.li,{children:["A location (",(0,t.jsx)(i.code,{children:"location"}),"): the centroid of its shape."]}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"behavior",children:"Behavior"}),"\n",(0,t.jsxs)(i.p,{children:["In this first model, we define one species of agents: the ",(0,t.jsx)(i.strong,{children:(0,t.jsx)(i.code,{children:"prey"})})," species. For the moment, the agents of this species will not have any particular behavior, they will just exist and be displayed."]}),"\n",(0,t.jsx)(i.h4,{id:"display",children:"Display"}),"\n",(0,t.jsxs)(i.p,{children:["An agent ",(0,t.jsx)(i.a,{href:"RegularSpecies#the-aspect-statement",children:"aspects"})," have to be defined. An aspect is a way to display the agents of a species: ",(0,t.jsx)(i.code,{children:"aspect aspect_name {...}"}),".\nIn the block of an aspect, it is possible to draw:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"A geometry: for instance, the shape of the agent (but it may be a different one, for instance, a disk instead of a complex polygon)"}),"\n",(0,t.jsx)(i.li,{children:"An image: to draw icons"}),"\n",(0,t.jsx)(i.li,{children:"A text: to draw a text"}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"In order to display our prey agents we define two attributes:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"size"})," of type float, with for initial value:1.0"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"color"})," of type ",(0,t.jsx)(i.code,{children:"rgb"}),", with for initial value: ",(0,t.jsx)(i.code,{children:"#blue"}),". It is possible to get a color value by using the symbol ",(0,t.jsx)(i.em,{children:"#"})," + color name: e.g. ",(0,t.jsx)(i.code,{children:"#blue"}),", ",(0,t.jsx)(i.code,{children:"#red"}),", ",(0,t.jsx)(i.code,{children:"#white"}),", ",(0,t.jsx)(i.code,{children:"#yellow"}),", ",(0,t.jsx)(i.code,{children:"#magenta"}),", ",(0,t.jsx)(i.code,{children:"#pink"}),"..."]}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"prey-species-code",children:"Prey species code"}),"\n",(0,t.jsxs)(i.p,{children:["For the moment, we only define an aspect for this species. We want to display for each prey agent a circle of radius ",(0,t.jsx)(i.code,{children:"size"})," and color ",(0,t.jsx)(i.code,{children:"color"}),". We then use the statement ",(0,t.jsx)(i.strong,{children:(0,t.jsx)(i.code,{children:"draw"})})," with a circle shape."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:"species prey {\n    float size <- 1.0 ;\n    rgb color <- #blue;\n\t\t\n    aspect base {\n\tdraw circle(size) color: color ;\n    }\n} \n"})}),"\n",(0,t.jsx)(i.h3,{id:"global-section",children:"global section"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"global"})," section represents a specific agent, called ",(0,t.jsx)(i.code,{children:"world"}),". Defining this agent follows the same principle as any agent and is, thus, defined after a species.\nThe world agent represents everything that is global to the model: dynamics, variables...\nIt allows to initialize simulations (",(0,t.jsx)(i.code,{children:"init"})," block): the world is always created and initialized first when a simulation is launched (before any other agents). The geometry (",(0,t.jsx)(i.code,{children:"shape"}),") of the ",(0,t.jsx)(i.code,{children:"world"})," agent is by default a square with 100m for side size, but can be redefined if necessary (see the ",(0,t.jsx)(i.a,{href:"RoadTrafficModel",children:"Road traffic tutorial"}),")."]}),"\n",(0,t.jsx)(i.h4,{id:"global-attributes",children:"global attributes"}),"\n",(0,t.jsxs)(i.p,{children:["In the current model, we will only have a certain number of preys thus we need to hold this number in a global or world's variable of type integer (",(0,t.jsx)(i.code,{children:"int"}),") which can be done as follows:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:"global {\n    int nb_preys_init <- 200;\n}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"model-initialization",children:"Model initialization"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"init"})," section of the global block allows initializing the model which is executing certain commands, here we will create ",(0,t.jsx)(i.code,{children:"nb_preys_init"})," number of prey agents. We use the statement ",(0,t.jsx)(i.code,{children:"create"}),"  to create agents of a specific species: ",(0,t.jsx)(i.code,{children:"create species_name +"})," :"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"number"}),": number of agents to create (int, 1 by default)"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"from"}),": GIS file to use to create the agents (optional, string or file)"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"returns"}),": list of created agents (list)"]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["Definition of the init block in order to create ",(0,t.jsx)(i.code,{children:"nb_preys_init"})," prey agents:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:"init {\n    create prey number: nb_preys_init ;\n}\n"})}),"\n",(0,t.jsx)(i.h3,{id:"experiment",children:"experiment"}),"\n",(0,t.jsxs)(i.p,{children:["An ",(0,t.jsx)(i.code,{children:"experiment"})," block defines how a model can be simulated (executed). Several experiments can be defined for a given model. They are defined using : ",(0,t.jsx)(i.code,{children:"experiment exp_name type: gui/batch { [input] [output]}"})]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"gui"}),": experiment with a graphical interface, which displays its input parameters and outputs."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"batch"}),": Allows to set up a series of simulations (w/o graphical interface)."]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["In our model, we define a gui experiment called ",(0,t.jsx)(i.code,{children:"prey_predator"})," :"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:"experiment prey_predator type: gui {\n}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"input",children:"input"}),"\n",(0,t.jsx)(i.p,{children:"Experiments can define (input) parameters. A parameter definition allows to make the value of a global variable definable by the user through the graphic interface."}),"\n",(0,t.jsx)(i.p,{children:"A parameter is defined as follows:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:"parameter title var: global_var category: cat;\n"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"title"}),": string to display"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"var"}),": reference to a global variable (defined in the global section)"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"category"}),": string used to \xabstore\xbb the operators on the UI - optional"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"<-"}),": init value - optional"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"min"}),": min value - optional"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"max"}),": min value - optional"]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Note that the init, min and max values can be defined in the global variable definition."}),"\n",(0,t.jsxs)(i.p,{children:["In the experiment, the definition of a parameter from the global variable ",(0,t.jsx)(i.code,{children:"nb_preys_init"}),":"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:'experiment prey_predator type: gui {\n    parameter "Initial number of preys: " var: nb_preys_init min: 1 max: 1000 category: "Prey" ;\n}\n'})}),"\n",(0,t.jsx)(i.h4,{id:"output",children:"output"}),"\n",(0,t.jsxs)(i.p,{children:["Output blocks are defined in an experiment and define how to visualize a simulation (with one or more display blocks that define separate windows). Each display can be refreshed independently by defining the facet ",(0,t.jsx)(i.code,{children:"refresh"})," nb (int) (the display will be refreshed every nb steps of the simulation)."]}),"\n",(0,t.jsx)(i.p,{children:"Each display can include different layers (like in a GIS):"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Agents species: ",(0,t.jsx)(i.code,{children:"species my_species aspect: my_aspect;"})]}),"\n",(0,t.jsxs)(i.li,{children:["Agents lists: ",(0,t.jsx)(i.code,{children:"agents layer_name value: agents_list aspect: my_aspect;"})]}),"\n",(0,t.jsxs)(i.li,{children:["Images: ",(0,t.jsx)(i.code,{children:"image image_file;"})]}),"\n",(0,t.jsx)(i.li,{children:"Charts: see later."}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["Note that it is possible to define a ",(0,t.jsx)(i.a,{href:"Defining3DDisplays",children:"opengl display"})," (for 3D display) by using the facet ",(0,t.jsx)(i.code,{children:"type: opengl"}),"."]}),"\n",(0,t.jsxs)(i.p,{children:["In our model, we define a display to draw the ",(0,t.jsx)(i.code,{children:"prey"})," agents."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:"output {\n    display main_display {\n        species prey aspect: base ;\n    }\n}\n"})}),"\n",(0,t.jsx)(i.h2,{id:"complete-model",children:"Complete Model"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-gaml",metastring:"reference",children:"https://github.com/gama-platform/gama.old/blob/GAMA_1.9.2/msi.gama.models/models/Tutorials/Predator%20Prey/models/Model%2001.gaml\n"})})]})}function h(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,i,n)=>{n.d(i,{R:()=>r,x:()=>o});var t=n(96540);const s={},l=t.createContext(s);function r(e){const i=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(l.Provider,{value:i},e.children)}}}]);