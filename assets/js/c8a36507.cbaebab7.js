"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[58654],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var o=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var d=o.createContext({}),p=function(e){var t=o.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return o.createElement(d.Provider,{value:t},e.children)},s="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,d=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),s=p(r),h=n,m=s["".concat(d,".").concat(h)]||s[h]||f[h]||a;return r?o.createElement(m,i(i({ref:t},c),{},{components:r})):o.createElement(m,i({ref:t},c))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=h;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[s]="string"==typeof e?e:n,i[1]=l;for(var p=2;p<a;p++)i[p]=r[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}h.displayName="MDXCreateElement"},28777:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>m,frontMatter:()=>l,metadata:()=>p,toc:()=>s});var o=r(87462),n=r(63366),a=(r(67294),r(3905)),i=["components"],l={title:"4. Weight for Road Network"},d=void 0,p={unversionedId:"RoadTrafficModel_step4",id:"RoadTrafficModel_step4",title:"4. Weight for Road Network",description:"The present model will introduce how to design a road system, or graph, based on the road GIS data and provide each edge a weight representing the destruction level of the road.",source:"@site/../docs/RoadTrafficModel_step4.md",sourceDirName:".",slug:"/RoadTrafficModel_step4",permalink:"/wiki/next/RoadTrafficModel_step4",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/RoadTrafficModel_step4/_edit",tags:[],version:"current",frontMatter:{title:"4. Weight for Road Network"},sidebar:"tuto",previous:{title:"3. Movement of People",permalink:"/wiki/next/RoadTrafficModel_step3"},next:{title:"5. Dynamic weights",permalink:"/wiki/next/RoadTrafficModel_step5"}},c={},s=[{value:"Formulation",id:"formulation",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"road agent",id:"road-agent",level:3},{value:"weighted road network",id:"weighted-road-network",level:3},{value:"Complete Model",id:"complete-model",level:2}],f={toc:s},h="wrapper";function m(e){var t=e.components,r=(0,n.Z)(e,i);return(0,a.kt)(h,(0,o.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The present model will introduce how to design a road system, or graph, based on the road GIS data and provide each edge a ",(0,a.kt)("inlineCode",{parentName:"p"},"weight")," representing the destruction level of the road."),(0,a.kt)("h2",{id:"formulation"},"Formulation"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Add a ",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"destruction_coeff"))," variable to the ",(0,a.kt)("inlineCode",{parentName:"li"},"road")," agent. The value of this variable is higher or equal to 1 or lower or equal to 2. At initialization, the value of this variable is randomly defined between 1 and 2."),(0,a.kt)("li",{parentName:"ul"},"In the road network graph, more a road is worn out (",(0,a.kt)("inlineCode",{parentName:"li"},"destruction_coeff")," high), more a ",(0,a.kt)("inlineCode",{parentName:"li"},"people"),' agent takes time to go all over it. Then the value of the arc representing the road in the graph is equal to "length of the road ',(0,a.kt)("inlineCode",{parentName:"li"},"*")," destruction","_",'coeff".'),(0,a.kt)("li",{parentName:"ul"},"The color of the road depends on the ",(0,a.kt)("inlineCode",{parentName:"li"},"destruction_coeff"),'. If "destruction',"_",'coeff = 1", the road is green, if "destruction',"_",'coeff = 2", the road is red.')),(0,a.kt)("h2",{id:"model-definition"},"Model Definition"),(0,a.kt)("h3",{id:"road-agent"},"road agent"),(0,a.kt)("p",null,"We add a ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"destruction_coeff"))," variable which initial value is randomly defined between 1 and 2 and which have a max of 2. The color of the agent will depend on this variable. In order to simplify the GAML code, we define a new variable  ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"colorValue"))," that represents the value of red color and that will be defined between 0 and 255."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"species road  {\n    float destruction_coeff <- rnd(1.0,2.0) max: 2.0;\n    int colorValue <- int(255*(destruction_coeff - 1)) update: int(255*(destruction_coeff - 1));\n    rgb color <- rgb(min([255, colorValue]),max ([0, 255 - colorValue]),0)  update: rgb(min([255, colorValue]),max ([0, 255 - colorValue]),0) ;\n    ...\n}\n")),(0,a.kt)("h3",{id:"weighted-road-network"},"weighted road network"),(0,a.kt)("p",null,"In GAMA, adding a weight for a graph is very simple, we use the ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"with_weights"))," operator with the graph for left-operand and a weight map for the right-operand. The weight map contains the weight of each edge: ","[edge1::weight1, edge2:: weight2,...]",". In this model, the weight will be equal to the length of the road (perimeter of the polyline) ",(0,a.kt)("strong",{parentName:"p"},"its destruction coefficient"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    init {\n        ...\n        create road from: shape_file_roads ;\n        map<road,float> weights_map <- road as_map (each:: (each.destruction_coeff * each.shape.perimeter));\n        the_graph <- as_edge_graph(road) with_weights weights_map;\n        ...\n    }\n")),(0,a.kt)("h2",{id:"complete-model"},"Complete Model"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-gaml",metastring:"reference",reference:!0},"https://github.com/gama-platform/gama/blob/GAMA_1.9.2/msi.gama.models/models/Tutorials/Road%20Traffic/models/Model%2004.gaml\n")))}m.isMDXComponent=!0}}]);