"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[51719],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),p=c(n),d=a,f=p["".concat(l,".").concat(d)]||p[d]||u[d]||s;return n?r.createElement(f,o(o({ref:t},m),{},{components:n})):r.createElement(f,o({ref:t},m))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:a,o[1]=i;for(var c=2;c<s;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},55113:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>f,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var r=n(87462),a=n(63366),s=(n(67294),n(3905)),o=["components"],i={title:"Statements"},l=void 0,c={unversionedId:"Statements",id:"Statements",title:"Statements",description:"----",source:"@site/../docs/Statements.md",sourceDirName:".",slug:"/Statements",permalink:"/wiki/next/Statements",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/Statements/_edit",tags:[],version:"current",frontMatter:{title:"Statements"},sidebar:"side",previous:{title:"Built-in Architectures",permalink:"/wiki/next/BuiltInArchitectures"},next:{title:"Types",permalink:"/wiki/next/DataTypes"}},m={},p=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Statements by kinds",id:"statements-by-kinds",level:2},{value:"Statements by embedment",id:"statements-by-embedment",level:2},{value:"General syntax",id:"general-syntax",level:2}],u={toc:p},d="wrapper";function f(e){var t=e.components,n=(0,a.Z)(e,o);return(0,s.kt)(d,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("hr",null),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"This file is automatically generated from java files. Do Not Edit It.")),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"table-of-contents"},"Table of Contents"),(0,s.kt)("h2",{id:"statements-by-kinds"},"Statements by kinds"),(0,s.kt)("h2",{id:"statements-by-embedment"},"Statements by embedment"),(0,s.kt)("h2",{id:"general-syntax"},"General syntax"),(0,s.kt)("p",null,"A statement represents either a declaration or an imperative command. It consists in a keyword, followed by specific facets, some of them mandatory (in bold), some of them optional. One of the facet names can be omitted (the one denoted as omissible). It has to be the first one."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"statement_keyword expression1 facet2: expression2 ... ;\nor\nstatement_keyword facet1: expression1 facet2: expression2 ...;\n")),(0,s.kt)("p",null,"If the statement encloses other statements, it is called a ",(0,s.kt)("strong",{parentName:"p"},"sequence statement"),", and its sub-statements (either sequence statements or single statements) are declared between curly brackets, as in:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"statement_keyword1 expression1 facet2: expression2... { // a sequence statement\n     statement_keyword2 expression1 facet2: expression2...;  // a single statement\n     statement_keyword3 expression1 facet2: expression2...;\n}\n")))}f.isMDXComponent=!0}}]);