"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[92040],{90036:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var o=r(17624),t=r(4552);const i={title:"8. Complex Behavior"},s=void 0,a={id:"PredatorPrey_step8",title:"8. Complex Behavior",description:"This eighth step illustrates how to define more complex actions, how to use conditional statements and iterator operators over containers.",source:"@site/versioned_docs/version-1.8.1/PredatorPrey_step8.md",sourceDirName:".",slug:"/PredatorPrey_step8",permalink:"/wiki/1.8.1/PredatorPrey_step8",draft:!1,unlisted:!1,editUrl:"https://github.com/gama-platform/gama/wiki/PredatorPrey_step8/_edit",tags:[],version:"1.8.1",frontMatter:{title:"8. Complex Behavior"},sidebar:"tuto",previous:{title:"7. Agent Aspect",permalink:"/wiki/1.8.1/PredatorPrey_step7"},next:{title:"9. Stopping condition",permalink:"/wiki/1.8.1/PredatorPrey_step9"}},l={},c=[{value:"Formulation",id:"formulation",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"parent species",id:"parent-species",level:3},{value:"prey species",id:"prey-species",level:3},{value:"predator species",id:"predator-species",level:3},{value:"Complete Model",id:"complete-model",level:2}];function d(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.M)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"This eighth step illustrates how to define more complex actions, how to use conditional statements and iterator operators over containers."}),"\n",(0,o.jsx)(n.h2,{id:"formulation",children:"Formulation"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Definition of more complex behaviors for prey and predator agents:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"The preys agents are moving to the cell containing the highest quantity of food."}),"\n",(0,o.jsx)(n.li,{children:"The predator agents are moving if possible to a cell that contains preys, otherwise to random cell."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"model-definition",children:"Model Definition"}),"\n",(0,o.jsx)(n.h3,{id:"parent-species",children:"parent species"}),"\n",(0,o.jsxs)(n.p,{children:["We modify the ",(0,o.jsx)(n.code,{children:"basic_move"})," reflex of the ",(0,o.jsx)(n.code,{children:"generic_species"})," in order to give the ",(0,o.jsx)(n.code,{children:"prey"})," and ",(0,o.jsx)(n.code,{children:"predator"})," a more complex behaviors: instead of choosing a random vegetation cell in the neighborhood, the agents will choose a vegetation cell (still in the neighborhood) thanks to a ",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"choose_cell"})})," action. This action will return an empty (",(0,o.jsx)(n.code,{children:"nil"}),") value in the parent species and will be specialized for each species."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"species generic_species {\n    ...\n    reflex basic_move {\n\tmy_cell <- choose_cell();\n\tlocation <- my_cell.location; \n    } \n\t\n    vegetation_cell choose_cell {\n\treturn nil;\n    }\n    ...\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"prey-species",children:"prey species"}),"\n",(0,o.jsxs)(n.p,{children:["We specialize the ",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"choose_cell"})})," action for the ",(0,o.jsx)(n.code,{children:"prey"})," species: the agent will choose the vegetation cell of the neighborhood (list ",(0,o.jsx)(n.code,{children:"my_cell.neighbors2"}),") that maximizes the quantity of food."]}),"\n",(0,o.jsx)(n.p,{children:"Note that GAMA offers numerous operators to manipulate lists and containers:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Unary operators: ",(0,o.jsx)(n.code,{children:"min"}),", ",(0,o.jsx)(n.code,{children:"max"}),", ",(0,o.jsx)(n.code,{children:"sum"}),"..."]}),"\n",(0,o.jsxs)(n.li,{children:["Binary operators:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"where"}),": returns a sub-list where all the elements verify the condition defined in the right operand."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"first_with"}),": returns the first element of the list that verifies the condition defined in the right operand."]}),"\n",(0,o.jsx)(n.li,{children:"..."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["In the case of binary operators, each element (of the first operand list) can be accessed with the pseudo-variable ",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"each"})}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Thus the ",(0,o.jsx)(n.code,{children:"choose_cell"})," action of the ",(0,o.jsx)(n.code,{children:"prey"})," species is defined by:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"species prey parent: generic_species {\n    ...  \n    vegetation_cell choose_cell {\n        return (my_cell.neighbors2) with_max_of (each.food);\n    }\n    ...\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"predator-species",children:"predator species"}),"\n",(0,o.jsxs)(n.p,{children:["We specialize the ",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"choose_cell"})})," species for the ",(0,o.jsx)(n.code,{children:"predator"})," species: the agent will choose, if possible, a vegetation cell of the neighborhood (list ",(0,o.jsx)(n.code,{children:"my_cell.neighbors2"}),") that contains at least a ",(0,o.jsx)(n.code,{children:"prey"})," agent; otherwise it will choose a random cell."]}),"\n",(0,o.jsxs)(n.p,{children:["We use for this action the ",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"first_with"})})," operator on the list of neighbor vegetation cells (",(0,o.jsx)(n.code,{children:"my_cell.neighbors2"}),") with the following condition: the list of ",(0,o.jsx)(n.code,{children:"prey"})," agents contained in the cell is not empty. Note that we use the ",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"shuffle"})})," operator to randomize the order of the list of the neighbor cells."]}),"\n",(0,o.jsxs)(n.p,{children:["If all the neighbor cells are empty, then the agent chooses a random cell in the neighborhood (",(0,o.jsx)(n.code,{children:"one_of (my_cell.neighbors2)"}),")."]}),"\n",(0,o.jsx)(n.p,{children:"GAMA contains statements that allow executing blocks depending on some conditions:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"if condition1 {...} \nelse if condition2{...} \n... \nelse {...} \n"})}),"\n",(0,o.jsx)(n.p,{children:"This statement means that if condition1 = true then the first block is executed; otherwise, if condition2 = true, then it is the second block, etc. When no conditions are satisfied and an else block is defined (it is optional), this latter is executed."}),"\n",(0,o.jsxs)(n.p,{children:["We then write the ",(0,o.jsx)(n.code,{children:"choose_cell"})," action as follows:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"species predator parent: generic_species {\n    ...\n    vegetation_cell choose_cell {\n        vegetation_cell my_cell_tmp <- shuffle(my_cell.neighbors2) first_with (!(empty (prey inside (each))));\n\tif my_ell_tmp != nil {\n\t    return my_cell_tmp;\n\t} else {\n\t    return one_of (my_cell.neighbors2);\n\t} \n    }\n    ...\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Note there is ternary operator allowing to directly use a conditioned structure to evaluate a variable:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"condition ? value1 : value2\n"})}),"\n",(0,o.jsx)(n.p,{children:"if condition is true, then returns value1; otherwise, returns value2."}),"\n",(0,o.jsx)(n.h2,{id:"complete-model",children:"Complete Model"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'model prey_predator\n\nglobal {\n    int nb_preys_init <- 200;\n    int nb_predators_init <- 20;\n    float prey_max_energy <- 1.0;\n    float prey_max_transfert <- 0.1;\n    float prey_energy_consum <- 0.05;\n    float predator_max_energy <- 1.0;\n    float predator_energy_transfert <- 0.5;\n    float predator_energy_consum <- 0.02;\n    float prey_proba_reproduce <- 0.01;\n    int prey_nb_max_offsprings <- 5;\n    float prey_energy_reproduce <- 0.5;\n    float predator_proba_reproduce <- 0.01;\n    int predator_nb_max_offsprings <- 3;\n    float predator_energy_reproduce <- 0.5;\n    int nb_preys -> {length(prey)};\n    int nb_predators -> {length(predator)};\n\n    init {\n        create prey number: nb_preys_init;\n        create predator number: nb_predators_init;\n    }\n}\n\nspecies generic_species {\n    float size <- 1.0;\n    rgb color;\n    float max_energy;\n    float max_transfert;\n    float energy_consum;\n    float proba_reproduce;\n    int nb_max_offsprings;\n    float energy_reproduce;\n    image_file my_icon;\n    vegetation_cell my_cell <- one_of(vegetation_cell);\n    float energy <- rnd(max_energy) update: energy - energy_consum max: max_energy;\n\n    init {\n        location <- my_cell.location;\n    }\n\n    reflex basic_move {\n        my_cell <- choose_cell();\n        location <- my_cell.location;\n    }\n\n    reflex eat {\n        energy <- energy + energy_from_eat();        \n    }\n\n    reflex die when: energy <= 0 {\n        do die;\n    }\n\n    reflex reproduce when: (energy >= energy_reproduce) and (flip(proba_reproduce)) {\n        int nb_offsprings <- rnd(1, nb_max_offsprings);\n        create species(self) number: nb_offsprings {\n            my_cell <- myself.my_cell;\n            location <- my_cell.location;\n            energy <- myself.energy / nb_offsprings;\n        }\n\n        energy <- energy / nb_offsprings;\n    }\n\n    float energy_from_eat {\n        return 0.0;\n    }\n\n    vegetation_cell choose_cell {\n        return nil;\n    }\n\n    aspect base {\n        draw circle(size) color: color;\n    }\n\n    aspect icon {\n        draw my_icon size: 2 * size;\n    }\n\n    aspect info {\n        draw square(size) color: color;\n        draw string(energy with_precision 2) size: 3 color: #black;\n    }\n}\n\nspecies prey parent: generic_species {\n    rgb color <- #blue;\n    float max_energy <- prey_max_energy;\n    float max_transfert <- prey_max_transfert;\n    float energy_consum <- prey_energy_consum;\n    float proba_reproduce <- prey_proba_reproduce;\n    int nb_max_offsprings <- prey_nb_max_offsprings;\n    float energy_reproduce <- prey_energy_reproduce;\n    image_file my_icon <- image_file("../includes/data/sheep.png");\n\n    float energy_from_eat {\n        float energy_transfert <- 0.0;\n        if(my_cell.food > 0) {\n            energy_transfert <- min([max_transfert, my_cell.food]);\n            my_cell.food <- my_cell.food - energy_transfert;\n        }             \n        return energy_transfert;\n    }\n\n    vegetation_cell choose_cell {\n        return (my_cell.neighbors2) with_max_of (each.food);\n    }\n}\n\nspecies predator parent: generic_species {\n    rgb color <- #red;\n    float max_energy <- predator_max_energy;\n    float energy_transfert <- predator_energy_transfert;\n    float energy_consum <- predator_energy_consum;\n    float proba_reproduce <- predator_proba_reproduce;\n    int nb_max_offsprings <- predator_nb_max_offsprings;\n    float energy_reproduce <- predator_energy_reproduce;\n    image_file my_icon <- image_file("../includes/data/wolf.png");\n\n    float energy_from_eat {\n        list<prey> reachable_preys <- prey inside (my_cell);\n        if(! empty(reachable_preys)) {\n            ask one_of (reachable_preys) {\n                do die;\n            }\n            return energy_transfert;\n        }\n        return 0.0;\n    }\n\n    vegetation_cell choose_cell {\n        vegetation_cell my_cell_tmp <- shuffle(my_cell.neighbors2) first_with (!(empty(prey inside (each))));\n        if my_cell_tmp != nil {\n            return my_cell_tmp;\n        } else {\n            return one_of(my_cell.neighbors2);\n        }\n    }\n}\n\ngrid vegetation_cell width: 50 height: 50 neighbors: 4 {\n    float max_food <- 1.0;\n    float food_prod <- rnd(0.01);\n    float food <- rnd(1.0) max: max_food update: food + food_prod;\n    rgb color <- rgb(int(255 * (1 - food)), 255, int(255 * (1 - food))) update: rgb(int(255 * (1 - food)), 255, int(255 * (1 - food)));\n    list<vegetation_cell> neighbors2 <- (self neighbors_at 2);\n}\n\nexperiment prey_predator type: gui {\n    parameter "Initial number of preys: " var: nb_preys_init min: 0 max: 1000 category: "Prey";\n    parameter "Prey max energy: " var: prey_max_energy category: "Prey";\n    parameter "Prey max transfert: " var: prey_max_transfert category: "Prey";\n    parameter "Prey energy consumption: " var: prey_energy_consum category: "Prey";\n    parameter "Initial number of predators: " var: nb_predators_init min: 0 max: 200 category: "Predator";\n    parameter "Predator max energy: " var: predator_max_energy category: "Predator";\n    parameter "Predator energy transfert: " var: predator_energy_transfert category: "Predator";\n    parameter "Predator energy consumption: " var: predator_energy_consum category: "Predator";\n    parameter \'Prey probability reproduce: \' var: prey_proba_reproduce category: \'Prey\';\n    parameter \'Prey nb max offsprings: \' var: prey_nb_max_offsprings category: \'Prey\';\n    parameter \'Prey energy reproduce: \' var: prey_energy_reproduce category: \'Prey\';\n    parameter \'Predator probability reproduce: \' var: predator_proba_reproduce category: \'Predator\';\n    parameter \'Predator nb max offsprings: \' var: predator_nb_max_offsprings category: \'Predator\';\n    parameter \'Predator energy reproduce: \' var: predator_energy_reproduce category: \'Predator\';\n\n    output {\n        display main_display {\n            grid vegetation_cell lines: #black;\n            species prey aspect: icon;\n            species predator aspect: icon;\n        }\n\n        display info_display {\n            grid vegetation_cell lines: #black;\n            species prey aspect: info;\n            species predator aspect: info;\n        }\n\n        monitor "Number of preys" value: nb_preys;\n        monitor "Number of predators" value: nb_predators;\n    }\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},4552:(e,n,r)=>{r.d(n,{I:()=>a,M:()=>s});var o=r(11504);const t={},i=o.createContext(t);function s(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);