"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3308],{35276:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>a,contentTitle:()=>t,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var i=n(17624),r=n(4552);const l={title:"Using FIPA ACL"},t=void 0,o={id:"UsingFIPAACL",title:"Using FIPA ACL",description:"[//]: # (keyword|concept_fipa)",source:"@site/versioned_docs/version-1.8.1/UsingFIPAACL.md",sourceDirName:".",slug:"/UsingFIPAACL",permalink:"/wiki/1.8.1/UsingFIPAACL",draft:!1,unlisted:!1,editUrl:"https://github.com/gama-platform/gama/wiki/UsingFIPAACL/_edit",tags:[],version:"1.8.1",frontMatter:{title:"Using FIPA ACL"},sidebar:"main",previous:{title:"Calling R",permalink:"/wiki/1.8.1/CallingR"},next:{title:"Using GAMAnalyzer",permalink:"/wiki/1.8.1/GamAnalyzer"}},a={},c=[{value:"Variables",id:"variables",level:2},{value:"Actions",id:"actions",level:3},{value:"accept_proposal",id:"accept_proposal",level:4},{value:"agree",id:"agree",level:4},{value:"cancel",id:"cancel",level:4},{value:"cfp",id:"cfp",level:4},{value:"end_conversation",id:"end_conversation",level:4},{value:"failure",id:"failure",level:4},{value:"inform",id:"inform",level:4},{value:"propose",id:"propose",level:4},{value:"query",id:"query",level:4},{value:"refuse",id:"refuse",level:4},{value:"reject_proposal",id:"reject_proposal",level:4},{value:"reply",id:"reply",level:4},{value:"request",id:"request",level:4},{value:"send",id:"send",level:4},{value:"start_conversation",id:"start_conversation",level:4},{value:"subscribe",id:"subscribe",level:4}];function h(e){const s={h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.p,{children:"The communicating skill offers some actions and built-in variables which enable agents to communicate with each other using the FIPA interaction protocol. This document describes the built-in variables and actions of this skill. Examples are found in the models library bundled with GAMA."}),"\n",(0,i.jsx)(s.h2,{id:"variables",children:"Variables"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"accept_proposals (list)"}),": A list of 'accept_proposal' performative messages of the agent's mailbox having ."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"agrees (list)"}),": A list of 'accept_proposal' performative messages."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"cancels (list)"}),": A list of 'cancel' performative messages."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"cfps (list)"}),": A list of 'cfp' (call for proposal) performative messages."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"conversations (list)"}),": A list containing the current conversations of agent. Ended conversations are automatically removed from this list."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"failures (list)"}),": A list of 'failure' performative messages."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"informs (list)"}),": A list of 'inform' performative messages."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"messages (list)"}),": The mailbox of the agent, a list of messages of all types of performatives."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"proposes (list)"}),": A list of 'propose' performative messages ."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"queries (list)"}),": A list of 'query' performative messages."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"refuses (list)"}),": A list of 'propose' performative messages."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"reject_proposals (list)"}),": A list of 'reject_proposals' performative messages."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"requests (list)"}),": A list of 'request' performative messages."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"requestWhens (list)"}),": A list of 'request-when' performative messages."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"subscribes (list)"}),": A list of 'subscribe' performative messages."]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"actions",children:"Actions"}),"\n",(0,i.jsx)(s.h4,{id:"accept_proposal",children:"accept_proposal"}),"\n",(0,i.jsx)(s.p,{children:"Replies a message with an 'accept_proposal' performative message"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"returns: unknown"}),"\n",(0,i.jsx)(s.li,{children:"message (message): The message to be replied"}),"\n",(0,i.jsx)(s.li,{children:"content (list): The content of the replying message"}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"agree",children:"agree"}),"\n",(0,i.jsx)(s.p,{children:"Replies a message with an 'agree' performative message."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"returns: unknown"}),"\n",(0,i.jsx)(s.li,{children:"message (message): The message to be replied"}),"\n",(0,i.jsx)(s.li,{children:"content (list): The content of the replying message"}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"cancel",children:"cancel"}),"\n",(0,i.jsx)(s.p,{children:"Replies a message with a 'cancel' peformative message."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"returns: unknown"}),"\n",(0,i.jsx)(s.li,{children:"message (message): The message to be replied"}),"\n",(0,i.jsx)(s.li,{children:"content (list): The content of the replying message"}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"cfp",children:"cfp"}),"\n",(0,i.jsx)(s.p,{children:"Replies a message with a 'cfp' performative message."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"returns: unknown"}),"\n",(0,i.jsx)(s.li,{children:"message (message): The message to be replied"}),"\n",(0,i.jsx)(s.li,{children:"content (list): The content of the replying message"}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"end_conversation",children:"end_conversation"}),"\n",(0,i.jsx)(s.p,{children:"Replies a message with an 'end_conversation' peprformative message. This message marks the end of a conversation. In a 'no-protocol' conversation, it is the responsible of the modeler to explicitly send this message to mark the end of a conversation/interaction protocol."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"returns: unknown"}),"\n",(0,i.jsx)(s.li,{children:"message (message): The message to be replied"}),"\n",(0,i.jsx)(s.li,{children:"content (list): The content of the replying message"}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"failure",children:"failure"}),"\n",(0,i.jsx)(s.p,{children:"Replies a message with a 'failure' performative message."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"returns: unknown"}),"\n",(0,i.jsx)(s.li,{children:"message (message): The message to be replied"}),"\n",(0,i.jsx)(s.li,{children:"content (list): The content of the replying message"}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"inform",children:"inform"}),"\n",(0,i.jsx)(s.p,{children:"Replies a message with an 'inform' performative message."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"returns: unknown"}),"\n",(0,i.jsx)(s.li,{children:"message (message): The message to be replied"}),"\n",(0,i.jsx)(s.li,{children:"content (list): The content of the replying message"}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"propose",children:"propose"}),"\n",(0,i.jsx)(s.p,{children:"Replies a message with a 'propose' performative message."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"returns: unknown"}),"\n",(0,i.jsx)(s.li,{children:"message (message): The message to be replied"}),"\n",(0,i.jsx)(s.li,{children:"content (list): The content of the replying message"}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"query",children:"query"}),"\n",(0,i.jsx)(s.p,{children:"Replies a message with a 'query' performative message."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"returns: unknown"}),"\n",(0,i.jsx)(s.li,{children:"message (message): The message to be replied"}),"\n",(0,i.jsx)(s.li,{children:"content (list): The content of the replying message"}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"refuse",children:"refuse"}),"\n",(0,i.jsx)(s.p,{children:"Replies a message with a 'refuse' performative message."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"returns: unknown"}),"\n",(0,i.jsx)(s.li,{children:"message (message): The message to be replied"}),"\n",(0,i.jsx)(s.li,{children:"content (list): The content of the replying message"}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"reject_proposal",children:"reject_proposal"}),"\n",(0,i.jsx)(s.p,{children:"Replies a message with a 'reject_proposal' performative message."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"returns: unknown"}),"\n",(0,i.jsx)(s.li,{children:"message (message): The message to be replied"}),"\n",(0,i.jsx)(s.li,{children:"content (list): The content of the replying message"}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"reply",children:"reply"}),"\n",(0,i.jsx)(s.p,{children:"Replies a message. This action should be only used to reply a message in a 'no-protocol' conversation and with a 'user defined performative'. For performatives supported by GAMA (i.e., standard FIPA performatives), please use the 'action' with the same name of 'performative'. For example, to reply a message with a 'request' performative message, the modeller should use the 'request' action."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"returns: unknown"}),"\n",(0,i.jsx)(s.li,{children:"message (message): The message to be replied"}),"\n",(0,i.jsx)(s.li,{children:"performative (string): The performative of the replying message"}),"\n",(0,i.jsx)(s.li,{children:"content (list): The content of the replying message"}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"request",children:"request"}),"\n",(0,i.jsx)(s.p,{children:"Replies a message with a 'request' performative message."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"returns: unknown"}),"\n",(0,i.jsx)(s.li,{children:"message (message): The message to be replied"}),"\n",(0,i.jsx)(s.li,{children:"content (list): The content of the replying message"}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"send",children:"send"}),"\n",(0,i.jsx)(s.p,{children:"Starts a conversation/interaction protocol."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"returns: msi.gaml.extensions.fipa.Message"}),"\n",(0,i.jsx)(s.li,{children:"receivers (list): A list of receiver agents"}),"\n",(0,i.jsx)(s.li,{children:"content (list): The content of the message. A list of any GAML type"}),"\n",(0,i.jsx)(s.li,{children:"performative (string): A string, representing the message performative"}),"\n",(0,i.jsx)(s.li,{children:"protocol (string): A string representing the name of interaction protocol"}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"start_conversation",children:"start_conversation"}),"\n",(0,i.jsx)(s.p,{children:"Starts a conversation/interaction protocol."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"returns: msi.gaml.extensions.fipa.Message"}),"\n",(0,i.jsx)(s.li,{children:"receivers (list): A list of receiver agents"}),"\n",(0,i.jsx)(s.li,{children:"content (list): The content of the message. A list of any GAML type"}),"\n",(0,i.jsx)(s.li,{children:"performative (string): A string, representing the message performative"}),"\n",(0,i.jsx)(s.li,{children:"protocol (string): A string representing the name of interaction protocol"}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"subscribe",children:"subscribe"}),"\n",(0,i.jsx)(s.p,{children:"Replies a message with a 'subscribe' performative message."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"returns: unknown"}),"\n",(0,i.jsx)(s.li,{children:"message (message): The message to be replied"}),"\n",(0,i.jsx)(s.li,{children:"content (list): The content of the replying message"}),"\n"]})]})}function d(e={}){const{wrapper:s}={...(0,r.M)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},4552:(e,s,n)=>{n.d(s,{I:()=>o,M:()=>t});var i=n(11504);const r={},l=i.createContext(r);function t(e){const s=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(l.Provider,{value:s},e.children)}}}]);