"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[40531],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>h});var l=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,l,i=function(e,n){if(null==e)return{};var t,l,i={},a=Object.keys(e);for(l=0;l<a.length;l++)t=a[l],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)t=a[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=l.createContext({}),s=function(e){var n=l.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=s(e.components);return l.createElement(p.Provider,{value:n},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},u=l.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,m=r(e,["components","mdxType","originalType","parentName"]),d=s(t),u=i,h=d["".concat(p,".").concat(u)]||d[u]||c[u]||a;return t?l.createElement(h,o(o({ref:n},m),{},{components:t})):l.createElement(h,o({ref:n},m))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=u;var r={};for(var p in n)hasOwnProperty.call(n,p)&&(r[p]=n[p]);r.originalType=e,r[d]="string"==typeof e?e:i,o[1]=r;for(var s=2;s<a;s++)o[s]=t[s];return l.createElement.apply(null,o)}return l.createElement.apply(null,t)}u.displayName="MDXCreateElement"},74665:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>p,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var l=t(87462),i=t(63366),a=(t(67294),t(3905)),o=["components"],r={title:"2. Moving Cells"},p=void 0,s={unversionedId:"ThreeD_step2",id:"version-1.8.1/ThreeD_step2",title:"2. Moving Cells",description:"This second step model adds the moving3D skill to the cell agents and simply makes the cell agents move by defining a reflex that will call the action move. We will also add additional visual information to the display.",source:"@site/versioned_docs/version-1.8.1/ThreeD_step2.md",sourceDirName:".",slug:"/ThreeD_step2",permalink:"/wiki/1.8.1/ThreeD_step2",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/ThreeD_step2/_edit",tags:[],version:"1.8.1",frontMatter:{title:"2. Moving Cells"},sidebar:"tuto",previous:{title:"1. Basic Model",permalink:"/wiki/1.8.1/ThreeD_step1"},next:{title:"3. Connections",permalink:"/wiki/1.8.1/ThreeD_step3"}},m={},d=[{value:"Formulation",id:"formulation",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"Global Section",id:"global-section",level:3},{value:"Global variable",id:"global-variable",level:4},{value:"Model initialization",id:"model-initialization",level:4},{value:"Moving3D skills",id:"moving3d-skills",level:3},{value:"Experiment",id:"experiment",level:3},{value:"Output",id:"output",level:4},{value:"Complete Model",id:"complete-model",level:2}],c={toc:d};function u(e){var n=e.components,r=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,l.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This second step model adds the ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"moving3D"))," skill to the ",(0,a.kt)("inlineCode",{parentName:"p"},"cell")," agents and simply makes the ",(0,a.kt)("inlineCode",{parentName:"p"},"cell")," agents move by defining a reflex that will call the action ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"move")),". We will also add additional visual information to the display."),(0,a.kt)("h2",{id:"formulation"},"Formulation"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Redefining the shape of the world with a 3D Shape."),(0,a.kt)("li",{parentName:"ul"},"Attaching new skills (",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"moving3D")),") to ",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"cell"))," agents."),(0,a.kt)("li",{parentName:"ul"},"Modify ",(0,a.kt)("strong",{parentName:"li"},"cell")," aspect."),(0,a.kt)("li",{parentName:"ul"},"Add a graphics layer.")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"http://www.youtube.com/watch?feature=player_embedded&v=_QqUbC0MWRU"},(0,a.kt)("img",{alt:"3D tutorial: moving cells in a 3D space.",src:t(69645).Z,width:"500",height:"500"}))),(0,a.kt)("h2",{id:"model-definition"},"Model Definition"),(0,a.kt)("h3",{id:"global-section"},"Global Section"),(0,a.kt)("h4",{id:"global-variable"},"Global variable"),(0,a.kt)("p",null,"We use a new global variable called ",(0,a.kt)("inlineCode",{parentName:"p"},"environment_size")," to define the size of our 3D environment.\nIn the global section, we define the new variable:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"int environment_size <-100;\n")),(0,a.kt)("p",null,"Then we redefine the ",(0,a.kt)("inlineCode",{parentName:"p"},"shape")," of the world (by default the shape of the world is a 100x100 square) as a cube that will have the size defined by the ",(0,a.kt)("inlineCode",{parentName:"p"},"environment_size")," variable. To do so we change the shape of the world in the ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"global"))," section:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"geometry shape <- cube(environment_size);   \n")),(0,a.kt)("h4",{id:"model-initialization"},"Model initialization"),(0,a.kt)("p",null,"When we created the ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"cell"))," agents, we want to place them randomly in the 3D environment. To do so we set the ",(0,a.kt)("inlineCode",{parentName:"p"},"location")," with a random value for ",(0,a.kt)("inlineCode",{parentName:"p"},"x"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"y")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"z")," between ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"environment_size"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"create cell number: nb_cells { \n  location <- {rnd(environment_size), rnd(environment_size), rnd(environment_size)};       \n}\n")),(0,a.kt)("h3",{id:"moving3d-skills"},"Moving3D skills"),(0,a.kt)("p",null,"In the previous example, we only created ",(0,a.kt)("inlineCode",{parentName:"p"},"cell")," agents that did not have any behavior. In this step we want to make them move. To do so we add a ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"moving3D"))," skill to the ",(0,a.kt)("inlineCode",{parentName:"p"},"cell")," species."),(0,a.kt)("p",null,"More information on built-in skills proposed by GAMA can be found ",(0,a.kt)("a",{parentName:"p",href:"BuiltInSkills"},"here"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"species cell skills: [moving3D]{\n...     \n}\n")),(0,a.kt)("p",null,"Then we define a new reflex for the species ",(0,a.kt)("inlineCode",{parentName:"p"},"cell")," that consists in calling the action ",(0,a.kt)("inlineCode",{parentName:"p"},"move")," bundled in ",(0,a.kt)("inlineCode",{parentName:"p"},"moving3D")," skill."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"reflex move {\n    do move;\n}                       \n")),(0,a.kt)("p",null,"Finally we modify a bit the aspect of the sphere to set its size according to the ",(0,a.kt)("inlineCode",{parentName:"p"},"environment_size")," global variable previously defined."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"aspect default {\n    draw sphere(environment_size*0.01) color: #blue;   \n}\n")),(0,a.kt)("h3",{id:"experiment"},"Experiment"),(0,a.kt)("p",null,"The experiment is the same as the previous one except that we will display the bounds of the environment by using a ",(0,a.kt)("inlineCode",{parentName:"p"},"graphics")," layer."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'graphics "env" {\n    draw cube(environment_size) color: #black empty: true;  \n}\n')),(0,a.kt)("h4",{id:"output"},"Output"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'output {\n    display View1 type:opengl{\n        graphics "env"{\n            draw cube(environment_size) color: #black empty: true;  \n        }\n        species cell;  \n    }\n}\n')),(0,a.kt)("h2",{id:"complete-model"},"Complete Model"),(0,a.kt)("p",null,"The GIT version of the model can be found here ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/gama-platform/gama/blob/master/msi.gama.models/models/Tutorials/3D/models/Model%2002.gaml"},"Model 02.gaml")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'global {\n    int nb_cells <- 100;\n    int environment_size <- 100;\n    geometry shape <- cube(environment_size);\n\n    init {\n    create cell number: nb_cells {\n        location <- {rnd(environment_size), rnd(environment_size), rnd(environment_size)};\n    }\n    }\n}\n\nspecies cell skills: [moving3D] {\n    reflex move {\n    do move;\n    }\n\n    aspect default {\n    draw sphere(environment_size * 0.01) color: #blue;\n    }\n}\n\nexperiment Tuto3D type: gui {\n    parameter "Initial number of cells: " var: nb_cells min: 1 max: 1000 category: "Cells";\n    output {\n    display View1 type: opengl {\n        graphics "env" {\n        draw cube(environment_size) color: #black empty: true;\n        }\n        species cell;\n    }\n    }\n}\n')))}u.isMDXComponent=!0},69645:(e,n,t)=>{t.d(n,{Z:()=>l});const l=t.p+"assets/images/3D_model1-35ed6f27fc184f2e81c434b4cb4f821c.png"}}]);