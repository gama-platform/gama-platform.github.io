"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1541],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>u});var i=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,i,n=function(e,t){if(null==e)return{};var a,i,n={},l=Object.keys(e);for(i=0;i<l.length;i++)a=l[i],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)a=l[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=i.createContext({}),p=function(e){var t=i.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},d=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=p(a),u=n,h=m["".concat(s,".").concat(u)]||m[u]||c[u]||l;return a?i.createElement(h,r(r({ref:t},d),{},{components:a})):i.createElement(h,r({ref:t},d))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,r=new Array(l);r[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:n,r[1]=o;for(var p=2;p<l;p++)r[p]=a[p];return i.createElement.apply(null,r)}return i.createElement.apply(null,a)}m.displayName="MDXCreateElement"},28046:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var i=a(87462),n=a(63366),l=(a(67294),a(3905)),r=["components"],o={title:"Creation of a basic disease spreading model"},s=void 0,p={unversionedId:"G__GraphicalEditorTutorial",id:"version-1.8.2-RC1/G__GraphicalEditorTutorial",title:"Creation of a basic disease spreading model",description:"This tutorial illustrates how to create simple agents and make them move in their environment.",source:"@site/versioned_docs/version-1.8.2-RC1/G__GraphicalEditorTutorial.md",sourceDirName:".",slug:"/G__GraphicalEditorTutorial",permalink:"/wiki/G__GraphicalEditorTutorial",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/G__GraphicalEditorTutorial/_edit",tags:[],version:"1.8.2-RC1",frontMatter:{title:"Creation of a basic disease spreading model"}},d={},c=[{value:"Formulation",id:"formulation",level:2},{value:"Diagram Definition",id:"diagram-definition",level:2},{value:"Project and diagram",id:"project-and-diagram",level:3},{value:"diagram structure",id:"diagram-structure",level:3},{value:"species",id:"species",level:3},{value:"Internal state",id:"internal-state",level:4},{value:"Behavior",id:"behavior",level:4},{value:"Display",id:"display",level:4},{value:"global section",id:"global-section",level:3},{value:"Model initialization",id:"model-initialization",level:4},{value:"experiment",id:"experiment",level:3},{value:"output",id:"output",level:4},{value:"Run simulation",id:"run-simulation",level:4},{value:"Define a chart",id:"define-a-chart",level:4}],m={toc:c};function u(e){var t=e.components,o=(0,n.Z)(e,r);return(0,l.kt)("wrapper",(0,i.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"This tutorial illustrates how to create simple agents and make them move in their environment."),(0,l.kt)("h2",{id:"formulation"},"Formulation"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Define the people species with a moving skill"),(0,l.kt)("li",{parentName:"ul"},"Define the move reflex that allows the people agent to move randomly and the infect_others reflex that allows them to infect other people agents."),(0,l.kt)("li",{parentName:"ul"},"Define the aspect of the people species"),(0,l.kt)("li",{parentName:"ul"},"Add the people species to a display"),(0,l.kt)("li",{parentName:"ul"},"Add a chart display to follow the evolution of the number of infected people")),(0,l.kt)("h2",{id:"diagram-definition"},"Diagram Definition"),(0,l.kt)("h3",{id:"project-and-diagram"},"Project and diagram"),(0,l.kt)("p",null,'The first step of this tutorial consists in defining a new project, then in defining a new model from a skeleton (choose "skeleton" in "Choose a diagram".'),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"images/graphical_editor/create_diagram.gif",src:a(94890).Z,width:"2422",height:"1440"})),(0,l.kt)("h3",{id:"diagram-structure"},"diagram structure"),(0,l.kt)("p",null,"A GAMA diagram is composed of three main types of elements:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"world "),': this element, generated at the creation of the diagram, that is unique, defines the "world" agent, a special agent of a GAMA model. It represents all that is global to the model: dynamics, variables, actions. In addition, it allows to initialize the simulation (init block).'),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"species")," and ",(0,l.kt)("strong",{parentName:"li"},"grid"),": these elements define the species of agents composing the model."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"experiment "),": these elements define a context of the execution of the simulations. In particular, it defines the input (parameters) and output (displays, files...) of a model.")),(0,l.kt)("h3",{id:"species"},"species"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"images/graphical_editor/create_people.gif",src:a(96471).Z,width:"2785",height:"1542"})),(0,l.kt)("p",null,"A ",(0,l.kt)("a",{parentName:"p",href:"RegularSpecies"},"species")," represents a \xabprototype\xbb of agents: it defines their common properties."),(0,l.kt)("p",null,"Three main elements can be defined in a species:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the internal state of its agents (attributes)"),(0,l.kt)("li",{parentName:"ul"},"their behavior"),(0,l.kt)("li",{parentName:"ul"},"how they are displayed (aspects)")),(0,l.kt)("p",null,"In our model, we define a new people species. In addition, we want to add a new capability to our agent: the possibility to move randomly. For that, we add a specific skill to our people agents. A ",(0,l.kt)("a",{parentName:"p",href:"AttachingSkills"},"skill")," is a built-in module that provides the modeler a self-contain and relevant set of actions and variables. The ",(0,l.kt)("a",{parentName:"p",href:"BuiltInSkills#moving"},"moving")," provides the agents with several attributes and actions related to movement. "),(0,l.kt)("h4",{id:"internal-state"},"Internal state"),(0,l.kt)("p",null,"An ",(0,l.kt)("a",{parentName:"p",href:"RegularSpecies#declaration"},"attribute")," is defined as follows: type of the attribute and name. Numerous types of attributes are available: ",(0,l.kt)("em",{parentName:"p"},"int (integer), float (floating-point number), string, bool (boolean, true or false), point (coordinates), list, pair, map, file, matrix, agents species, rgb (color), graph, path...")),(0,l.kt)("p",null,'In addition to the attributes the modeler explicitly defines, species "inherits" other attributes called "built-in" variables:'),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A name (",(0,l.kt)("em",{parentName:"li"},"name"),"): the identifier of the species"),(0,l.kt)("li",{parentName:"ul"},"A shape (",(0,l.kt)("em",{parentName:"li"},"shape"),"): the default shape of the agents to be constructed after the species. It can be ",(0,l.kt)("em",{parentName:"li"},"a point, a polygon, etc.")),(0,l.kt)("li",{parentName:"ul"},"A location (",(0,l.kt)("em",{parentName:"li"},"location"),"): the centroid of its shape.")),(0,l.kt)("p",null,"In our model, we define 2 new attributes to our people agents: "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"is_infected")," of type bool, with for initial value: false"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"color")," of type rgb, with for initial value: #green")),(0,l.kt)("h4",{id:"behavior"},"Behavior"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"images/graphical_editor/create_reflex.gif",src:a(4832).Z,width:"2785",height:"1542"})),(0,l.kt)("p",null,"GAMA proposes several ways to define the behavior of a species: dynamic variables (update facet), reflexes..."),(0,l.kt)("p",null,"A ",(0,l.kt)("a",{parentName:"p",href:"DefiningActionsAndBehaviors#behaviors"},"reflex")," is a element (that can be defined to the world or any species) that will be automatically executed at each simulation step if its condition is true. The condition is optional: when it is omitted, the reflex is activated at each time step. "),(0,l.kt)("p",null,"We define a first reflex called ",(0,l.kt)("strong",{parentName:"p"},"move")," that is activated at each simulation step (no condition) and that makes the people move randomly using the wander action from the ",(0,l.kt)("a",{parentName:"p",href:"BuiltInSkills#moving"},"moving")," skill with an amplitude of 30\xb0."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"do wander amplitude: 30.0;\n")),(0,l.kt)("p",null,"We define a second reflex called ",(0,l.kt)("strong",{parentName:"p"},"infect")," that is activated only when the agent is infected (is_infected = true) and that ask all the people at a distance of 5m to test a probability to be infected."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ask people at_distance 5.0 {\n     if flip(0.1) {\n    is_infected <- true;\n        color <- #red;\n     }\n}\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("a",{parentName:"p",href:"Statements#ask"},"ask")," allows an agent to ask other agents to do something (i.e. to execute a sequence of statements). The ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#at_distance"},"at_distance")," operator allows to get the list of agents (here of people agents) that are located at a distance lower or equal to the given distance (here 5m). The ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#flip"},"flip")," operator allows to test a probability."),(0,l.kt)("h4",{id:"display"},"Display"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"images/graphical_editor/create_aspect.gif",src:a(72468).Z,width:"2785",height:"1542"})),(0,l.kt)("p",null,"An agent ",(0,l.kt)("a",{parentName:"p",href:"RegularSpecies#the-aspect-statement"},"aspects")," have to be defined. An aspect is a way to display the agents of a species."),(0,l.kt)("p",null,"In an aspect, it is possible to draw:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A geometry: for instance, the shape of the agent (but it may be a different one, for instance, a circle instead of a complex polygon)"),(0,l.kt)("li",{parentName:"ul"},"An image: to draw icons"),(0,l.kt)("li",{parentName:"ul"},"A text: to draw a text")),(0,l.kt)("p",null,"In our model, we define an aspect for the people agent called ",(0,l.kt)("strong",{parentName:"p"},"circle")," that draw the agents as a circle of 1m radius with a color that depends on their ",(0,l.kt)("strong",{parentName:"p"},"color")," attribute. If the people agent is infected, it will be drawn in red, in green otherwise."),(0,l.kt)("h3",{id:"global-section"},"global section"),(0,l.kt)("p",null,"The global section represents a specific agent, called ",(0,l.kt)("a",{parentName:"p",href:"GlobalSpecies"},"world"),". Defining this agent follows the same principle as any agent and is, thus, defined after a species.\nThe world agent represents everything that is global to the model: dynamics, variables...\nIt allows to initialize simulations (init block): the world is always created and initialized first when a simulation is launched (before any other agents). The geometry (shape) of the world agent is by default a square with 100m for side size but can be redefined if necessary. The ",(0,l.kt)("em",{parentName:"p"},"step")," attribute of the world agent allows to specify the duration of one simulation step (by default, 1 step = 1 seconde)."),(0,l.kt)("h4",{id:"model-initialization"},"Model initialization"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"images/graphical_editor/init_sim.gif",src:a(84465).Z,width:"2785",height:"1542"})),(0,l.kt)("p",null,"The init section of the world allows to initialize the define what will happen at the initialization of a simulation, for instance, to create agents. We use the statement ",(0,l.kt)("em",{parentName:"p"},"create"),"  to create agents of a specific species: ",(0,l.kt)("strong",{parentName:"p"},"create")," species","_","name + :"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"number: number of agents to create (int, 1 by default)"),(0,l.kt)("li",{parentName:"ul"},"from: GIS file to use to create the agents (optional, string or file)"),(0,l.kt)("li",{parentName:"ul"},"returns: list of created agents (list)")),(0,l.kt)("p",null,"For our model, we define the init block in order to create ",(0,l.kt)("em",{parentName:"p"},"nb","_","people")," ",(0,l.kt)("em",{parentName:"p"},"people")," agents and ask ",(0,l.kt)("em",{parentName:"p"},"nb","_","infected","_","init")," of them to be infected:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"create people number: nb_people;\nask one_of(people) {\n   is_infected <- true;\n   color <- #red;\n}\n")),(0,l.kt)("h3",{id:"experiment"},"experiment"),(0,l.kt)("p",null,"An experiment defines how a model can be simulated (executed). Several experiments can be defined for a given model. Two types of experiment exists:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"gui: experiment with a graphical interface, which displays its input parameters and outputs."),(0,l.kt)("li",{parentName:"ul"},"batch: Allows to setup a series of simulations (w/o graphical interface).")),(0,l.kt)("p",null,"In our model, a gui experiment called ",(0,l.kt)("em",{parentName:"p"},"my","_","GUI","_","xp")," is already defined."),(0,l.kt)("h4",{id:"output"},"output"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"images/graphical_editor/define_display.gif",src:a(44560).Z,width:"2785",height:"1542"})),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"DefiningGUIExperiment"},"Output")," blocks are defined in an experiment and define how to visualize a simulation (with one or more ",(0,l.kt)("a",{parentName:"p",href:"DefiningDisplaysGeneralities"},"display")," blocks that define separate windows). Each display can be refreshed independently by defining the facet ",(0,l.kt)("strong",{parentName:"p"},"refresh","_","every:")," nb (int) (the display will be refreshed every nb steps of the simulation)."),(0,l.kt)("p",null,"Each display can include different layers (like in a GIS):"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Agents lists : ",(0,l.kt)("strong",{parentName:"li"},"agents")," layer","_","name value: agents","_","list aspect: my","_","aspect;"),(0,l.kt)("li",{parentName:"ul"},"Agents species : ",(0,l.kt)("strong",{parentName:"li"},"species"),"  my","_","species aspect: my","_","aspect"),(0,l.kt)("li",{parentName:"ul"},"Images: ",(0,l.kt)("strong",{parentName:"li"},"image")," layer","_","name file: image","_","file;"),(0,l.kt)("li",{parentName:"ul"},"Charts : see later.")),(0,l.kt)("p",null,"Note that it is possible to define a ",(0,l.kt)("a",{parentName:"p",href:"Defining3DDisplays"},"opengl display")," (for 3D display or just to optimize the display) by using the facet ",(0,l.kt)("inlineCode",{parentName:"p"},"type: opengl"),"."),(0,l.kt)("p",null,"In our model, we add to the existing display ",(0,l.kt)("em",{parentName:"p"},"my","_","display")," a layer for the people species with the circle aspect."),(0,l.kt)("h4",{id:"run-simulation"},"Run simulation"),(0,l.kt)("p",null,"To run the simulation, just click on the button corresponding to the existing experiment (in our case ",(0,l.kt)("em",{parentName:"p"},"my_GUI_xp"),")\n",(0,l.kt)("img",{alt:"images/graphical_editor/run_sim.gif",src:a(71854).Z,width:"2785",height:"1542"})),(0,l.kt)("h4",{id:"define-a-chart"},"Define a chart"),(0,l.kt)("p",null,"It is possible to define a chart layer in a display. In our model, we add a new display called ",(0,l.kt)("em",{parentName:"p"},"chart")," in which we define a layer of type chart to display the evolution of the number of infected and susceptible people."),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"images/graphical_editor/create_chart.gif",src:a(31677).Z,width:"2785",height:"1580"})),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"images/graphical_editor/sim_with_chart.gif",src:a(39644).Z,width:"2785",height:"1580"})))}u.isMDXComponent=!0},72468:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/create_aspect-0e6bf000abe6327b399ebe6f3ca1f71c.gif"},31677:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/create_chart-4ad99eecc8b0d4d27d7ca13a52a477a2.gif"},94890:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/create_diagram-99c1e2b0a12f3a863c8cf64c3b9b4a87.gif"},96471:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/create_people-38b5856a7324536ec879e83f6fc40000.gif"},4832:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/create_reflex-80b3c8a23afb0859116cdcb4c4a9b896.gif"},44560:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/define_display-7ad71eb2f6604a42f513e9d2a121c137.gif"},84465:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/init_sim-a5e0ee5e40fa62d88c85a26c385c7b69.gif"},71854:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/run_sim-187f0ce12f62c7fde7c4ab9453a28092.gif"},39644:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/sim_with_chart-2f56fb52532887e207e557c7261f0ba0.gif"}}]);