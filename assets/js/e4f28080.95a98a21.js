"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[71916],{13177:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var r=n(74848),a=n(28453);const i={title:"7. Automatic Road Repair"},o=void 0,s={id:"RoadTrafficModel_step7",title:"7. Automatic Road Repair",description:"This 7th step illustrates how to select in a list of elements that optimizes a given function.",source:"@site/versioned_docs/version-1.8.1/RoadTrafficModel_step7.md",sourceDirName:".",slug:"/RoadTrafficModel_step7",permalink:"/wiki/1.8.1/RoadTrafficModel_step7",draft:!1,unlisted:!1,editUrl:"https://github.com/gama-platform/gama/wiki/RoadTrafficModel_step7/_edit",tags:[],version:"1.8.1",frontMatter:{title:"7. Automatic Road Repair"},sidebar:"tuto",previous:{title:"6. Charts",permalink:"/wiki/1.8.1/RoadTrafficModel_step6"},next:{title:"3D Tutorial",permalink:"/wiki/1.8.1/ThreeD"}},l={},d=[{value:"Formulation",id:"formulation",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"parameters",id:"parameters",level:3},{value:"road repairing",id:"road-repairing",level:3},{value:"Complete Model",id:"complete-model",level:2}];function c(e){const t={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"This 7th step illustrates how to select in a list of elements that optimizes a given function."}),"\n",(0,r.jsx)(t.h2,{id:"formulation",children:"Formulation"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Add a new parameter, ",(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.code,{children:"repair_time"})}),", that is equal to 2."]}),"\n",(0,r.jsxs)(t.li,{children:["Every ",(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.code,{children:"repair_time"})}),", the ",(0,r.jsx)(t.code,{children:"road"})," with the highest ",(0,r.jsx)(t.code,{children:"destruction_coeff"})," value is repaired (set its ",(0,r.jsx)(t.code,{children:"destruction_coeff"})," to 1)."]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"model-definition",children:"Model Definition"}),"\n",(0,r.jsx)(t.h3,{id:"parameters",children:"parameters"}),"\n",(0,r.jsxs)(t.p,{children:["We add a new parameter: the ",(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.code,{children:"repair_time"})}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["In the global section, we define the ",(0,r.jsx)(t.code,{children:"repair_time"})," variable:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"int repair_time <- 2 ;\n"})}),"\n",(0,r.jsx)(t.p,{children:"In the experiment section, we define the associated parameter:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'parameter "Number of steps between two road repairs" var: repair_time category: "Road" ;\n'})}),"\n",(0,r.jsx)(t.h3,{id:"road-repairing",children:"road repairing"}),"\n",(0,r.jsxs)(t.p,{children:["We have to add a reflex method in the global section that is triggered every ",(0,r.jsx)(t.code,{children:"repair_time"})," hours. This reflex selects, thanks to the ",(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.code,{children:"with_max_of"})})," operator the ",(0,r.jsx)(t.code,{children:"road"})," agent with the highest ",(0,r.jsx)(t.code,{children:"destruction_coeff"})," value, then sets this value at 1."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"global {\n    ...\n    reflex repair_road when: every(repair_time #hour) {\n\troad the_road_to_repair <- road with_max_of (each.destruction_coeff) ;\n\task the_road_to_repair {\n\t    destruction_coeff <- 1.0 ;\n\t}\n    }\n}\n"})}),"\n",(0,r.jsx)(t.h2,{id:"complete-model",children:"Complete Model"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'model tutorial_gis_city_traffic\n\nglobal {\n    file shape_file_buildings <- file("../includes/building.shp");\n    file shape_file_roads <- file("../includes/road.shp");\n    file shape_file_bounds <- file("../includes/bounds.shp");\n    geometry shape <- envelope(shape_file_bounds);\n    float step <- 10 #mn;\n    date starting_date <- date("2019-09-01-00-00-00");\t\n    int nb_people <- 100;\n    int min_work_start <- 6;\n    int max_work_start <- 8;\n    int min_work_end <- 16; \n    int max_work_end <- 20; \n    float min_speed <- 1.0 #km / #h;\n    float max_speed <- 5.0 #km / #h; \n    float destroy <- 0.02;\n    int repair_time <- 2 ;\n    graph the_graph;\n\t\n    init {\n\tcreate building from: shape_file_buildings with: [type::string(read ("NATURE"))] {\n\t    if type="Industrial" {\n\t\tcolor <- #blue ;\n\t    }\n\t}\n\tcreate road from: shape_file_roads ;\n\tmap<road,float> weights_map <- road as_map (each:: (each.destruction_coeff * each.shape.perimeter));\n\tthe_graph <- as_edge_graph(road) with_weights weights_map;\t\n\t\t\n\tlist<building> residential_buildings <- building where (each.type="Residential");\n\tlist<building> industrial_buildings <- building  where (each.type="Industrial") ;\n\tcreate people number: nb_people {\n\t    speed <- rnd(min_speed, max_speed);\n\t    start_work <- rnd (min_work_start, max_work_start);\n\t    end_work <- rnd(min_work_end, max_work_end);\n\t    living_place <- one_of(residential_buildings) ;\n\t    working_place <- one_of(industrial_buildings) ;\n\t    objective <- "resting";\n\t    location <- any_location_in (living_place); \n\t}\n    }\n\t\n    reflex update_graph{\n\tmap<road,float> weights_map <- road as_map (each:: (each.destruction_coeff * each.shape.perimeter));\n\tthe_graph <- the_graph with_weights weights_map;\n    }\n\n    reflex repair_road when: every(repair_time #hour ) {\n\troad the_road_to_repair <- road with_max_of (each.destruction_coeff) ;\n\task the_road_to_repair {\n\t    destruction_coeff <- 1.0 ;\n\t}\n    }\n}\n\nspecies building {\n    string type; \n    rgb color <- #gray ;\n\t\n    aspect base {\n\tdraw shape color: color ;\n    }\n}\n\nspecies road  {\n    float destruction_coeff <- rnd(1.0,2.0) max: 2.0;\n    int colorValue <- int(255*(destruction_coeff - 1)) update: int(255*(destruction_coeff - 1));\n    rgb color <- rgb(min([255, colorValue]),max ([0, 255 - colorValue]),0)  update: rgb(min([255, colorValue]),max ([0, 255 - colorValue]),0) ;\n\t\n    aspect base {\n\tdraw shape color: color ;\n    }\n}\n\nspecies people skills:[moving] {\n    rgb color <- #yellow ;\n    building living_place <- nil ;\n    building working_place <- nil ;\n    int start_work ;\n    int end_work  ;\n    string objective ; \n    point the_target <- nil ;\n\t\t\n    reflex time_to_work when: current_date.hour = start_work and objective = "resting"{\n\tobjective <- "working" ;\n\tthe_target <- any_location_in (working_place);\n    }\n\t\t\n    reflex time_to_go_home when: current_date.hour = end_work and objective = "working"{\n\tobjective <- "resting" ;\n\tthe_target <- any_location_in (living_place); \n    } \n\t \n    reflex move when: the_target != nil {\n\tpath path_followed <- goto(target: the_target, on:the_graph, return_path: true);\n\tlist<geometry> segments <- path_followed.segments;\n\tloop line over: segments {\n\t    float dist <- line.perimeter;\n\t    ask road(path_followed agent_from_geometry line) { \n\t\tdestruction_coeff <- destruction_coeff + (destroy * dist / shape.perimeter);\n\t    }\n\t}\n\tif the_target = location {\n\t    the_target <- nil ;\n\t}\n    }\n\t\n    aspect base {\n\tdraw circle(10) color: color border: #black;\n    }\n}\n\nexperiment road_traffic type: gui {\n    parameter "Shapefile for the buildings:" var: shape_file_buildings category: "GIS" ;\n    parameter "Shapefile for the roads:" var: shape_file_roads category: "GIS" ;\n    parameter "Shapefile for the bounds:" var: shape_file_bounds category: "GIS" ;\n    parameter "Number of people agents" var: nb_people category: "People" ;\n    parameter "Earliest hour to start work" var: min_work_start category: "People" min: 2 max: 8;\n    parameter "Latest hour to start work" var: max_work_start category: "People" min: 8 max: 12;\n    parameter "Earliest hour to end work" var: min_work_end category: "People" min: 12 max: 16;\n    parameter "Latest hour to end work" var: max_work_end category: "People" min: 16 max: 23;\n    parameter "minimal speed" var: min_speed category: "People" min: 0.1 #km/#h ;\n    parameter "maximal speed" var: max_speed category: "People" max: 10 #km/#h;\n    parameter "Value of destruction when a people agent takes a road" var: destroy category: "Road" ;\n    parameter "Number of hours between two road repairs" var: repair_time category: "Road" ;\n\t\n    output {\n\tdisplay city_display type:opengl {\n\t    species building aspect: base ;\n\t    species road aspect: base ;\n\t    species people aspect: base ;\n\t}\n\tdisplay chart_display refresh: every(10#cycles) { \n\t    chart "Road Status" type: series size: {1, 0.5} position: {0, 0} {\n\t\tdata "Mean road destruction" value: mean (road collect each.destruction_coeff) style: line color: #green ;\n\t\tdata "Max road destruction" value: road max_of each.destruction_coeff style: line color: #red ;\n\t    }\n\t    chart "People Objectif" type: pie style: exploded size: {1, 0.5} position: {0, 0.5}{\n\t\tdata "Working" value: people count (each.objective="working") color: #magenta ;\n\t\tdata "Resting" value: people count (each.objective="resting") color: #blue ;\n\t    }\n\t}\n    }\n}\n'})})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>s});var r=n(96540);const a={},i=r.createContext(a);function o(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);