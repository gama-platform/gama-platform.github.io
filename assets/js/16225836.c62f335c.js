"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[20448],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=p(n),d=o,f=m["".concat(c,".").concat(d)]||m[d]||u[d]||l;return n?r.createElement(f,a(a({ref:t},s),{},{components:n})):r.createElement(f,a({ref:t},s))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,a=new Array(l);a[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var p=2;p<l;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5738:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>p,toc:()=>u});var r=n(87462),o=n(63366),l=(n(67294),n(3905)),a=["components"],i={title:"3. Connections"},c=void 0,p={unversionedId:"ThreeD_step3",id:"ThreeD_step3",title:"3. Connections",description:"Formulation",source:"@site/../docs/ThreeD_step3.md",sourceDirName:".",slug:"/ThreeD_step3",permalink:"/wiki/next/ThreeD_step3",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/ThreeD_step3/_edit",tags:[],version:"current",frontMatter:{title:"3. Connections"},sidebar:"tuto",previous:{title:"2. Moving Cells",permalink:"/wiki/next/ThreeD_step2"},next:{title:"Incremental Model",permalink:"/wiki/next/IncrementalModel"}},s={},u=[{value:"Formulation",id:"formulation",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"Cells update",id:"cells-update",level:3},{value:"Complete Model",id:"complete-model",level:2}],m={toc:u};function d(e){var t=e.components,i=(0,o.Z)(e,a);return(0,l.kt)("wrapper",(0,r.Z)({},m,i,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"formulation"},"Formulation"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Mapping the network of connection")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"http://www.youtube.com/watch?feature=player_embedded&v=6ZlBU6xTcfw"},(0,l.kt)("img",{alt:"3D tutorial: creation of a 3D distance graph amon cells.",src:n(13939).Z,width:"2274",height:"1640"}))),(0,l.kt)("h2",{id:"model-definition"},"Model Definition"),(0,l.kt)("p",null,"In this final step, we will display edges between cells that are within a given distance."),(0,l.kt)("h3",{id:"cells-update"},"Cells update"),(0,l.kt)("p",null,"We add a new reflex to collect the neighbors of the cell that are within a certain distance:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"species cells skills:[moving3D]{\n...\n    reflex compute_neighbors {\n        neighbors <- cells select ((each distance_to self) < 10);\n    }   \n}\n")),(0,l.kt)("p",null,"Then we update the cell aspect as follows. For each element (cells) of the ",(0,l.kt)("inlineCode",{parentName:"p"},"neighbors")," list, we draw a line between this neighbor's location and the current cell's location."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"aspect default {\n    draw sphere(environment_size*0.01) color: #orange;\n    loop pp over: neighbors {\n        draw line([self.location,pp.location]);\n    }   \n}\n")),(0,l.kt)("h2",{id:"complete-model"},"Complete Model"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-gaml",metastring:"reference",reference:!0},"https://github.com/gama-platform/gama/blob/master/msi.gama.models/models/Tutorials/3D/models/Model%2003.gaml\n")))}d.isMDXComponent=!0},13939:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/3D_model_3-f4cb0ac76b52df6f3c17f416a2ca8cbe.png"}}]);