"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[84173],{23024:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var n=o(85893),i=o(11151);const a={title:"6. Charts"},s=void 0,r={id:"RoadTrafficModel_step6",title:"6. Charts",description:"This 6th step illustrates how to display charts.",source:"@site/../docs/RoadTrafficModel_step6.md",sourceDirName:".",slug:"/RoadTrafficModel_step6",permalink:"/wiki/next/RoadTrafficModel_step6",draft:!1,unlisted:!1,editUrl:"https://github.com/gama-platform/gama/wiki/RoadTrafficModel_step6/_edit",tags:[],version:"current",frontMatter:{title:"6. Charts"},sidebar:"tuto",previous:{title:"5. Dynamic weights",permalink:"/wiki/next/RoadTrafficModel_step5"},next:{title:"7. Automatic Road Repair",permalink:"/wiki/next/RoadTrafficModel_step7"}},l={},c=[{value:"Formulation",id:"formulation",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"chart display",id:"chart-display",level:3},{value:"Complete Model",id:"complete-model",level:2}];function d(e){const t={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"This 6th step illustrates how to display charts."}),"\n",(0,n.jsx)(t.h2,{id:"formulation",children:"Formulation"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Add a chart to display the evolution of the road destruction: the mean value of the ",(0,n.jsx)(t.code,{children:"destruction_coeff"})," of the ",(0,n.jsx)(t.code,{children:"road"})," agents, and its max value (refreshed every 10 simulation steps)."]}),"\n",(0,n.jsxs)(t.li,{children:["Add a chart to display the activity of the ",(0,n.jsx)(t.code,{children:"people"})," agent (working or staying home, refreshed every 10 simulation steps)."]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"model-definition",children:"Model Definition"}),"\n",(0,n.jsx)(t.h3,{id:"chart-display",children:"chart display"}),"\n",(0,n.jsxs)(t.p,{children:["First, we add a chart of type ",(0,n.jsx)(t.strong,{children:(0,n.jsx)(t.code,{children:"series"})})," to display the road destruction evolution. To compute the mean of the ",(0,n.jsx)(t.code,{children:"destruction_coeff"}),", we combine the ",(0,n.jsx)(t.strong,{children:"mean"})," and ",(0,n.jsx)(t.strong,{children:(0,n.jsx)(t.code,{children:"collect"})})," operators. ",(0,n.jsx)(t.code,{children:"collect"})," takes a container and an expression as operands and will compute a new list, each element being the evaluation on the container operand of the expression. ",(0,n.jsx)(t.code,{children:"mean"})," computes the average of all the elements of a list. For the max, we use the ",(0,n.jsx)(t.strong,{children:(0,n.jsx)(t.code,{children:"max_of"})})," operator. (Note that the operator ",(0,n.jsx)(t.code,{children:"mean_of"})," also exists to replace ",(0,n.jsx)(t.code,{children:"mean"})," and ",(0,n.jsx)(t.code,{children:"collect"}),")."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'     output {\n         display chart_display refresh:every(10#cycles) {\n             chart "Road Status" type: series size: {1, 0.5} position: {0, 0} {\n                 data "Mean road destruction" value: mean (road collect each.destruction_coeff) style: line color: #green ;\n\t         data "Max road destruction" value: road max_of each.destruction_coeff style: line color: #red ;\n\t     }\n             ...\n         }\n     }\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Second, we add a chart of type ",(0,n.jsx)(t.strong,{children:(0,n.jsx)(t.code,{children:"pie"})})," to display the activity of the ",(0,n.jsx)(t.code,{children:"people"})," agents. We use for that the ",(0,n.jsx)(t.code,{children:"objective"})," variable of the ",(0,n.jsx)(t.code,{children:"people"})," agents and the ",(0,n.jsx)(t.strong,{children:(0,n.jsx)(t.code,{children:"count"})})," operator that allows computing the number of elements of a list that verify a condition."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'    output {\n      ...\n      display chart_display refresh: every(10#cycles) {\n          ...\n          chart "People Objectif" type: pie style: exploded size: {1, 0.5} position: {0, 0.5}{\n\t       data "Working" value: people count (each.objective="working") color: #magenta ;\n\t       data "Resting" value: people count (each.objective="resting") color: #blue ;\n\t  }\n     }\n   }\n'})}),"\n",(0,n.jsxs)(t.p,{children:["We chose to display the 2 charts on the same display. As a consequence, we specified the ",(0,n.jsx)(t.code,{children:"size"})," and ",(0,n.jsx)(t.code,{children:"position"})," of each of them to define the layout of this display."]}),"\n",(0,n.jsx)(t.h2,{id:"complete-model",children:"Complete Model"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-gaml",metastring:"reference",children:"https://github.com/gama-platform/gama/blob/GAMA_1.9.2/msi.gama.models/models/Tutorials/Road%20Traffic/models/Model%2006.gaml\n"})})]})}function h(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},11151:(e,t,o)=>{o.d(t,{Z:()=>r,a:()=>s});var n=o(67294);const i={},a=n.createContext(i);function s(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);