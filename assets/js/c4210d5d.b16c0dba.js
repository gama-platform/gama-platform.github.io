"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[19532],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=o.createContext({}),s=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return o.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},f=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=s(n),f=a,h=c["".concat(p,".").concat(f)]||c[f]||m[f]||r;return n?o.createElement(h,i(i({ref:t},d),{},{components:n})):o.createElement(h,i({ref:t},d))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=f;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<r;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}f.displayName="MDXCreateElement"},51631:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>p,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var o=n(87462),a=n(63366),r=(n(67294),n(3905)),i=["components"],l={title:"5. Dynamic weights"},p=void 0,s={unversionedId:"RoadTrafficModel_step5",id:"version-1.8.2-RC2/RoadTrafficModel_step5",title:"5. Dynamic weights",description:"This 5th step illustrates how to obtain the shortest path from a point to another one and to update the weights of an existing graph.",source:"@site/versioned_docs/version-1.8.2-RC2/RoadTrafficModel_step5.md",sourceDirName:".",slug:"/RoadTrafficModel_step5",permalink:"/wiki/1.8.2-RC2/RoadTrafficModel_step5",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/RoadTrafficModel_step5/_edit",tags:[],version:"1.8.2-RC2",frontMatter:{title:"5. Dynamic weights"},sidebar:"tuto",previous:{title:"4. Weight for Road Network",permalink:"/wiki/1.8.2-RC2/RoadTrafficModel_step4"},next:{title:"6. Charts",permalink:"/wiki/1.8.2-RC2/RoadTrafficModel_step6"}},d={},c=[{value:"Formulation",id:"formulation",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"global section",id:"global-section",level:3},{value:"people agents",id:"people-agents",level:3},{value:"Complete Model",id:"complete-model",level:2}],m={toc:c},f="wrapper";function h(e){var t=e.components,n=(0,a.Z)(e,i);return(0,r.kt)(f,(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This 5th step illustrates how to obtain the shortest path from a point to another one and to update the weights of an existing graph."),(0,r.kt)("h2",{id:"formulation"},"Formulation"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"At initialization, the value of the ",(0,r.kt)("inlineCode",{parentName:"li"},"destruction_coeff")," of the ",(0,r.kt)("inlineCode",{parentName:"li"},"road")," agents will be equal to 1."),(0,r.kt)("li",{parentName:"ul"},"Add a new parameter: the ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"destroy"))," parameter that represents the value of destruction when a people agent takes a road. By default, it is equal to 0.02."),(0,r.kt)("li",{parentName:"ul"},"When a people agent arrive at its destination (home or work), it updates the ",(0,r.kt)("inlineCode",{parentName:"li"},"destruction_coeff")," of the ",(0,r.kt)("inlineCode",{parentName:"li"},"road"),' agents it took to reach its destination:  "destruction',"_","coeff = destruction","_",'coeff - destroy". Then, the graph is updated.')),(0,r.kt)("h2",{id:"model-definition"},"Model Definition"),(0,r.kt)("h3",{id:"global-section"},"global section"),(0,r.kt)("p",null,"We add the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"destroy"))," parameter."),(0,r.kt)("p",null,"In the global section, we define the ",(0,r.kt)("inlineCode",{parentName:"p"},"destroy")," variable:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"float destroy <- 0.02;\n")),(0,r.kt)("p",null,"In the experiment section, we add a parameter:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'parameter "Value of destruction when a people agent takes a road" var: destroy category: "Road" ;\n')),(0,r.kt)("p",null,"We define a new reflex that updates the graph at each simulation step. For that, we use the ",(0,r.kt)("inlineCode",{parentName:"p"},"with_weights")," operator. This operator allows to update the weights of an existing graph."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"global {\n    ...\n    reflex update_graph{\n        map<road,float> weights_map <- road as_map (each:: (each.destruction_coeff * each.shape.perimeter));\n        the_graph <- the_graph with_weights weights_map;\n     }\n}\n")),(0,r.kt)("h3",{id:"people-agents"},"people agents"),(0,r.kt)("p",null,"At each time-step, after a ",(0,r.kt)("inlineCode",{parentName:"p"},"people")," agent has moved over one or multiple road segments, it updates the value of the destruction coefficient of ",(0,r.kt)("inlineCode",{parentName:"p"},"road")," agents crossed (i.e. roads belonging to the path followed). We have for that to set the argument ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"return_path"))," to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"goto")," action to obtain the path followed, then to compute the list of agents concerned by this path with the operator ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"agent_from_geometry")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"species people skills: [moving]{\n    ...\n    reflex move when: the_target != nil {\n    path path_followed <- goto(target: the_target, on:the_graph, return_path: true);\n    list<geometry> segments <- path_followed.segments;\n    loop line over: segments {\n        float dist <- line.perimeter;\n        ask road(path_followed agent_from_geometry line) { \n        destruction_coeff <- destruction_coeff + (destroy * dist / shape.perimeter);\n        }\n    }\n    if the_target = location {\n        the_target <- nil ;\n    }\n    }\n    ...\n}   \n")),(0,r.kt)("h2",{id:"complete-model"},"Complete Model"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-gaml",metastring:"reference",reference:!0},"https://github.com/gama-platform/gama/blob/GAMA_1.8.2/msi.gama.models/models/Tutorials/Road%20Traffic/models/Model%2005.gaml\n")))}h.isMDXComponent=!0}}]);