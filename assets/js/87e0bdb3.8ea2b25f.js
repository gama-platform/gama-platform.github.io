"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[46516],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),m=o,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||a;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},88930:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>f,frontMatter:()=>l,metadata:()=>c,toc:()=>p});var r=n(87462),o=n(63366),a=(n(67294),n(3905)),i=["components"],l={title:"Units and constants"},s=void 0,c={unversionedId:"UnitsAndConstants",id:"UnitsAndConstants",title:"Units and constants",description:"----",source:"@site/../docs/UnitsAndConstants.md",sourceDirName:".",slug:"/UnitsAndConstants",permalink:"/wiki/next/UnitsAndConstants",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/UnitsAndConstants/_edit",tags:[],version:"current",frontMatter:{title:"Units and constants"},sidebar:"side",previous:{title:"Literals",permalink:"/wiki/next/Literals"},next:{title:"Pseudo-variables",permalink:"/wiki/next/PseudoVariables"}},u={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Colors",id:"colors",level:2}],d={toc:p},m="wrapper";function f(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)(m,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("hr",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"This file is automatically generated from java files. Do Not Edit It.")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"Units can be used to qualify the values of numeric variables. By default, unqualified values are considered as:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"meters for distances, lengths..."),(0,a.kt)("li",{parentName:"ul"},"seconds for durations"),(0,a.kt)("li",{parentName:"ul"},"cubic meters for volumes"),(0,a.kt)("li",{parentName:"ul"},"kilograms for masses ")),(0,a.kt)("p",null,"So, an expression like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"float foo <- 1;\n")),(0,a.kt)("p",null,"will be considered as 1 meter if ",(0,a.kt)("inlineCode",{parentName:"p"},"foo")," is a distance, or 1 second if it is a duration, or 1 meter/second if it is a speed. If one wants to specify the unit, it can be done very simply by adding the unit symbol (\xb0 or ",(0,a.kt)("inlineCode",{parentName:"p"},"#"),") followed by an unit name after the numeric value, like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"float foo <- 1 \xb0centimeter;\n")),(0,a.kt)("p",null,"or"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"float foo <- 1 #centimeter;\n")),(0,a.kt)("p",null,"In that case, the numeric value of ",(0,a.kt)("inlineCode",{parentName:"p"},"foo")," will be automatically translated to 0.01 (meter). It is recommended to always use float as the type of the variables that might be qualified by units (otherwise, for example in the previous case, they might be truncated to 0).\nSeveral units names are allowed as qualifiers of numeric variables.\nThese units represent the basic metric and US units. Composed and derived units (like velocity, acceleration, special volumes or surfaces) can be obtained by combining these units using the ",(0,a.kt)("inlineCode",{parentName:"p"},"*")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"/")," operators. For instance:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"float one_kmh <- 1 \xb0km / \xb0h const: true;\nfloat one_millisecond <-1 \xb0sec / 1000;\nfloat one_cubic_inch <- 1 \xb0sqin * 1 \xb0inch;\n... etc ...\n")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"colors"},"Colors"),(0,a.kt)("p",null,"In addition to the previous units, GAML provides a direct access to the 147 named colors defined in CSS (see ",(0,a.kt)("a",{parentName:"p",href:"http://www.cssportal.com/css3-color-names/"},"http://www.cssportal.com/css3-color-names/"),"). E.g,"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"rgb my_color <- \xb0teal;\n")))}f.isMDXComponent=!0}}]);