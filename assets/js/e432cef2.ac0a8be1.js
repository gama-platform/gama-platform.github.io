"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[57195],{74550:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var s=t(74848),a=t(28453);const r={title:"Calling gama from another program"},i=void 0,o={id:"HeadlessTutorial",title:"Calling gama from another program",description:"This tutorial presents an example for using Headless. The tutorial shows how to use Headless Legacy mode, Headless batch and Headless server.",source:"@site/versioned_docs/version-1.9.2/HeadlessTutorial.md",sourceDirName:".",slug:"/HeadlessTutorial",permalink:"/wiki/1.9.2/HeadlessTutorial",draft:!1,unlisted:!1,editUrl:"https://github.com/gama-platform/gama/wiki/HeadlessTutorial/_edit",tags:[],version:"1.9.2",frontMatter:{title:"Calling gama from another program"},sidebar:"main",previous:{title:"Headless mode for dummies",permalink:"/wiki/1.9.2/Headless-mode-for-dummies"},next:{title:"Writing Unit Tests in GAML",permalink:"/wiki/1.9.2/Writing_Tests"}},l={},p=[{value:"1. Example using python with Headless legacy",id:"1-example-using-python-with-headless-legacy",level:2},{value:"2. Example on using python with Headless batch",id:"2-example-on-using-python-with-headless-batch",level:2},{value:"3. Example on using python with Headless server",id:"3-example-on-using-python-with-headless-server",level:2},{value:"Start the GAMA server",id:"start-the-gama-server",level:3},{value:"Use the Python wrapper instead",id:"use-the-python-wrapper-instead",level:3},{value:"Bare minimum code",id:"bare-minimum-code",level:3},{value:"It gets even better !",id:"it-gets-even-better-",level:3},{value:"Sample python script",id:"sample-python-script",level:4}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"This tutorial presents an example for using Headless. The tutorial shows how to use Headless Legacy mode, Headless batch and Headless server.\nAll the files related to this tutorial (images and models) are available in the Headless folder (headless/samples/predatorPrey)."}),"\n",(0,s.jsx)(n.h2,{id:"1-example-using-python-with-headless-legacy",children:"1. Example using python with Headless legacy"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import os\n\nGAMA_folder_with_SDK = r"D:\\software\\GAMA_1.9.2_Windows_with_JDK\\headless"\n\nModel_file = GAMA_folder_with_SDK + r"\\samples\\predatorPrey\\predatorPrey.gaml"\n\nExperimentName = "prey_predator"\nXML_file = GAMA_folder_with_SDK + r"\\samples\\predatorPrey.xml"\nOutput_folder = GAMA_folder_with_SDK + r"\\samples\\predatorPrey"\n\nos.chdir(GAMA_folder_with_SDK)\nos.system("gama-headless.bat -xml " + ExperimentName + " " + Model_file + " " + XML_file)\nos.system("gama-headless.bat " + XML_file + " "+ Output_folder)\nprint("Results of the model is in the folder:" + Output_folder)\nprint("Snapshot is store in the folder:" + Output_folder + r"\\snapshot")\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The results of the experiment is stored in the set folder. In which the snapshot for every step is also saved in the snapshot folder.\n",(0,s.jsx)(n.img,{src:"https://user-images.githubusercontent.com/11825516/232184826-53d83320-6cc2-4025-b619-632eb10739d2.png",alt:"Snapshot folder of Headless legacy"})]}),"\n",(0,s.jsx)(n.h2,{id:"2-example-on-using-python-with-headless-batch",children:"2. Example on using python with Headless batch"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import os\nGAMA_folder_with_SDK = r"D:\\software\\GAMA_1.9.2_Windows_with_JDK\\headless"\n\nModel_file = GAMA_folder_with_SDK + r"\\samples\\predatorPrey\\predatorPrey.gaml"\n\nExperimentName = "Optimization"\n\nos.chdir(GAMA_folder_with_SDK)\nos.system("gama-headless.bat -batch " + ExperimentName + " " + Model_file)\n\nprint("The result is store in the file:" + GAMA_folder_with_SDK + r"\\samples\\predatorPrey\\results.csv")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"3-example-on-using-python-with-headless-server",children:"3. Example on using python with Headless server"}),"\n",(0,s.jsxs)(n.p,{children:["The legacy version allows you to access the headless feature of GAMA by controling the model parameters and experiment plan from oustide GAMA model file . The headless batch, allows you to access the headless feature of GAMA with the model parameters and experiment plans defined inside the GAMA model file. The headless server, allows you to not only to access the headless feature but also to interact with the currently running GAMA experiment. You can load, play, pause, reload, stop and exit an experiment with very specific commands as described ",(0,s.jsx)(n.a,{href:"https://github.com/gama-platform/gama/wiki/HeadlessServer#available-commands",children:"here"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"The general sequence of operations is:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Start the server from a command line ",(0,s.jsx)(n.code,{children:"gama-headless.sh -socket 6868"})," , this opens the communication via port 6868 using websockets."]}),"\n",(0,s.jsx)(n.li,{children:"Connect to the server from another application/script that supports interacting with websockets. e.g., python. See below to use a python wrapper."}),"\n",(0,s.jsxs)(n.li,{children:["Start with the ",(0,s.jsx)(n.code,{children:"load"})," command to load an experiment and then use one of the specific commands as described ",(0,s.jsx)(n.a,{href:"https://github.com/gama-platform/gama/wiki/HeadlessServer#available-commands",children:"here"})," to construct a sequence of operations as required by your workflow."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"start-the-gama-server",children:"Start the GAMA server"}),"\n",(0,s.jsx)(n.p,{children:"On your command line, execute the following commmand, you will find the gama-headless.sh in the headless folder inside your GAMA installation."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"gama-headless.sh -socket 6868\n"})}),"\n",(0,s.jsx)(n.h3,{id:"use-the-python-wrapper-instead",children:"Use the Python wrapper instead"}),"\n",(0,s.jsxs)(n.p,{children:["The GAMA developers have made available an elegant python wrapper that simplifies using GAMA server with python scripts and is available ",(0,s.jsx)(n.a,{href:"https://github.com/gama-platform/Gama-client-python",children:"here"}),". However if you are not a serious programmer and just want to use this tool, the following bare minimum code shall get you started and you can slowly add one command after another to build your sequence of operations to interact with the GAMA server. Before you can start, you have to install the wrapper. In your python environment, install the ",(0,s.jsx)(n.strong,{children:"gama-client"})," package with the command:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"pip install gama-client"})}),"\n",(0,s.jsx)(n.p,{children:"You can check that everything went well by opening a python console and try the following line:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"from gama_client.base_client import GamaBaseClient"})}),"\n",(0,s.jsx)(n.p,{children:"If you don't see any error messages, then the python wrapper has been installed correctly."}),"\n",(0,s.jsx)(n.h3,{id:"bare-minimum-code",children:"Bare minimum code"}),"\n",(0,s.jsxs)(n.p,{children:["The whole interaction with the GAMA server is facilitated using the ",(0,s.jsx)(n.code,{children:"asyncio"})," library in Python and our wrapper that we installed in the previous step. The discussion on use of asyncio is beyond the scope of this tutorial, so just take it as granted. This whole interaction can be considered a dialouge (two way communication) between the client (you/ your script) and the server (GAMA server). You send a command to the server, and the server sends back a message. You parse this message and its contents and construct the next command to interact with the server. This back and forth continues untill you use the ",(0,s.jsx)(n.code,{children:"exit"})," command or if an error occurs on the server."]}),"\n",(0,s.jsxs)(n.p,{children:["Among all the messages sent by the server, as a beginner you should know about these four main messages: ",(0,s.jsx)(n.code,{children:"ConnectionSuccessful"})," (you connected to the server), ",(0,s.jsx)(n.code,{children:"CommandExecutedSuccessfully"})," (your command was well received and executed), ",(0,s.jsx)(n.code,{children:"UnableToExecuteRequest"})," (something is wrong with your model), ",(0,s.jsx)(n.code,{children:"MalformedRequest"})," (something is wrong with your command format)"]}),"\n",(0,s.jsx)(n.p,{children:"Just run the following python script and if all goes well, you are ready to use the GAMA server via python."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'\nimport asyncio\nfrom gama_client.base_client import GamaBaseClient\n\nasync def message_handler(message):\n    print("received message:", message)\n\n\nasync def main():\n    client = GamaBaseClient("localhost", 6868, message_handler)\n    await client.connect(False)\n\n    while True:\n        await asyncio.sleep(1)\n\nif __name__ == "__main__":\n    asyncio.run(main())\n'})}),"\n",(0,s.jsx)(n.h3,{id:"it-gets-even-better-",children:"It gets even better !"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"A word of caution"}),"\nIt is recommended that you slowly build on to the above script by adding ",(0,s.jsx)(n.a,{href:"https://github.com/gama-platform/gama/wiki/HeadlessServer#available-commands",children:"commands"})," step by step. You may use the script below as guidance to learn and to stay on course and not having to search a lot through the documentation. Blindly copy-pasting  the code and changing the parameters without understanding is not advised."]}),"\n",(0,s.jsx)(n.p,{children:"The python wrapper makes it even easier for beginners. So easy that you just have to change values of the following 5 variables in the sample python script below to make use of GAMA server."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'    MY_SERVER_URL = "localhost"\n    MY_SERVER_PORT = 6868\n    GAML_FILE_PATH_ON_SERVER = r"D:\\Gama\\headless\\samples\\predatorPrey\\predatorPrey.gaml"  \n    EXPERIMENT_NAME = "prey_predatorExp"\n    MY_EXP_INIT_PARAMETERS = [{"type": "int", "name": "nb_preys_init", "value": 100}]\n'})}),"\n",(0,s.jsx)(n.h4,{id:"sample-python-script",children:"Sample python script"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import asyncio\nfrom asyncio import Future\nfrom typing import Dict\n\nfrom gama_client.base_client import GamaBaseClient\nfrom gama_client.command_types import CommandTypes\nfrom gama_client.message_types import MessageTypes\n\nexperiment_future: Future\nplay_future: Future\npause_future: Future\nexpression_future: Future\nstep_future: Future\nstop_future: Future\n\n\nasync def message_handler(message: Dict):\n    print("received", message)\n    if "command" in message:\n        if message["command"]["type"] == CommandTypes.Load.value:\n            experiment_future.set_result(message)\n        elif message["command"]["type"] == CommandTypes.Play.value:\n            play_future.set_result(message)\n        elif message["command"]["type"] == CommandTypes.Pause.value:\n            pause_future.set_result(message)\n        elif message["command"]["type"] == CommandTypes.Expression.value:\n            expression_future.set_result(message)\n        elif message["command"]["type"] == CommandTypes.Step.value:\n            step_future.set_result(message)\n        elif message["command"]["type"] == CommandTypes.Stop.value:\n            stop_future.set_result(message)\n\n\nasync def main():\n\n    global experiment_future\n    global play_future\n    global pause_future\n    global expression_future\n    global step_future\n    global stop_future\n\n    # Experiment and Gama-server constants\n    MY_SERVER_URL = "localhost"\n    MY_SERVER_PORT = 6868\n    GAML_FILE_PATH_ON_SERVER = r"D:\\Gama\\headless\\samples\\predatorPrey\\predatorPrey.gaml"\n    EXPERIMENT_NAME = "prey_predatorExp"\n    MY_EXP_INIT_PARAMETERS = [{"type": "int", "name": "nb_preys_init", "value": 100}]\n\n    client = GamaBaseClient(MY_SERVER_URL, MY_SERVER_PORT, message_handler)\n\n    print("connecting to Gama server")\n    await client.connect()\n\n    print("initialize a gaml model")\n    experiment_future = asyncio.get_running_loop().create_future()\n    await client.load(GAML_FILE_PATH_ON_SERVER, EXPERIMENT_NAME, True, True, True, MY_EXP_INIT_PARAMETERS)\n    gama_response = await experiment_future\n\n    try:\n        experiment_id = gama_response["content"]\n    except Exception as e:\n        print("error while initializing", gama_response, e)\n        return\n\n    print("initialization successful, running the model")\n    play_future = asyncio.get_running_loop().create_future()\n    await client.play(experiment_id)\n    gama_response = await play_future\n    if gama_response["type"] != MessageTypes.CommandExecutedSuccessfully.value:\n        print("error while trying to run the experiment", gama_response)\n        return\n\n    print("model running, waiting a bit")\n    await asyncio.sleep(2)\n\n    print("pausing the model")\n    pause_future = asyncio.get_running_loop().create_future()\n    await client.pause(experiment_id)\n    gama_response = await pause_future\n    if gama_response["type"] != MessageTypes.CommandExecutedSuccessfully.value:\n        print("Unable to pause the experiment", gama_response)\n        return\n\n    expression_future = asyncio.get_running_loop().create_future()\n    await client.expression(experiment_id, r"cycle")\n    gama_response = await expression_future\n    print("asking simulation the value of: cycle=", gama_response["content"])\n\n    expression_future = asyncio.get_running_loop().create_future()\n    await client.expression(experiment_id, r"nb_preys/nb_preys_init")\n    gama_response = await expression_future\n    print("asking simulation the value of: nb_preys/nb_preys_init=",  gama_response["content"])\n\n    print("asking gama to run 10 more steps of the experiment")\n    step_future = asyncio.get_running_loop().create_future()\n    await client.step(experiment_id, 10, True)\n    gama_response = await step_future\n    if gama_response["type"] != MessageTypes.CommandExecutedSuccessfully.value:\n        print("Unable to execute 10 new steps in the experiment", gama_response)\n        return\n\n    expression_future = asyncio.get_running_loop().create_future()\n    await client.expression(experiment_id, r"cycle")\n    gama_response = await expression_future\n    print("asking simulation the value of: cycle=", gama_response["content"])\n\n    print("killing the simulation")\n    stop_future = asyncio.get_running_loop().create_future()\n    await client.stop(experiment_id)\n    gama_response = await stop_future\n    if gama_response["type"] != MessageTypes.CommandExecutedSuccessfully.value:\n        print("Unable to stop the experiment", gama_response)\n        return\n\n\nif __name__ == "__main__":\n    asyncio.run(main())\n'})})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var s=t(96540);const a={},r=s.createContext(a);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);