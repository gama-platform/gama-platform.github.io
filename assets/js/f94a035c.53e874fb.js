"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3893],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),m=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=m(e.components);return a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=m(t),h=r,u=c["".concat(l,".").concat(h)]||c[h]||d[h]||o;return t?a.createElement(u,i(i({ref:n},p),{},{components:t})):a.createElement(u,i({ref:n},p))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=c;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var m=2;m<o;m++)i[m]=t[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},40447:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>m,toc:()=>d});var a=t(87462),r=t(63366),o=(t(67294),t(3905)),i=["components"],s={title:"Headless Server"},l=void 0,m={unversionedId:"HeadlessServer",id:"HeadlessServer",title:"Headless Server",description:"Running a Gama Headless server:",source:"@site/../docs/HeadlessServer.md",sourceDirName:".",slug:"/HeadlessServer",permalink:"/wiki/next/HeadlessServer",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/HeadlessServer/_edit",tags:[],version:"current",frontMatter:{title:"Headless Server"},sidebar:"side",previous:{title:"Headless Batch",permalink:"/wiki/next/HeadlessBatch"},next:{title:"Preferences",permalink:"/wiki/next/Preferences"}},p={},d=[{value:"Running a Gama Headless server:",id:"running-a-gama-headless-server",level:2},{value:"From the release",id:"from-the-release",level:3},{value:"From the command-line tool",id:"from-the-command-line-tool",level:3},{value:"From the source code",id:"from-the-source-code",level:3},{value:"Connection",id:"connection",level:2},{value:"General description of interactions",id:"general-description-of-interactions",level:2},{value:"API description",id:"api-description",level:2},{value:"Available commands",id:"available-commands",level:3},{value:"The <code>exit</code> command",id:"the-exit-command",level:4},{value:"Answer from gama-server",id:"answer-from-gama-server",level:5},{value:"The <code>load</code> command",id:"the-load-command",level:4},{value:"Answer from gama-server",id:"answer-from-gama-server-1",level:5},{value:"The <code>play</code> command",id:"the-play-command",level:4},{value:"Answer from gama-server",id:"answer-from-gama-server-2",level:5},{value:"The <code>pause</code> command",id:"the-pause-command",level:4},{value:"Answer from gama-server",id:"answer-from-gama-server-3",level:5},{value:"The <code>step</code> command",id:"the-step-command",level:4},{value:"Answer from gama-server",id:"answer-from-gama-server-4",level:5},{value:"The <code>stepBack</code> command",id:"the-stepback-command",level:4},{value:"Answer from gama-server",id:"answer-from-gama-server-5",level:5},{value:"The <code>stop</code> command",id:"the-stop-command",level:4},{value:"Answer from gama-server",id:"answer-from-gama-server-6",level:5},{value:"The <code>reload</code> command",id:"the-reload-command",level:4},{value:"Answer from gama-server",id:"answer-from-gama-server-7",level:5},{value:"The <code>expression</code> command",id:"the-expression-command",level:4},{value:"Answer from gama-server",id:"answer-from-gama-server-8",level:5},{value:"The <code>output</code> command",id:"the-output-command",level:3},{value:"Answer from gama-server",id:"answer-from-gama-server-9",level:5},{value:"Gama-server messages",id:"gama-server-messages",level:3},{value:"Command answers",id:"command-answers",level:4},{value:"errors and exceptions",id:"errors-and-exceptions",level:4},{value:"Simulations outputs",id:"simulations-outputs",level:4},{value:"Python wrapper",id:"python-wrapper",level:2},{value:"Javascript Client",id:"javascript-client",level:2},{value:"Hello World Visualization in MapBox",id:"hello-world-visualization-in-mapbox",level:3},{value:"Hello World Message example",id:"hello-world-message-example",level:3}],c={toc:d};function h(e){var n=e.components,t=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"running-a-gama-headless-server"},"Running a Gama Headless server:"),(0,o.kt)("h3",{id:"from-the-release"},"From the release"),(0,o.kt)("p",null,"Go to the ",(0,o.kt)("inlineCode",{parentName:"p"},"headless")," directory in your Gama installation folder and run the script ",(0,o.kt)("inlineCode",{parentName:"p"},"gama-headless.sh")," (or ",(0,o.kt)("inlineCode",{parentName:"p"},"gama-headless.bat"),") with the argument ",(0,o.kt)("inlineCode",{parentName:"p"},"-socket")," followed by the port number you want your Gama server to run on."),(0,o.kt)("p",null,"For example on Mac OS you could do:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd Gama.app/Contents/headless\n")),(0,o.kt)("p",null,"to move to the right directory, then run the script to listen on port ",(0,o.kt)("inlineCode",{parentName:"p"},"6868")," with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"gama-headless.sh -socket 6868\n")),(0,o.kt)("h3",{id:"from-the-command-line-tool"},"From the command-line tool"),(0,o.kt)("p",null,"The users who installed gama through a ",(0,o.kt)("inlineCode",{parentName:"p"},".deb")," file or ",(0,o.kt)("inlineCode",{parentName:"p"},"aur")," have access to the command ",(0,o.kt)("inlineCode",{parentName:"p"},"gama-headless")," and thus only need to open a terminal and run "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"gama-headless -socket 6868\n")),(0,o.kt)("p",null,"to run a Gama server on the port ",(0,o.kt)("inlineCode",{parentName:"p"},"6868"),". "),(0,o.kt)("h3",{id:"from-the-source-code"},"From the source code"),(0,o.kt)("p",null,"In Eclipse, instantiate a headless server by running ",(0,o.kt)("inlineCode",{parentName:"p"},"msi.gama.headless.id4_full")," with the following argument ",(0,o.kt)("inlineCode",{parentName:"p"},"-os ${target.os} -ws ${target.ws} -arch ${target.arch} -nl ${target.nl} -socket 6868")," (you can specify any other port)"),(0,o.kt)("h2",{id:"connection"},"Connection"),(0,o.kt)("p",null,"To connect to gama-server as a client you just need to access the following address: ",(0,o.kt)("inlineCode",{parentName:"p"},"ws://<ip>:<port>"),". For example if you try to connect to a gama-server running on your current computer and started with the command ",(0,o.kt)("inlineCode",{parentName:"p"},"gama-headless -socket 6868"),", you will have to connect to ",(0,o.kt)("inlineCode",{parentName:"p"},"ws://localhost:6868"),"."),(0,o.kt)("p",null,"Once a client is connected, gama-server will send a connection object containing the ",(0,o.kt)("inlineCode",{parentName:"p"},"socket_id"),", it is used to represents the current connection. It must be saved by the client and reused in every command sent to gama-server."),(0,o.kt)("h2",{id:"general-description-of-interactions"},"General description of interactions"),(0,o.kt)("p",null,"Once connected, you can ask gama-server to execute different commands to control the execution of different simulations. "),(0,o.kt)("p",null,"If you close your client application (or just close the socket on client-side) ",(0,o.kt)("strong",{parentName:"p"},"gama-server will destroy all running simulations")," of that client, so you have to keep your client alive. "),(0,o.kt)("p",null,"For every command treated by gama-server, it will send back a json object describing if the command has been executed correctly or if there was a problem. If an unexpected exception is raised in gama-server, it will try to send the connected clients a json-object describing it.\nThe same goes if a simulation throws an exception/error while running, the client that asked for it to run will receive it as a json-object. "),(0,o.kt)("p",null,"In addition, the client can ask gama-server to receive (or not) the different outputs of a simulation: ",(0,o.kt)("inlineCode",{parentName:"p"},"write")," statements, dialogs, status-bar changes etc. they will be sent as they come, in a specific json wrapper."),(0,o.kt)("h2",{id:"api-description"},"API description"),(0,o.kt)("h3",{id:"available-commands"},"Available commands"),(0,o.kt)("p",null,"All the commands sent to gama-server must be formatted as a ",(0,o.kt)("inlineCode",{parentName:"p"},"json")," object. "),(0,o.kt)("p",null,"The available commands are:"),(0,o.kt)("h4",{id:"the-exit-command"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"exit")," command"),(0,o.kt)("p",null,"This command is used to kill gama-server.\nIt is triggered by sending a json object formatted as follows to the server"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "exit"\n}\n')),(0,o.kt)("h5",{id:"answer-from-gama-server"},"Answer from gama-server"),(0,o.kt)("p",null,"It is the only command that won't send back a json object and do not need a ",(0,o.kt)("inlineCode",{parentName:"p"},"socket_id"),"."),(0,o.kt)("h4",{id:"the-load-command"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"load")," command"),(0,o.kt)("p",null,"This command is used to ask the server to initialize a specific experiment in a gaml file on the server's file-system.\nIt is triggered by sending a json object formatted as follows to the server:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'{\n  "type": "load",\n  "socket_id": "<socket_id>",\n  "model": "<gaml_file_path>",\n  "experiment": "<experiment_name>",\n  "console": "<console>", //optional\n  "status": "<status>", //optional\n  "dialog": "<dialog>", //optional\n  "parameters": "<params>", //optional\n  "until": "<end_condition>" //optional\n}\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"model")," parameter indicates the path of the experiment file on the server's file-system, and ",(0,o.kt)("inlineCode",{parentName:"p"},"experiment")," is the actual name of the experiment to run.\nThe three parameters ",(0,o.kt)("inlineCode",{parentName:"p"},"console"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"status")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"dialog")," are booleans used to set if the messages from respectively the console, the status-bar and the dialogs should be redirected to the client. They are optional as per default ",(0,o.kt)("inlineCode",{parentName:"p"},"console")," is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," and the two others to ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),".\nYou can add an array of parameters that will be used to initialize the experiment's variables with the values you picked.\nThe value of ",(0,o.kt)("inlineCode",{parentName:"p"},"parameters")," should be formatted as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'[\n  {\n    "type": "<type of the first parameter>",\n    "value": "<value of the first parameter>",\n    "name": "<name of the first parameter in the gaml file>"\n  },\n  {\n    "type": "<type of the second parameter>",\n    "value": "<value of the second parameter>",\n    "name": "<name of the second parameter in the gaml file>"\n  },\n ...\n]\n')),(0,o.kt)("p",null,"You can also add an ending condition to your simulation with the parameter ",(0,o.kt)("inlineCode",{parentName:"p"},"until"),", the condition must be expressed in gaml."),(0,o.kt)("h5",{id:"answer-from-gama-server-1"},"Answer from gama-server"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"content")," field of the response json sent by gama-server after processing this command is formatted as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'"content": {"exp_id": "<the experiment id>"}\n')),(0,o.kt)("p",null,"The experiment id should be used in all the other commands to refer to that specific experiment in order to control it."),(0,o.kt)("h4",{id:"the-play-command"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"play")," command"),(0,o.kt)("p",null,"This command is used to actually run an experimented already initialized.\nIt is triggered by sending a json object formatted as follows to the server"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'{\n  "type": "play",\n  "socket_id": "<socket_id>",\n  "exp_id": "<experiment_id>",\n  "sync": "<synchronized>" //optional\n}\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"socket_id")," is used to identify the client, the ",(0,o.kt)("inlineCode",{parentName:"p"},"experiment_id")," to identify the experiment to play, and the optional ",(0,o.kt)("inlineCode",{parentName:"p"},"sync")," is a boolean used in the case where there was an end condition defined in the ",(0,o.kt)("inlineCode",{parentName:"p"},"load")," command, if it is true, gama-server will not send a response to the command, but only a end of simulation message once the condition is reached, if it's false gama-server will send both the response to the command and the end-condition-reached message."),(0,o.kt)("h5",{id:"answer-from-gama-server-2"},"Answer from gama-server"),(0,o.kt)("p",null,"This command has an empty ",(0,o.kt)("inlineCode",{parentName:"p"},"content")," field in the response json sent by gama-server after processing it.\nIn case where the end condition is reached, a message of type ",(0,o.kt)("inlineCode",{parentName:"p"},"SimulationEnded")," is sent to the client with an empty ",(0,o.kt)("inlineCode",{parentName:"p"},"content"),"."),(0,o.kt)("h4",{id:"the-pause-command"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"pause")," command"),(0,o.kt)("p",null,"This command is used to pause a running experiment.\nIt is triggered by sending a json object formatted as follows to the server"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "pause",\n  "socket_id": "<socket_id>",\n  "exp_id": "<experiment_id>"\n}\n')),(0,o.kt)("h5",{id:"answer-from-gama-server-3"},"Answer from gama-server"),(0,o.kt)("p",null,"This command has an empty ",(0,o.kt)("inlineCode",{parentName:"p"},"content")," field in the response json sent by gama-server after processing it."),(0,o.kt)("h4",{id:"the-step-command"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"step")," command"),(0,o.kt)("p",null,"This command is used to process one (or a defined number of) step(s) of a simulation that has already been loaded.\nIt is triggered by sending a json object formatted as follows to the server"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'{\n  "type": "step",\n  "socket_id": "<socket_id>",\n  "exp_id": "<experiment_id>",\n  "nb_step": "<number_of_steps>", //optional\n  "sync": "<synchronized>" // optional\n}\n')),(0,o.kt)("p",null,"As usual ",(0,o.kt)("inlineCode",{parentName:"p"},"socket_id")," refers to the id given at the client",(0,o.kt)("inlineCode",{parentName:"p"},"s connection, and "),"exp_id",(0,o.kt)("inlineCode",{parentName:"p"},"to the experiment you want to apply the command to. The"),"nb_step",(0,o.kt)("inlineCode",{parentName:"p"},"parameter indicates how many steps you want to execute, if you do not give that parameter gama-server will execute one step. The"),"sync",(0,o.kt)("inlineCode",{parentName:"p"},"parameter indicates whether gama-server must wait for the end of the step(s) to send back a success message (when its value is true), or just plan the step(s) and send one directly after (when its value is false), this parameter can be ignored and will be interpreted as if it were"),"false`. "),(0,o.kt)("h5",{id:"answer-from-gama-server-4"},"Answer from gama-server"),(0,o.kt)("p",null,"This command has an empty ",(0,o.kt)("inlineCode",{parentName:"p"},"content")," field in the response json sent by gama-server after processing it."),(0,o.kt)("h4",{id:"the-stepback-command"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"stepBack")," command"),(0,o.kt)("p",null,"This command is used to rollback the simulation one (or a defined number of) step(s) back. This command only works on experiments of type ",(0,o.kt)("inlineCode",{parentName:"p"},"memorize"),".\nIt is triggered by sending a json object formatted as follows to the server"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'{\n  "type": "stepBack",\n  "socket_id": "<socket_id>",\n  "exp_id": "<experiment_id>",\n  "nb_step": "<number_of_steps>", //optional\n  "sync": "<synchronized>" // optional\n}\n')),(0,o.kt)("p",null,"The parameters are exactly the same as in the ",(0,o.kt)("inlineCode",{parentName:"p"},"step")," command."),(0,o.kt)("h5",{id:"answer-from-gama-server-5"},"Answer from gama-server"),(0,o.kt)("p",null,"This command has an empty ",(0,o.kt)("inlineCode",{parentName:"p"},"content")," field in the response json sent by gama-server after processing it."),(0,o.kt)("h4",{id:"the-stop-command"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"stop")," command"),(0,o.kt)("p",null,"This command is used to stop (kill) a running experiment.\nIt is triggered by sending a json object formatted as follows to the server"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'{\n  "type": "stop",\n  "socket_id": "<socket_id>",\n  "exp_id": "<experiment_id>",\n}\n')),(0,o.kt)("h5",{id:"answer-from-gama-server-6"},"Answer from gama-server"),(0,o.kt)("p",null,"This command has an empty ",(0,o.kt)("inlineCode",{parentName:"p"},"content")," field in the response json sent by gama-server after processing it."),(0,o.kt)("h4",{id:"the-reload-command"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"reload")," command"),(0,o.kt)("p",null,"This command is used to reload an experiment. The experiment will be stop and the initialization process run again. You can use this command to change the simulation parameters or the ending condition.\nIt is triggered by sending a json object formatted as follows to the server"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'{\n  "type": "reload",\n  "socket_id": "<socket_id>",\n  "exp_id": "<experiment_id>",\n  "parameters": "<params>", //optional\n  "until": "<end_condition>" //optional\n}\n')),(0,o.kt)("p",null,"Just like for the ",(0,o.kt)("inlineCode",{parentName:"p"},"load")," command, the ",(0,o.kt)("inlineCode",{parentName:"p"},"parameters")," and the ",(0,o.kt)("inlineCode",{parentName:"p"},"until")," parameters are optional and must follow the same formatting."),(0,o.kt)("h5",{id:"answer-from-gama-server-7"},"Answer from gama-server"),(0,o.kt)("p",null,"This command has an empty ",(0,o.kt)("inlineCode",{parentName:"p"},"content")," field in the response json sent by gama-server after processing it."),(0,o.kt)("h4",{id:"the-expression-command"},"The ",(0,o.kt)("inlineCode",{parentName:"h4"},"expression")," command"),(0,o.kt)("p",null,"This command is used to ask the server to evaluate a ",(0,o.kt)("inlineCode",{parentName:"p"},"gaml")," expression having an experiment as context.",(0,o.kt)("br",{parentName:"p"}),"\n","It is triggered by sending a json object formatted as follows to the server"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'{\n  "type": "expression",\n  "socket_id": "<socket_id>",\n  "exp_id": "<experiment_id>",\n  "expr": "<expression to evaluate>"\n}\n')),(0,o.kt)("p",null,"For example if you want to know the number of agents of species ",(0,o.kt)("inlineCode",{parentName:"p"},"people")," currently present in the simulation represented by the id ",(0,o.kt)("inlineCode",{parentName:"p"},"123"),", you could send this command to gama-server:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'{\n  "type": "expression",\n  "socket_id": "<socket_id>",\n  "exp_id": "123",\n  "expr": "length(people)"\n}\n')),(0,o.kt)("h5",{id:"answer-from-gama-server-8"},"Answer from gama-server"),(0,o.kt)("p",null,"If the command is executed successfully by gama-server the ",(0,o.kt)("inlineCode",{parentName:"p"},"content")," field of the response json will look like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'"content": { "result": "<value of the expression>"}\n')),(0,o.kt)("h3",{id:"the-output-command"},"The ",(0,o.kt)("inlineCode",{parentName:"h3"},"output")," command"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"TODO")),(0,o.kt)("h5",{id:"answer-from-gama-server-9"},"Answer from gama-server"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"TODO")),(0,o.kt)("h3",{id:"gama-server-messages"},"Gama-server messages"),(0,o.kt)("h4",{id:"command-answers"},"Command answers"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"TODO")),(0,o.kt)("h4",{id:"errors-and-exceptions"},"errors and exceptions"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"TODO")),(0,o.kt)("h4",{id:"simulations-outputs"},"Simulations outputs"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"TODO")),(0,o.kt)("h2",{id:"python-wrapper"},"Python wrapper"),(0,o.kt)("p",null,"A python package is available to interact with Gama server as a client, you can find it ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/gama-platform/Gama-client-python"},"here"),". It will take care of formatting the queries to the server and receiving the answers. You simply have to install the package into your python environment with the command ",(0,o.kt)("inlineCode",{parentName:"p"},"pip install gama-client")," and then import ",(0,o.kt)("inlineCode",{parentName:"p"},"gama-client")," into your python files and instantiate a GamaClient object to start communicating with Gama server. For more informations follow the ",(0,o.kt)("inlineCode",{parentName:"p"},"README.md")," available on the package's github."),(0,o.kt)("p",null,"Here is an example python program using it to run a gaml file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import time\nimport gama_client\nimport asyncio\n\n\nasync def main():\n    MY_SERVER_URL = "localhost"\n    MY_SERVER_PORT = 6868\n    GAML_FILE_PATH_ON_SERVER = "/opt/gama-platform/headless/samples/predatorPrey/predatorPrey.gaml"\n    EXPERIMENT_NAME = "prey_predatorExp"\n\n    client = gama_client.GamaClient(MY_SERVER_URL, MY_SERVER_PORT)\n\n    print("connecting to Gama server")\n    await client.connect()\n\n    print("initialize a gaml model")\n    experiment_id = await client.init_experiment(GAML_FILE_PATH_ON_SERVER, EXPERIMENT_NAME)\n    if experiment_id == "":\n        print("error while initializing")\n        return\n\n    print("initialization successful, running the model")\n    playing = await client.play(experiment_id)\n    if not playing:\n        print("error while trying to run the experiment", experiment_id)\n        return\n\n    print("model running, waiting a bit")\n    time.sleep(3)\n\n    print("pausing the model")\n    if not await client.pause(experiment_id):\n        print("unable to pause the experiment", experiment_id)\n        return\n\n    print("asking simulation the value of: cycle=", await client.expression(experiment_id, r"cycle"))\n    print("asking simulation the value of: nb_preys/nb_preys_init=", await client.expression(experiment_id, r"nb_preys/nb_preys_init"))\n\nif __name__ == "__main__":\n    asyncio.run(main())\n\n')),(0,o.kt)("h2",{id:"javascript-client"},"Javascript Client"),(0,o.kt)("p",null,"The current javascript client version is being developed in this repository ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/gama-platform/gama.client"},"gama.client")),(0,o.kt)("h3",{id:"hello-world-visualization-in-mapbox"},"Hello World Visualization in MapBox"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Clone the repository ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/gama-platform/gama.client"},"gama.client")),(0,o.kt)("li",{parentName:"ul"},"In ",(0,o.kt)("inlineCode",{parentName:"li"},"Javascript/gama_client.js")," edit the following variable ",(0,o.kt)("inlineCode",{parentName:"li"},"ABSOLUTE_PATH_TO_GAMA")," to your local path (e.g ",(0,o.kt)("inlineCode",{parentName:"li"},"var ABSOLUTE_PATH_TO_GAMA = '/Users/arno/';")," "),(0,o.kt)("li",{parentName:"ul"},"open ",(0,o.kt)("inlineCode",{parentName:"li"},"Javascript/index.html"),"in a browser")),(0,o.kt)("h3",{id:"hello-world-message-example"},"Hello World Message example"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In ",(0,o.kt)("inlineCode",{parentName:"li"}," chain_messages.js")," edit the following variable ",(0,o.kt)("inlineCode",{parentName:"li"},"ABSOLUTE_PATH_TO_GAMA")," to your local path (e.g ",(0,o.kt)("inlineCode",{parentName:"li"},"var ABSOLUTE_PATH_TO_GAMA = '/Users/arno/';")," "),(0,o.kt)("li",{parentName:"ul"},"open ",(0,o.kt)("inlineCode",{parentName:"li"},"Javascript/message_example"),"in a browser")))}h.isMDXComponent=!0}}]);