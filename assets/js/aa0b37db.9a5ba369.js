"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[77849],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>u});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,u=d["".concat(p,".").concat(m)]||d[m]||g[m]||o;return n?r.createElement(u,i(i({ref:t},l),{},{components:n})):r.createElement(u,i({ref:t},l))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8178:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>u,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),i=["components"],s={"^title":"SpatialGraph3d"},p=void 0,c={unversionedId:"SpatialGraph3d",id:"SpatialGraph3d",title:"SpatialGraph3d",description:"Path: Library models/Toy Models/Multi-level Data Analysis/models/Graph From Bug (Mirror Graph).gaml",source:"@site/../docs/SpatialGraph3d.md",sourceDirName:".",slug:"/SpatialGraph3d",permalink:"/wiki/next/SpatialGraph3d",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/SpatialGraph3d/_edit",tags:[],version:"current",frontMatter:{"^title":"SpatialGraph3d"}},l={},d=[],g={toc:d},m="wrapper";function u(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)(m,(0,r.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("img",{width:"959",alt:"Annotation 2023-04-16 035911_GraphFrmBugMirror",src:"https://user-images.githubusercontent.com/4437331/232262266-1bedb1ee-c384-4558-86a6-8c64abf7597a.png"}),(0,o.kt)("p",null,"Path: Library models/Toy Models/Multi-level Data Analysis/models/Graph From Bug (Mirror Graph).gaml"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"\n/**\n* Name: SpatialGraph3d\n* Author: Arnaud Grignard\n* Description: From the reference model \"bug.gaml\" a spatial graph is created. \n*  We create a species node that mirrors the species bug and then a spatial graph is creating \n*  using as_distance_graph operator. The species node should then \n*  define its own related_to method to decide wether or not a node is related to another one.\n* Tags: graph, mirror, 3d\n*/\n\n\nmodel Graph\n\n//Import the model Common Bug Species model\nimport '../includes/Common Bug Species.gaml'\n\nglobal {\n    //Distance to link two bugs\n    int distance parameter: 'Distance' min: 1 <- 25 category: 'Model';\n    //variable to start the animation of the model\n    int startAnimation parameter: 'Start Animation ' min: 1 <- 25 category: 'Animation View';\n    //Variable to save the time animation\n    int timeAnim <- 0;\n    //Reflex to update the time of animation\n    reflex updateAnimation \n    {\n        if (time > startAnimation) \n        {\n            timeAnim <- int(time - startAnimation);\n        }\n    }\n}\n//Species node_agent mirroring the bug species, represented as graph node\nspecies node_agent mirrors: list(bug) parent: graph_node edge_species: edge_agent {\n    //Their location is the one of the target location\n    point location <- target.location update: target.location;\n    \n    //Action to know if an agent is related to another agent considering their distance\n    bool related_to (node_agent other) {\n        using topology(target) {\n            return (target.location distance_to other.target.location) < distance;\n        }\n\n    }\n\n    aspect base {\n        draw sphere(2) color: #green;\n    }\n\n    aspect dynamic {\n        int degree <- (my_graph) degree_of (self);\n        draw sphere(1 + (degree / 5.0)) color: #blue;\n    }\n\n}\n//Species edge to represent the edges of the graph\nspecies edge_agent parent: base_edge {\n    rgb color;\n    aspect base {\n        draw shape color: #green;\n    }\n    \n    aspect dynamic {\n        geometry ss <- line([{ self.source.location.x, self.source.location.y, self.source.location.z }, { self.target.location.x, self.target.location.y, self.target.location.z }]);\n        float val <- 255.0 * (ss.perimeter / distance);\n        rgb cc <- hsb(val, 1.0, 1.0);\n        draw ss + 0.1 color: cc border: cc;\n    }\n\n}\n\nexperiment AdvancedView type: gui {\n    output {\n        display graph_plus_bug_layered type: 3d { \n          species bug aspect: base;\n          species node_agent aspect: base position: { 0, 0, 0.2 };\n          species edge_agent aspect: base position: { 0, 0, 0.2 };\n          species node_agent aspect: dynamic position: { 0, 0, 0.4 };\n          species edge_agent aspect: dynamic position: { 0, 0, 0.4 };\n        }\n    }\n}\n\n\n\n\n")))}u.isMDXComponent=!0}}]);