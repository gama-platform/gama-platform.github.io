"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[31376],{78060:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var i=t(85893),s=t(11151);const r={title:"Defining monitors and inspectors"},o=void 0,a={id:"DefiningMonitorsAndInspectors",title:"Defining monitors and inspectors",description:"[//]: # (startConcept|monitorsandinspectors)",source:"@site/../docs/DefiningMonitorsAndInspectors.md",sourceDirName:".",slug:"/DefiningMonitorsAndInspectors",permalink:"/wiki/next/DefiningMonitorsAndInspectors",draft:!1,unlisted:!1,editUrl:"https://github.com/gama-platform/gama/wiki/DefiningMonitorsAndInspectors/_edit",tags:[],version:"current",frontMatter:{title:"Defining monitors and inspectors"},sidebar:"main",previous:{title:"Defining Charts",permalink:"/wiki/next/DefiningCharts"},next:{title:"Defining export files",permalink:"/wiki/next/DefiningExportFiles"}},c={},l=[{value:"Index",id:"index",level:2},{value:"Define a monitor",id:"define-a-monitor",level:2},{value:"Define an inspector",id:"define-an-inspector",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Other outputs can be very useful to study better the behavior of your agents."}),"\n",(0,i.jsx)(n.h2,{id:"index",children:"Index"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#define-a-monitor",children:"Define a monitor"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#define-an-inspector",children:"Define an inspector"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"define-a-monitor",children:"Define a monitor"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.a,{href:"InspectorsAndMonitors#monitor",children:"monitor"})," allows to follow the value of an arbitrary expression in GAML. It will appear, in the User Interface, in a small window on its own and be recomputed every time step (or according to its ",(0,i.jsx)(n.code,{children:"refresh"})," facet)."]}),"\n",(0,i.jsx)(n.p,{children:"Definition of a monitor:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"monitor monitor_name value: an_expression refresh: boolean_statement;\n"})}),"\n",(0,i.jsx)(n.p,{children:"with:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"value:"})," mandatory, the expression whose value will be displayed by the monitor."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"refresh:"})," bool statement, optional: the new value is computed if the bool statement returns true."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"experiment my_experiment type: gui {\n    output {\n\tmonitor monitor_name value: cycle refresh: every(1#cycle);\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:'NB: you can also declare monitors during the simulation, by clicking on the button "Add new monitor", and specifying the name of the variable you want to follow.'}),"\n",(0,i.jsx)(n.h2,{id:"define-an-inspector",children:"Define an inspector"}),"\n",(0,i.jsxs)(n.p,{children:["During the simulation, the user interface of GAMA provides the user the possibility to ",(0,i.jsx)(n.a,{href:"InspectorsAndMonitors",children:"inspect an agent"}),", or a group of agents. But you can also define the inspector you want directly from your model, as an output of the experiment."]}),"\n",(0,i.jsxs)(n.p,{children:["Use the statement ",(0,i.jsx)(n.code,{children:"inspect"})," to define your inspector, in the output scope of your GUI experiment. The inspector has to be named (using the facet ",(0,i.jsx)(n.code,{children:"name"}),"), a value has to be specified (with the ",(0,i.jsx)(n.code,{children:"value"})," facet)."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'inspect "inspector_name" value: the_value_you_want_to_display;\n'})}),"\n",(0,i.jsx)(n.p,{children:"Note that you can inspect any type of species (regular species, grid species, even the world...) or agent."}),"\n",(0,i.jsxs)(n.p,{children:["The optional facet ",(0,i.jsx)(n.code,{children:"type"})," is used to specify the type of your inspector. 2 values are possible:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"agent"})," (default value) if you want to display the information as a regular ",(0,i.jsx)(n.a,{href:"InspectorsAndMonitors#agent-inspector",children:"agent inspector"}),". Note that if you want to inspect a large number of agents, this can take a lot of time. In this case, prefer the other type ",(0,i.jsx)(n.code,{children:"table"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"table"})," if you want to display the information as an ",(0,i.jsx)(n.a,{href:"InspectorsAndMonitors#agent-browser",children:"agent browser"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The optional facet ",(0,i.jsx)(n.code,{children:"attributes"})," is used to filter the attributes you want to display in your inspector."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Beware"}),": only one agent inspector (",(0,i.jsx)(n.code,{children:"type: agent"}),") can be used for an experiment. Besides, you can add as many agent browsers (",(0,i.jsx)(n.code,{children:"type: table"}),") as you want for your experiment."]}),"\n",(0,i.jsx)(n.p,{children:"Example of implementation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'model new\n\nglobal {\n    init {\n\tcreate my_species number:3;\n    }\n}\n\nspecies my_species {\n    int int_attr <- 6;\n    string str_attr <- "my_value";\n    string str_attr_not_important <- "blabla";\n}\n\ngrid my_grid_species width: 10 height: 10 {\n    int rnd_value <- rnd(5);\n}\n\nexperiment my_experiment type:gui {\n    output {\n\tinspect "my_species_inspector" value: my_species attributes: ["int_attr","str_attr"];\n\tinspect "my_species_browser" value: my_species type: table;\n\tinspect "my_grid_species_browser" value: 5 among my_grid_species type: table;\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Another statement, ",(0,i.jsx)(n.code,{children:"browse"}),", is doing a similar thing, but prefer the ",(0,i.jsx)(n.code,{children:"table"})," type (if you want to browse an agent species, the default type will be the ",(0,i.jsx)(n.code,{children:"table"})," type)."]})]})}function p(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>o});var i=t(67294);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);