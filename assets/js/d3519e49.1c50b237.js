"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[74564],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),m=l(n),d=i,f=m["".concat(s,".").concat(d)]||m[d]||c[d]||o;return n?r.createElement(f,a(a({ref:t},u),{},{components:n})):r.createElement(f,a({ref:t},u))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:i,a[1]=p;for(var l=2;l<o;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4723:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>d,frontMatter:()=>p,metadata:()=>l,toc:()=>c});var r=n(87462),i=n(63366),o=(n(67294),n(3905)),a=["components"],p={title:"Defining monitors and inspectors"},s=void 0,l={unversionedId:"DefiningMonitorsAndInspectors",id:"version-1.8.2-RC1/DefiningMonitorsAndInspectors",title:"Defining monitors and inspectors",description:"[//]: # (startConcept|monitorsandinspectors)",source:"@site/versioned_docs/version-1.8.2-RC1/DefiningMonitorsAndInspectors.md",sourceDirName:".",slug:"/DefiningMonitorsAndInspectors",permalink:"/wiki/DefiningMonitorsAndInspectors",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/DefiningMonitorsAndInspectors/_edit",tags:[],version:"1.8.2-RC1",frontMatter:{title:"Defining monitors and inspectors"},sidebar:"side",previous:{title:"Defining Charts",permalink:"/wiki/DefiningCharts"},next:{title:"Defining export files",permalink:"/wiki/DefiningExportFiles"}},u={},c=[{value:"Index",id:"index",level:2},{value:"Define a monitor",id:"define-a-monitor",level:2},{value:"Define an inspector",id:"define-an-inspector",level:2}],m={toc:c};function d(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Other outputs can be very useful to study better the behavior of your agents."),(0,o.kt)("h2",{id:"index"},"Index"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#define-a-monitor"},"Define a monitor")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#define-an-inspector"},"Define an inspector"))),(0,o.kt)("h2",{id:"define-a-monitor"},"Define a monitor"),(0,o.kt)("p",null,"A ",(0,o.kt)("a",{parentName:"p",href:"InspectorsAndMonitors#monitor"},"monitor")," allows to follow the value of an arbitrary expression in GAML. It will appear, in the User Interface, in a small window on its own and be recomputed every time step (or according to its ",(0,o.kt)("inlineCode",{parentName:"p"},"refresh")," facet). "),(0,o.kt)("p",null,"Definition of a monitor: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"monitor monitor_name value: an_expression refresh: boolean_statement;\n")),(0,o.kt)("p",null,"with:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"value:")," mandatory, the expression whose value will be displayed by the monitor."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"refresh:")," bool statement, optional: the new value is computed if the bool statement returns true.")),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"experiment my_experiment type: gui {\n    output {\n    monitor monitor_name value: cycle refresh: every(1#cycle);\n    }\n}\n")),(0,o.kt)("p",null,'NB: you can also declare monitors during the simulation, by clicking on the button "Add new monitor", and specifying the name of the variable you want to follow.'),(0,o.kt)("h2",{id:"define-an-inspector"},"Define an inspector"),(0,o.kt)("p",null,"During the simulation, the user interface of GAMA provides the user the possibility to ",(0,o.kt)("a",{parentName:"p",href:"InspectorsAndMonitors"},"inspect an agent"),", or a group of agents. But you can also define the inspector you want directly from your model, as an output of the experiment."),(0,o.kt)("p",null,"Use the statement ",(0,o.kt)("inlineCode",{parentName:"p"},"inspect")," to define your inspector, in the output scope of your GUI experiment. The inspector has to be named (using the facet ",(0,o.kt)("inlineCode",{parentName:"p"},"name"),"), a value has to be specified (with the ",(0,o.kt)("inlineCode",{parentName:"p"},"value")," facet)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'inspect "inspector_name" value: the_value_you_want_to_display;\n')),(0,o.kt)("p",null,"Note that you can inspect any type of species (regular species, grid species, even the world...) or agent."),(0,o.kt)("p",null,"The optional facet ",(0,o.kt)("inlineCode",{parentName:"p"},"type")," is used to specify the type of your inspector. 2 values are possible: "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"agent")," (default value) if you want to display the information as a regular ",(0,o.kt)("a",{parentName:"li",href:"InspectorsAndMonitors#agent-inspector"},"agent inspector"),". Note that if you want to inspect a large number of agents, this can take a lot of time. In this case, prefer the other type ",(0,o.kt)("inlineCode",{parentName:"li"},"table")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"table")," if you want to display the information as an ",(0,o.kt)("a",{parentName:"li",href:"InspectorsAndMonitors#agent-browser"},"agent browser"),".")),(0,o.kt)("p",null,"The optional facet ",(0,o.kt)("inlineCode",{parentName:"p"},"attributes")," is used to filter the attributes you want to display in your inspector."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Beware"),": only one agent inspector (",(0,o.kt)("inlineCode",{parentName:"p"},"type: agent"),") can be used for an experiment. Besides, you can add as many agent browsers (",(0,o.kt)("inlineCode",{parentName:"p"},"type: table"),") as you want for your experiment."),(0,o.kt)("p",null,"Example of implementation:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'model new\n\nglobal {\n    init {\n    create my_species number:3;\n    }\n}\n\nspecies my_species {\n    int int_attr <- 6;\n    string str_attr <- "my_value";\n    string str_attr_not_important <- "blabla";\n}\n\ngrid my_grid_species width: 10 height: 10 {\n    int rnd_value <- rnd(5);\n}\n\nexperiment my_experiment type:gui {\n    output {\n    inspect "my_species_inspector" value: my_species attributes: ["int_attr","str_attr"];\n    inspect "my_species_browser" value: my_species type: table;\n    inspect "my_grid_species_browser" value: 5 among my_grid_species type: table;\n    }\n}\n')),(0,o.kt)("p",null,"Another statement, ",(0,o.kt)("inlineCode",{parentName:"p"},"browse"),", is doing a similar thing, but prefer the ",(0,o.kt)("inlineCode",{parentName:"p"},"table")," type (if you want to browse an agent species, the default type will be the ",(0,o.kt)("inlineCode",{parentName:"p"},"table")," type)."))}d.isMDXComponent=!0}}]);