"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[39862],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=p(n),u=i,h=d["".concat(s,".").concat(u)]||d[u]||c[u]||o;return n?a.createElement(h,r(r({ref:t},m),{},{components:n})):a.createElement(h,r({ref:t},m))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},72041:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>p,toc:()=>d});var a=n(87462),i=n(63366),o=(n(67294),n(3905)),r=["components"],l={title:"Organization of a model"},s=void 0,p={unversionedId:"ModelOrganization",id:"version-1.9.1/ModelOrganization",title:"Organization of a model",description:"As already extensively detailed in the introduction page, defining a model in GAML amounts to defining a model species, which later allows to instantiate a model agent (aka a simulation), which may or may not contain micro-species, and which can be flanked by experiment plans in order to be simulated.",source:"@site/versioned_docs/version-1.9.1/ModelOrganization.md",sourceDirName:".",slug:"/ModelOrganization",permalink:"/wiki/1.9.1/ModelOrganization",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/ModelOrganization/_edit",tags:[],version:"1.9.1",frontMatter:{title:"Organization of a model"},sidebar:"main",previous:{title:"Start with GAML",permalink:"/wiki/1.9.1/StartWithGAML"},next:{title:"Basic programming concepts in GAML",permalink:"/wiki/1.9.1/BasicProgrammingConceptsInGAML"}},m={},d=[{value:"Table of contents",id:"table-of-contents",level:2},{value:"Model Header (<em>model species</em>)",id:"model-header-model-species",level:2},{value:"Import gaml file",id:"import-gaml-file",level:2},{value:"Species declarations",id:"species-declarations",level:2},{value:"Experiment declarations",id:"experiment-declarations",level:2},{value:"Basic skeleton of a model",id:"basic-skeleton-of-a-model",level:2}],c={toc:d},u="wrapper";function h(e){var t=e.components,n=(0,i.Z)(e,r);return(0,o.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"As already extensively detailed in the ",(0,o.kt)("a",{parentName:"p",href:"Introduction"},"introduction page"),", defining a model in GAML amounts to defining a ",(0,o.kt)("em",{parentName:"p"},"model species"),", which later allows to instantiate a ",(0,o.kt)("em",{parentName:"p"},"model agent")," (aka a ",(0,o.kt)("em",{parentName:"p"},"simulation"),"), which may or may not contain micro-species, and which can be flanked by ",(0,o.kt)("em",{parentName:"p"},"experiment plans")," in order to be simulated."),(0,o.kt)("p",null,"This conceptual structure is respected in the definition of model files, which follows a similar pattern:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Definition of the ",(0,o.kt)("em",{parentName:"li"},"global species"),", preceded by a ",(0,o.kt)("em",{parentName:"li"},"header"),", in order to represent the ",(0,o.kt)("em",{parentName:"li"},"model species")),(0,o.kt)("li",{parentName:"ol"},"Definition of the different micro-species (either nested inside the ",(0,o.kt)("em",{parentName:"li"},"global species")," or at the same level)"),(0,o.kt)("li",{parentName:"ol"},"Definition of the different ",(0,o.kt)("em",{parentName:"li"},"experiment plans")," that target this model")),(0,o.kt)("h2",{id:"table-of-contents"},"Table of contents"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#model-header-model-species"},"Model Header (model species)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#import-gaml-file"},"Import gaml file")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#species-declarations"},"Species declarations")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#experiment-declarations"},"Experiment declarations")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#basic-skeleton-of_a_model"},"Basic skeleton of a model"))),(0,o.kt)("h2",{id:"model-header-model-species"},"Model Header (",(0,o.kt)("em",{parentName:"h2"},"model species"),")"),(0,o.kt)("p",null,"The header of a model file begins with the declaration of the name of the model. Contrarily to other statements, this declaration ",(0,o.kt)("strong",{parentName:"p"},"does not")," end with a semi-colon."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"model name_of_the_model\n")),(0,o.kt)("p",null,"The name of the model is not necessarily the same as the name of the file. It must conform to the general rule for naming species, i.e. be a valid identifier (beginning with a letter, containing only letters, digits, and dashes). This name will be used for building the name of the model species, from which ",(0,o.kt)("em",{parentName:"p"},"simulations")," will be instantiated. For instance, the following declaration:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"model dummy\n")),(0,o.kt)("p",null,"will internally create a species called ",(0,o.kt)("inlineCode",{parentName:"p"},"dummy_model"),", child of the abstract species ",(0,o.kt)("inlineCode",{parentName:"p"},"model"),", from which simulations (called ",(0,o.kt)("inlineCode",{parentName:"p"},"dummy_model0"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"dummy_model1"),", etc.) will be instantiated."),(0,o.kt)("h2",{id:"import-gaml-file"},"Import gaml file"),(0,o.kt)("p",null,"This declaration is followed by optional import statements that indicate which other models this model is importing. Import statements ",(0,o.kt)("strong",{parentName:"p"},"do not")," end with a semi-colon."),(0,o.kt)("p",null,"Importing a model can take two forms. The first one, called ",(0,o.kt)("em",{parentName:"p"},"inheritance import"),", is declared as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'import "relative_path_to_a_model_file"\nimport "relative_path_to_another_model_file"\n')),(0,o.kt)("p",null,"The second one, called ",(0,o.kt)("em",{parentName:"p"},"usage import"),", is declared as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'import "relative_path_to_a_model_file" as model_identifier\n')),(0,o.kt)("p",null,"When importing models using the first form, all the declarations of the model(s) imported will be merged with those of the current model (in the order with which the import statements are declared, i.e. the latest definitions of global attributes or behaviors superseding the previous ones)."),(0,o.kt)("p",null,"The second form is reserved for ",(0,o.kt)("a",{parentName:"p",href:"Comodel"},"using models as ",(0,o.kt)("em",{parentName:"a"},"micro-models")," of the current model"),". This possibility is still experimental in the current version of GAMA."),(0,o.kt)("p",null,"The last part of the ",(0,o.kt)("em",{parentName:"p"},"header")," is the definition of the ",(0,o.kt)("a",{parentName:"p",href:"GlobalSpecies"},(0,o.kt)("inlineCode",{parentName:"a"},"global")," species"),", which is the actual definition of the ",(0,o.kt)("em",{parentName:"p"},"model species")," itself."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"global {\n    // Definition of [global attributes](GlobalSpecies#declaration), [actions and behaviors](DefiningActionsAndBehaviors)\n}\n")),(0,o.kt)("p",null,"Note that neither the imports nor the definition of ",(0,o.kt)("inlineCode",{parentName:"p"},"global")," is mandatory. Only the ",(0,o.kt)("inlineCode",{parentName:"p"},"model")," statement is."),(0,o.kt)("h2",{id:"species-declarations"},"Species declarations"),(0,o.kt)("p",null,"The header is followed by the declaration of the different species of agents that populate the model."),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"GlobalSpecies"},"special species ",(0,o.kt)("inlineCode",{parentName:"a"},"global"))," is the world species. You will declare here all the global attributes/actions/behaviors. The global species does not have a name, and is unique in your model."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"global {\n    // definition of global attributes, actions, behaviors\n}\n")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"RegularSpecies"},"Regular species")," can be declared with the keyword ",(0,o.kt)("inlineCode",{parentName:"p"},"species"),". You can declare several regular species, and they all have to be named. A species defines its ",(0,o.kt)("a",{parentName:"p",href:"RegularSpecies#declaration"},"attributes"),", ",(0,o.kt)("a",{parentName:"p",href:"DefiningActionsAndBehaviors"},"actions and behaviors")," and ",(0,o.kt)("a",{parentName:"p",href:"RegularSpecies#the-aspect-statement"},"aspects"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"species nameOfSpecies {\n    // definition of your species attributes, actions and behaviors and aspects\n}\n")),(0,o.kt)("p",null,"Note that the possibility to define the species ",(0,o.kt)("em",{parentName:"p"},"after")," the ",(0,o.kt)("inlineCode",{parentName:"p"},"global")," definition is actually a convenience: these species are micro-species of the model species and, hence, could be perfectly defined as nested species of ",(0,o.kt)("inlineCode",{parentName:"p"},"global"),". For instance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"global {\n    // definition of global attributes, actions, behaviors\n}\n\nspecies A {...}\n\nspecies B {...}\n")),(0,o.kt)("p",null,"is completely equivalent to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"global {\n    // definition of [global attributes](GlobalSpecies#declaration), actions, behaviors\n\n    species A {...}\n\n    species B {...}\n}\n")),(0,o.kt)("h2",{id:"experiment-declarations"},"Experiment declarations"),(0,o.kt)("p",null,"Experiments are usually declared at the end of the file. They start with the keyword ",(0,o.kt)("inlineCode",{parentName:"p"},"experiment"),". They contains the ",(0,o.kt)("a",{parentName:"p",href:"DefiningParameters"},"simulation parameters"),", and the definition of the output (such as ",(0,o.kt)("a",{parentName:"p",href:"DefiningDisplaysGeneralities"},"displays"),", ",(0,o.kt)("a",{parentName:"p",href:"DefiningMonitorsAndInspectors"},"monitors or inspectors"),"). You can declare as many experiments as you want."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"experiment first_experiment {\n    // definition of parameters (intputs)\n\n    // definition of output\n    output {...}\n}\n\nexperiment second_experiment {\n    // definition of parameters (inputs)\n\n    // definition of output\n}\n")),(0,o.kt)("p",null,"Note that you have four types of experiments:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A ",(0,o.kt)("a",{parentName:"li",href:"DefiningGUIExperiment"},"GUI experiment")," allows you to display a graphical interface with input parameters and outputs. It is declared with the following structure:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"experiment gui_experiment type:gui {\n   [parameters]\n   [output]\n   [...]\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A ",(0,o.kt)("a",{parentName:"li",href:"BatchExperiments"},"Batch experiment")," allows you to execute numerous successive simulation runs (often used for model exploration). It is declared with the following structure:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"experiment batch_experiment type:batch {\n   [parameters]\n   [exploration method]\n   [...]\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A ",(0,o.kt)("a",{parentName:"li",href:"Writing_Tests"},"Test experiment")," allows you to write unit tests on a model (used to ensure its quality). It is declared with the following structure:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"experiment test_experiment type:test autorun: true {\n   [setup]\n   [tests]\n   [...]\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A ",(0,o.kt)("a",{parentName:"li",href:"Save-and-restore-simulations"},"memorize experiment")," allows you to store each step of the simulation in memory and to backtrack to previous steps. It is declared with the following structure:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"experiment test_experiment type:memorize {\n   [parameters]\n   [output]\n   [...]\n}\n")),(0,o.kt)("h2",{id:"basic-skeleton-of-a-model"},"Basic skeleton of a model"),(0,o.kt)("p",null,"Here is the basic skeleton of a model :"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'model name_of_the_model\n\nglobal {\n    // definition of [global attributes](GlobalSpecies#declaration), actions, behaviours\n}\n\nspecies my_specie {\n    // definition of attributes, actions, behaviors\n}\n\nexperiment my_experiment /* + specify the type : "type:gui", "type:batch", "type:test", or "test:memorize" */\n{\n    // here the definition of your experiment, with...\n    // ... your inputs\n    output {\n        // ... and your outputs\n    }\n}\n')),(0,o.kt)("p",null,"Don't forget this structure! This will be the basis for all the models you will create from now."))}h.isMDXComponent=!0}}]);