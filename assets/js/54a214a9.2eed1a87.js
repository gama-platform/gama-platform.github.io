"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[45096],{28453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>o});var t=a(96540);const r={},s=t.createContext(r);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(s.Provider,{value:n},e.children)}},45921:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"Event__CP12Graph","title":"Graph operators and indicators","description":"goals","source":"@site/versioned_docs/version-1.8.2-RC2/Event__CP12Graph.md","sourceDirName":".","slug":"/Event__CP12Graph","permalink":"/wiki/1.8.2-RC2/Event__CP12Graph","draft":false,"unlisted":false,"editUrl":"https://github.com/gama-platform/gama/wiki/Event__CP12Graph/_edit","tags":[],"version":"1.8.2-RC2","frontMatter":{"title":"Graph operators and indicators"}}');var r=a(74848),s=a(28453);const i={title:"Graph operators and indicators"},o=void 0,l={},p=[{value:"goals",id:"goals",level:2},{value:"done",id:"done",level:2},{value:"load graphs from file",id:"load-graphs-from-file",level:3},{value:"graph manipulators",id:"graph-manipulators",level:3},{value:"graph visualization",id:"graph-visualization",level:3},{value:"Roadmap",id:"roadmap",level:2}];function d(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"goals",children:"goals"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"load graphs from files"})," generate graphs using generators\n",(0,r.jsx)(n.strong,{children:"operators for graph manipulation (including stats)"})," graphs display"]}),"\n",(0,r.jsx)(n.h2,{id:"done",children:"done"}),"\n",(0,r.jsx)(n.h3,{id:"load-graphs-from-file",children:"load graphs from file"}),"\n",(0,r.jsx)(n.p,{children:"For parsing network files, we use the graphstream library which supports the top- 10 file formats. All these formats are supported by GAMA now."}),"\n",(0,r.jsx)(n.p,{children:"Till now, the GAML langage does not enables an easy way to create primitives that both take more than 3 args as an input and return an object. Thus loading a graph is defined as an action of a skill; one has to create an instance of agent with this skill for loading the network."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'global {  \n\tvar mongraphe type:graph;\n\tgraph_manager graph_util;\n\n\tinit { \n\t\tcreate graph_manager returns: graph_util;\n\t\task graph_util {\n\t\t\t\n\t\t\tset mongraphe value:load_graph_from_dgs_old(self, [edge_species::edgeSpecy, vertex_species::nodeSpecy,file::"../includes/BarabasiGenerated.dgs"]);\n\t\t\n\t\t}\n\t}  \n}\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"graph-manipulators",children:"graph manipulators"}),"\n",(0,r.jsx)(n.p,{children:"The structure for the manipulation of graphs is based on the existing GAMA graph type. As a consequence, novel algorithms, operators and visualizations will be usable for both spatial graphs (loading from GIS for instance, like roads) and more abstract graphs (not spatialized)."}),"\n",(0,r.jsx)(n.p,{children:"Patrick did some interesting work for searching shortest pathes and so on."}),"\n",(0,r.jsx)(n.p,{children:"Novel operators should still be defined."}),"\n",(0,r.jsx)(n.h3,{id:"graph-visualization",children:"graph visualization"}),"\n",(0,r.jsx)(n.p,{children:"First of all, we had to disturb many GAMA-gurus for undertanding how to create a novel View (that is, another tab in the simulation perspective) from GAML. A novel display is defined for displaying a network."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"output {\n\tgraphdisplay nameOfMyDisplay graph: mongraphe {\t \n\t}\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:'This line indicates that we would like to display a graph defined in the variable "mongraphe". This simple line will open the display.'}),"\n",(0,r.jsx)(n.h2,{id:"roadmap",children:"Roadmap"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"provide another (simpler !) syntax for loading networks"})," visu:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"implement prefuse instead of graphstream for the visualisation"}),"\n",(0,r.jsxs)(n.li,{children:["map GAML aspects to the view of the network\n",(0,r.jsx)(n.strong,{children:"implement operators for graph manipulation"})," add generators for simple graphs generation (with a simple syntax as well)"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);