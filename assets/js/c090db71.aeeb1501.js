"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[37546],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},l=Object.keys(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=i.createContext({}),s=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=s(e.components);return i.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=s(n),c=a,k=m["".concat(p,".").concat(c)]||m[c]||u[c]||l;return n?i.createElement(k,r(r({ref:t},d),{},{components:n})):i.createElement(k,r({ref:t},d))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,r=new Array(l);r[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[m]="string"==typeof e?e:a,r[1]=o;for(var s=2;s<l;s++)r[s]=n[s];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},82486:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>p,default:()=>k,frontMatter:()=>o,metadata:()=>s,toc:()=>m});var i=n(87462),a=n(63366),l=(n(67294),n(3905)),r=["components"],o={title:"1. Basic Model"},p=void 0,s={unversionedId:"PredatorPrey_step1",id:"version-1.9.0/PredatorPrey_step1",title:"1. Basic Model",description:"Content",source:"@site/versioned_docs/version-1.9.0/PredatorPrey_step1.md",sourceDirName:".",slug:"/PredatorPrey_step1",permalink:"/wiki/PredatorPrey_step1",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/PredatorPrey_step1/_edit",tags:[],version:"1.9.0",frontMatter:{title:"1. Basic Model"},sidebar:"tuto",previous:{title:"Predator Prey",permalink:"/wiki/PredatorPrey"},next:{title:"2. Vegetation Dynamic",permalink:"/wiki/PredatorPrey_step2"}},d={},m=[{value:"Content",id:"content",level:2},{value:"Formulation",id:"formulation",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"Model structure",id:"model-structure",level:3},{value:"Species",id:"species",level:3},{value:"Internal state",id:"internal-state",level:4},{value:"Behavior",id:"behavior",level:4},{value:"Display",id:"display",level:4},{value:"Prey species code",id:"prey-species-code",level:4},{value:"global section",id:"global-section",level:3},{value:"global attributes",id:"global-attributes",level:4},{value:"Model initialization",id:"model-initialization",level:4},{value:"experiment",id:"experiment",level:3},{value:"input",id:"input",level:4},{value:"output",id:"output",level:4},{value:"Complete Model",id:"complete-model",level:2}],u={toc:m},c="wrapper";function k(e){var t=e.components,n=(0,a.Z)(e,r);return(0,l.kt)(c,(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"content"},"Content"),(0,l.kt)("p",null,"This first step Illustrates how to write a model in GAMA. In particular, it describes how to structure a model and how to define species - that are the key components of GAMA models."),(0,l.kt)("h2",{id:"formulation"},"Formulation"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Definition of the ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"prey"))," species"),(0,l.kt)("li",{parentName:"ul"},"Definition of a ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"nb_preys_init"))," parameter"),(0,l.kt)("li",{parentName:"ul"},"Creation of ",(0,l.kt)("inlineCode",{parentName:"li"},"nb_preys_init")," ",(0,l.kt)("inlineCode",{parentName:"li"},"prey")," agents randomly located in the environment (size: 100x100)")),(0,l.kt)("h2",{id:"model-definition"},"Model Definition"),(0,l.kt)("h3",{id:"model-structure"},"Model structure"),(0,l.kt)("p",null,"A GAMA model is composed of three types of sections:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"global")),': this section, that is unique, defines the "world" agent, a special agent of a GAMA model. It represents all that is global to the model: dynamics, variables, actions. In addition, it allows to initialize the simulation (',(0,l.kt)("inlineCode",{parentName:"li"},"init")," block)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"species"))," and ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"grid")),': these sections define the species of agents composing the model. Grid is defined in the following model step "vegetation dynamic";'),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"experiment")),": these sections define the execution context of the simulations. In particular, it defines the input (parameters) and output (displays, files...) of a model.")),(0,l.kt)("p",null,"More details about the different sections of a GAMA model can be found ",(0,l.kt)("a",{parentName:"p",href:"ModelOrganization"},"here"),"."),(0,l.kt)("h3",{id:"species"},"Species"),(0,l.kt)("p",null,"A ",(0,l.kt)("a",{parentName:"p",href:"RegularSpecies"},"species"),' represents a "prototype" of agents: it defines their common properties.'),(0,l.kt)("p",null,"A species definition requires the definition of three different elements:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the internal state of its agents (attributes)"),(0,l.kt)("li",{parentName:"ul"},"their behavior"),(0,l.kt)("li",{parentName:"ul"},"how they are displayed (aspects)")),(0,l.kt)("h4",{id:"internal-state"},"Internal state"),(0,l.kt)("p",null,"An ",(0,l.kt)("a",{parentName:"p",href:"RegularSpecies#declaration"},"attribute")," is defined as follows: the type of the attribute and name. Numerous types of attributes are available: ",(0,l.kt)("inlineCode",{parentName:"p"},"int")," (integer), ",(0,l.kt)("inlineCode",{parentName:"p"},"float")," (floating-point number), ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"bool")," (boolean, ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),"), ",(0,l.kt)("inlineCode",{parentName:"p"},"point")," (coordinates), ",(0,l.kt)("inlineCode",{parentName:"p"},"list"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"pair"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"map"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"file"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"matrix"),", species of agents, ",(0,l.kt)("inlineCode",{parentName:"p"},"rgb")," (color), ",(0,l.kt)("inlineCode",{parentName:"p"},"graph"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"path"),"..."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Optional facets: ",(0,l.kt)("inlineCode",{parentName:"li"},"<-")," (initial value), ",(0,l.kt)("inlineCode",{parentName:"li"},"update")," (value recomputed at each step of the simulation), ",(0,l.kt)("inlineCode",{parentName:"li"},"function:{..}")," (value computed each time the variable is used), ",(0,l.kt)("inlineCode",{parentName:"li"},"min"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"max"))),(0,l.kt)("p",null,'In addition to the attributes the modeler explicitly defines, species "inherits" other attributes called "built-in" variables:'),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A name (",(0,l.kt)("inlineCode",{parentName:"li"},"name"),"): the identifier of the species."),(0,l.kt)("li",{parentName:"ul"},"A shape (",(0,l.kt)("inlineCode",{parentName:"li"},"shape"),"): the default shape of the agents to be constructed after the species. It can be ",(0,l.kt)("em",{parentName:"li"},"a point, a polygon, etc."),"."),(0,l.kt)("li",{parentName:"ul"},"A location (",(0,l.kt)("inlineCode",{parentName:"li"},"location"),"): the centroid of its shape.")),(0,l.kt)("h4",{id:"behavior"},"Behavior"),(0,l.kt)("p",null,"In this first model, we define one species of agents: the ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"prey"))," species. For the moment, the agents of this species will not have any particular behavior, they will just exist and be displayed."),(0,l.kt)("h4",{id:"display"},"Display"),(0,l.kt)("p",null,"An agent ",(0,l.kt)("a",{parentName:"p",href:"RegularSpecies#the-aspect-statement"},"aspects")," have to be defined. An aspect is a way to display the agents of a species: ",(0,l.kt)("inlineCode",{parentName:"p"},"aspect aspect_name {...}"),".\nIn the block of an aspect, it is possible to draw:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A geometry: for instance, the shape of the agent (but it may be a different one, for instance, a disk instead of a complex polygon)"),(0,l.kt)("li",{parentName:"ul"},"An image: to draw icons"),(0,l.kt)("li",{parentName:"ul"},"A text: to draw a text")),(0,l.kt)("p",null,"In order to display our prey agents we define two attributes:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"size")," of type float, with for initial value:1.0"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"color")," of type ",(0,l.kt)("inlineCode",{parentName:"li"},"rgb"),", with for initial value: ",(0,l.kt)("inlineCode",{parentName:"li"},"#blue"),". It is possible to get a color value by using the symbol ",(0,l.kt)("em",{parentName:"li"},"#")," + color name: e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"#blue"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"#red"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"#white"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"#yellow"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"#magenta"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"#pink"),"...")),(0,l.kt)("h4",{id:"prey-species-code"},"Prey species code"),(0,l.kt)("p",null,"For the moment, we only define an aspect for this species. We want to display for each prey agent a circle of radius ",(0,l.kt)("inlineCode",{parentName:"p"},"size")," and color ",(0,l.kt)("inlineCode",{parentName:"p"},"color"),". We then use the statement ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"draw"))," with a circle shape."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"species prey {\n    float size <- 1.0 ;\n    rgb color <- #blue;\n        \n    aspect base {\n    draw circle(size) color: color ;\n    }\n} \n")),(0,l.kt)("h3",{id:"global-section"},"global section"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"global")," section represents a specific agent, called ",(0,l.kt)("inlineCode",{parentName:"p"},"world"),". Defining this agent follows the same principle as any agent and is, thus, defined after a species.\nThe world agent represents everything that is global to the model: dynamics, variables...\nIt allows to initialize simulations (",(0,l.kt)("inlineCode",{parentName:"p"},"init")," block): the world is always created and initialized first when a simulation is launched (before any other agents). The geometry (",(0,l.kt)("inlineCode",{parentName:"p"},"shape"),") of the ",(0,l.kt)("inlineCode",{parentName:"p"},"world")," agent is by default a square with 100m for side size, but can be redefined if necessary (see the ",(0,l.kt)("a",{parentName:"p",href:"RoadTrafficModel"},"Road traffic tutorial"),")."),(0,l.kt)("h4",{id:"global-attributes"},"global attributes"),(0,l.kt)("p",null,"In the current model, we will only have a certain number of preys thus we need to hold this number in a global or world's variable of type integer (",(0,l.kt)("inlineCode",{parentName:"p"},"int"),") which can be done as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"global {\n    int nb_preys_init <- 200;\n}\n")),(0,l.kt)("h4",{id:"model-initialization"},"Model initialization"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"init")," section of the global block allows initializing the model which is executing certain commands, here we will create ",(0,l.kt)("inlineCode",{parentName:"p"},"nb_preys_init")," number of prey agents. We use the statement ",(0,l.kt)("inlineCode",{parentName:"p"},"create"),"  to create agents of a specific species: ",(0,l.kt)("inlineCode",{parentName:"p"},"create species_name +")," :"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"number"),": number of agents to create (int, 1 by default)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"from"),": GIS file to use to create the agents (optional, string or file)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"returns"),": list of created agents (list)")),(0,l.kt)("p",null,"Definition of the init block in order to create ",(0,l.kt)("inlineCode",{parentName:"p"},"nb_preys_init")," prey agents:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"init {\n    create prey number: nb_preys_init ;\n}\n")),(0,l.kt)("h3",{id:"experiment"},"experiment"),(0,l.kt)("p",null,"An ",(0,l.kt)("inlineCode",{parentName:"p"},"experiment")," block defines how a model can be simulated (executed). Several experiments can be defined for a given model. They are defined using : ",(0,l.kt)("inlineCode",{parentName:"p"},"experiment exp_name type: gui/batch { [input] [output]}")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"gui"),": experiment with a graphical interface, which displays its input parameters and outputs."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"batch"),": Allows to set up a series of simulations (w/o graphical interface).")),(0,l.kt)("p",null,"In our model, we define a gui experiment called ",(0,l.kt)("inlineCode",{parentName:"p"},"prey_predator")," :"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"experiment prey_predator type: gui {\n}\n")),(0,l.kt)("h4",{id:"input"},"input"),(0,l.kt)("p",null,"Experiments can define (input) parameters. A parameter definition allows to make the value of a global variable definable by the user through the graphic interface."),(0,l.kt)("p",null,"A parameter is defined as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"parameter title var: global_var category: cat;\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"title"),": string to display"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"var"),": reference to a global variable (defined in the global section)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"category"),": string used to \xabstore\xbb the operators on the UI - optional"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"<-"),": init value - optional"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"min"),": min value - optional"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"max"),": min value - optional")),(0,l.kt)("p",null,"Note that the init, min and max values can be defined in the global variable definition."),(0,l.kt)("p",null,"In the experiment, the definition of a parameter from the global variable ",(0,l.kt)("inlineCode",{parentName:"p"},"nb_preys_init"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'experiment prey_predator type: gui {\n    parameter "Initial number of preys: " var: nb_preys_init min: 1 max: 1000 category: "Prey" ;\n}\n')),(0,l.kt)("h4",{id:"output"},"output"),(0,l.kt)("p",null,"Output blocks are defined in an experiment and define how to visualize a simulation (with one or more display blocks that define separate windows). Each display can be refreshed independently by defining the facet ",(0,l.kt)("inlineCode",{parentName:"p"},"refresh")," nb (int) (the display will be refreshed every nb steps of the simulation)."),(0,l.kt)("p",null,"Each display can include different layers (like in a GIS):"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Agents species: ",(0,l.kt)("inlineCode",{parentName:"li"},"species my_species aspect: my_aspect;")),(0,l.kt)("li",{parentName:"ul"},"Agents lists: ",(0,l.kt)("inlineCode",{parentName:"li"},"agents layer_name value: agents_list aspect: my_aspect;")),(0,l.kt)("li",{parentName:"ul"},"Images: ",(0,l.kt)("inlineCode",{parentName:"li"},"image image_file;")),(0,l.kt)("li",{parentName:"ul"},"Charts: see later.")),(0,l.kt)("p",null,"Note that it is possible to define a ",(0,l.kt)("a",{parentName:"p",href:"Defining3DDisplays"},"opengl display")," (for 3D display) by using the facet ",(0,l.kt)("inlineCode",{parentName:"p"},"type: opengl"),"."),(0,l.kt)("p",null,"In our model, we define a display to draw the ",(0,l.kt)("inlineCode",{parentName:"p"},"prey")," agents."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"output {\n    display main_display {\n        species prey aspect: base ;\n    }\n}\n")),(0,l.kt)("h2",{id:"complete-model"},"Complete Model"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-gaml",metastring:"reference",reference:!0},"https://github.com/gama-platform/gama/blob/GAMA_1.9.0/msi.gama.models/models/Tutorials/Predator%20Prey/models/Model%2001.gaml\n")))}k.isMDXComponent=!0}}]);