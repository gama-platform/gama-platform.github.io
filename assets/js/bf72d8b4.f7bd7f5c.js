"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[35672],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>h});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),d=p(a),k=r,h=d["".concat(o,".").concat(k)]||d[k]||u[k]||l;return a?n.createElement(h,i(i({ref:t},m),{},{components:a})):n.createElement(h,i({ref:t},m))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=k;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},94355:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>p,toc:()=>d});var n=a(87462),r=a(63366),l=(a(67294),a(3905)),i=["components"],s={title:"Operators (S to Z)"},o=void 0,p={unversionedId:"OperatorsSZ",id:"version-1.8.1/OperatorsSZ",title:"Operators (S to Z)",description:"----",source:"@site/versioned_docs/version-1.8.1/OperatorsSZ.md",sourceDirName:".",slug:"/OperatorsSZ",permalink:"/wiki/1.8.1/OperatorsSZ",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/OperatorsSZ/_edit",tags:[],version:"1.8.1",frontMatter:{title:"Operators (S to Z)"},sidebar:"side",previous:{title:"Operators (N to R)",permalink:"/wiki/1.8.1/OperatorsNR"},next:{title:"Exhaustive list of GAMA Keywords",permalink:"/wiki/1.8.1/Exhaustive-list-of-GAMA-Keywords"}},m={},d=[{value:"Definition",id:"definition",level:2},{value:"Priority between operators",id:"priority-between-operators",level:2},{value:"Using actions as operators",id:"using-actions-as-operators",level:2},{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Operators by categories",id:"operators-by-categories",level:2},{value:"3D",id:"3d",level:3},{value:"Arithmetic operators",id:"arithmetic-operators",level:3},{value:"BDI",id:"bdi",level:3},{value:"Casting operators",id:"casting-operators",level:3},{value:"Color-related operators",id:"color-related-operators",level:3},{value:"Comparison operators",id:"comparison-operators",level:3},{value:"Containers-related operators",id:"containers-related-operators",level:3},{value:"Date-related operators",id:"date-related-operators",level:3},{value:"Dates",id:"dates",level:3},{value:"Displays",id:"displays",level:3},{value:"Driving operators",id:"driving-operators",level:3},{value:"edge",id:"edge",level:3},{value:"EDP-related operators",id:"edp-related-operators",level:3},{value:"Files-related operators",id:"files-related-operators",level:3},{value:"FIPA-related operators",id:"fipa-related-operators",level:3},{value:"GamaMetaType",id:"gamametatype",level:3},{value:"Graphs-related operators",id:"graphs-related-operators",level:3},{value:"Grid-related operators",id:"grid-related-operators",level:3},{value:"Iterator operators",id:"iterator-operators",level:3},{value:"List-related operators",id:"list-related-operators",level:3},{value:"Logical operators",id:"logical-operators",level:3},{value:"Map comparaison operators",id:"map-comparaison-operators",level:3},{value:"Map-related operators",id:"map-related-operators",level:3},{value:"Material",id:"material",level:3},{value:"Matrix-related operators",id:"matrix-related-operators",level:3},{value:"multicriteria operators",id:"multicriteria-operators",level:3},{value:"Path-related operators",id:"path-related-operators",level:3},{value:"Points-related operators",id:"points-related-operators",level:3},{value:"Random operators",id:"random-operators",level:3},{value:"ReverseOperators",id:"reverseoperators",level:3},{value:"Shape",id:"shape",level:3},{value:"Spatial operators",id:"spatial-operators",level:3},{value:"Spatial properties operators",id:"spatial-properties-operators",level:3},{value:"Spatial queries operators",id:"spatial-queries-operators",level:3},{value:"Spatial relations operators",id:"spatial-relations-operators",level:3},{value:"Spatial statistical operators",id:"spatial-statistical-operators",level:3},{value:"Spatial transformations operators",id:"spatial-transformations-operators",level:3},{value:"Species-related operators",id:"species-related-operators",level:3},{value:"Statistical operators",id:"statistical-operators",level:3},{value:"Strings-related operators",id:"strings-related-operators",level:3},{value:"SubModel",id:"submodel",level:3},{value:"System",id:"system",level:3},{value:"Time-related operators",id:"time-related-operators",level:3},{value:"Types-related operators",id:"types-related-operators",level:3},{value:"User control operators",id:"user-control-operators",level:3},{value:"Operators",id:"operators",level:2},{value:"<code>sample</code>",id:"sample",level:3},{value:"Possible use:",id:"possible-use",level:4},{value:"Result:",id:"result",level:4},{value:"Examples:",id:"examples",level:4},{value:"<code>Sanction</code>",id:"sanction",level:3},{value:"Possible use:",id:"possible-use-1",level:4},{value:"Result:",id:"result-1",level:4},{value:"<code>save_agent</code>",id:"save_agent",level:3},{value:"Possible use:",id:"possible-use-2",level:4},{value:"<code>save_simulation</code>",id:"save_simulation",level:3},{value:"Possible use:",id:"possible-use-3",level:4},{value:"<code>saved_simulation_file</code>",id:"saved_simulation_file",level:3},{value:"Possible use:",id:"possible-use-4",level:4},{value:"Result:",id:"result-2",level:4},{value:"Special cases:",id:"special-cases",level:4},{value:"See also:",id:"see-also",level:4},{value:"<code>scaled_by</code>",id:"scaled_by",level:3},{value:"<code>scaled_to</code>",id:"scaled_to",level:3},{value:"Possible use:",id:"possible-use-5",level:4},{value:"Result:",id:"result-3",level:4},{value:"Examples:",id:"examples-1",level:4},{value:"<code>select</code>",id:"select",level:3},{value:"<code>serialize</code>",id:"serialize",level:3},{value:"Possible use:",id:"possible-use-6",level:4},{value:"Result:",id:"result-4",level:4},{value:"<code>serialize_agent</code>",id:"serialize_agent",level:3},{value:"Possible use:",id:"possible-use-7",level:4},{value:"<code>set_about</code>",id:"set_about",level:3},{value:"Possible use:",id:"possible-use-8",level:4},{value:"Result:",id:"result-5",level:4},{value:"Examples:",id:"examples-2",level:4},{value:"<code>set_agent</code>",id:"set_agent",level:3},{value:"Possible use:",id:"possible-use-9",level:4},{value:"Result:",id:"result-6",level:4},{value:"Examples:",id:"examples-3",level:4},{value:"<code>set_agent_cause</code>",id:"set_agent_cause",level:3},{value:"Possible use:",id:"possible-use-10",level:4},{value:"Result:",id:"result-7",level:4},{value:"Examples:",id:"examples-4",level:4},{value:"<code>set_decay</code>",id:"set_decay",level:3},{value:"Possible use:",id:"possible-use-11",level:4},{value:"Result:",id:"result-8",level:4},{value:"Examples:",id:"examples-5",level:4},{value:"<code>set_dominance</code>",id:"set_dominance",level:3},{value:"Possible use:",id:"possible-use-12",level:4},{value:"Result:",id:"result-9",level:4},{value:"Examples:",id:"examples-6",level:4},{value:"<code>set_familiarity</code>",id:"set_familiarity",level:3},{value:"Possible use:",id:"possible-use-13",level:4},{value:"Result:",id:"result-10",level:4},{value:"Examples:",id:"examples-7",level:4},{value:"<code>set_intensity</code>",id:"set_intensity",level:3},{value:"Possible use:",id:"possible-use-14",level:4},{value:"Result:",id:"result-11",level:4},{value:"Examples:",id:"examples-8",level:4},{value:"<code>set_lifetime</code>",id:"set_lifetime",level:3},{value:"Possible use:",id:"possible-use-15",level:4},{value:"Result:",id:"result-12",level:4},{value:"Examples:",id:"examples-9",level:4},{value:"<code>set_liking</code>",id:"set_liking",level:3},{value:"Possible use:",id:"possible-use-16",level:4},{value:"Result:",id:"result-13",level:4},{value:"Examples:",id:"examples-10",level:4},{value:"<code>set_modality</code>",id:"set_modality",level:3},{value:"Possible use:",id:"possible-use-17",level:4},{value:"Result:",id:"result-14",level:4},{value:"Examples:",id:"examples-11",level:4},{value:"<code>set_predicate</code>",id:"set_predicate",level:3},{value:"Possible use:",id:"possible-use-18",level:4},{value:"Result:",id:"result-15",level:4},{value:"Examples:",id:"examples-12",level:4},{value:"<code>set_solidarity</code>",id:"set_solidarity",level:3},{value:"Possible use:",id:"possible-use-19",level:4},{value:"Result:",id:"result-16",level:4},{value:"Examples:",id:"examples-13",level:4},{value:"<code>set_strength</code>",id:"set_strength",level:3},{value:"Possible use:",id:"possible-use-20",level:4},{value:"Result:",id:"result-17",level:4},{value:"Examples:",id:"examples-14",level:4},{value:"<code>set_trust</code>",id:"set_trust",level:3},{value:"Possible use:",id:"possible-use-21",level:4},{value:"Result:",id:"result-18",level:4},{value:"Examples:",id:"examples-15",level:4},{value:"<code>set_truth</code>",id:"set_truth",level:3},{value:"Possible use:",id:"possible-use-22",level:4},{value:"Result:",id:"result-19",level:4},{value:"Examples:",id:"examples-16",level:4},{value:"<code>set_z</code>",id:"set_z",level:3},{value:"Possible use:",id:"possible-use-23",level:4},{value:"Result:",id:"result-20",level:4},{value:"Examples:",id:"examples-17",level:4},{value:"<code>shape_file</code>",id:"shape_file",level:3},{value:"Possible use:",id:"possible-use-24",level:4},{value:"Result:",id:"result-21",level:4},{value:"Special cases:",id:"special-cases-1",level:4},{value:"See also:",id:"see-also-1",level:4},{value:"<code>shuffle</code>",id:"shuffle",level:3},{value:"Possible use:",id:"possible-use-25",level:4},{value:"Result:",id:"result-22",level:4},{value:"Special cases:",id:"special-cases-2",level:4},{value:"Examples:",id:"examples-18",level:4},{value:"See also:",id:"see-also-2",level:4},{value:"<code>signum</code>",id:"signum",level:3},{value:"Possible use:",id:"possible-use-26",level:4},{value:"Result:",id:"result-23",level:4},{value:"Examples:",id:"examples-19",level:4},{value:"<code>simple_clustering_by_distance</code>",id:"simple_clustering_by_distance",level:3},{value:"Possible use:",id:"possible-use-27",level:4},{value:"Result:",id:"result-24",level:4},{value:"Examples:",id:"examples-20",level:4},{value:"See also:",id:"see-also-3",level:4},{value:"<code>simple_clustering_by_envelope_distance</code>",id:"simple_clustering_by_envelope_distance",level:3},{value:"<code>simplex_generator</code>",id:"simplex_generator",level:3},{value:"Possible use:",id:"possible-use-28",level:4},{value:"Result:",id:"result-25",level:4},{value:"Examples:",id:"examples-21",level:4},{value:"<code>simplification</code>",id:"simplification",level:3},{value:"Possible use:",id:"possible-use-29",level:4},{value:"Result:",id:"result-26",level:4},{value:"Comment:",id:"comment",level:4},{value:"Examples:",id:"examples-22",level:4},{value:"<code>sin</code>",id:"sin",level:3},{value:"Possible use:",id:"possible-use-30",level:4},{value:"Result:",id:"result-27",level:4},{value:"Special cases:",id:"special-cases-3",level:4},{value:"Examples:",id:"examples-23",level:4},{value:"See also:",id:"see-also-4",level:4},{value:"<code>sin_rad</code>",id:"sin_rad",level:3},{value:"Possible use:",id:"possible-use-31",level:4},{value:"Result:",id:"result-28",level:4},{value:"Examples:",id:"examples-24",level:4},{value:"See also:",id:"see-also-5",level:4},{value:"<code>since</code>",id:"since",level:3},{value:"Possible use:",id:"possible-use-32",level:4},{value:"Result:",id:"result-29",level:4},{value:"Examples:",id:"examples-25",level:4},{value:"<code>skeletonize</code>",id:"skeletonize",level:3},{value:"Possible use:",id:"possible-use-33",level:4},{value:"Result:",id:"result-30",level:4},{value:"Examples:",id:"examples-26",level:4},{value:"<code>skew</code>",id:"skew",level:3},{value:"Possible use:",id:"possible-use-34",level:4},{value:"Result:",id:"result-31",level:4},{value:"Comment:",id:"comment-1",level:4},{value:"Examples:",id:"examples-27",level:4},{value:"<code>skew_gauss</code>",id:"skew_gauss",level:3},{value:"Possible use:",id:"possible-use-35",level:4},{value:"Result:",id:"result-32",level:4},{value:"Examples:",id:"examples-28",level:4},{value:"See also:",id:"see-also-6",level:4},{value:"<code>skewness</code>",id:"skewness",level:3},{value:"Possible use:",id:"possible-use-36",level:4},{value:"Result:",id:"result-33",level:4},{value:"Special cases:",id:"special-cases-4",level:4},{value:"Examples:",id:"examples-29",level:4},{value:"<code>skill</code>",id:"skill",level:3},{value:"Possible use:",id:"possible-use-37",level:4},{value:"<code>smooth</code>",id:"smooth",level:3},{value:"Possible use:",id:"possible-use-38",level:4},{value:"Result:",id:"result-34",level:4},{value:"Examples:",id:"examples-30",level:4},{value:"<code>social_link</code>",id:"social_link",level:3},{value:"Possible use:",id:"possible-use-39",level:4},{value:"Result:",id:"result-35",level:4},{value:"<code>solid</code>",id:"solid",level:3},{value:"<code>sort</code>",id:"sort",level:3},{value:"<code>sort_by</code>",id:"sort_by",level:3},{value:"Possible use:",id:"possible-use-40",level:4},{value:"Result:",id:"result-36",level:4},{value:"Comment:",id:"comment-2",level:4},{value:"Special cases:",id:"special-cases-5",level:4},{value:"Examples:",id:"examples-31",level:4},{value:"See also:",id:"see-also-7",level:4},{value:"<code>source_of</code>",id:"source_of",level:3},{value:"Possible use:",id:"possible-use-41",level:4},{value:"Result:",id:"result-37",level:4},{value:"Special cases:",id:"special-cases-6",level:4},{value:"Examples:",id:"examples-32",level:4},{value:"See also:",id:"see-also-8",level:4},{value:"<code>spatial_graph</code>",id:"spatial_graph",level:3},{value:"Possible use:",id:"possible-use-42",level:4},{value:"Result:",id:"result-38",level:4},{value:"See also:",id:"see-also-9",level:4},{value:"<code>species</code>",id:"species",level:3},{value:"Possible use:",id:"possible-use-43",level:4},{value:"Result:",id:"result-39",level:4},{value:"Special cases:",id:"special-cases-7",level:4},{value:"Examples:",id:"examples-33",level:4},{value:"<code>species_of</code>",id:"species_of",level:3},{value:"<code>sphere</code>",id:"sphere",level:3},{value:"Possible use:",id:"possible-use-44",level:4},{value:"Result:",id:"result-40",level:4},{value:"Comment:",id:"comment-3",level:4},{value:"Special cases:",id:"special-cases-8",level:4},{value:"Examples:",id:"examples-34",level:4},{value:"See also:",id:"see-also-10",level:4},{value:"<code>split</code>",id:"split",level:3},{value:"Possible use:",id:"possible-use-45",level:4},{value:"Result:",id:"result-41",level:4},{value:"Examples:",id:"examples-35",level:4},{value:"See also:",id:"see-also-11",level:4},{value:"<code>split_at</code>",id:"split_at",level:3},{value:"Possible use:",id:"possible-use-46",level:4},{value:"Result:",id:"result-42",level:4},{value:"Special cases:",id:"special-cases-9",level:4},{value:"Examples:",id:"examples-36",level:4},{value:"<code>split_geometry</code>",id:"split_geometry",level:3},{value:"Possible use:",id:"possible-use-47",level:4},{value:"Result:",id:"result-43",level:4},{value:"Examples:",id:"examples-37",level:4},{value:"<code>split_in</code>",id:"split_in",level:3},{value:"Possible use:",id:"possible-use-48",level:4},{value:"Result:",id:"result-44",level:4},{value:"Examples:",id:"examples-38",level:4},{value:"See also:",id:"see-also-12",level:4},{value:"<code>split_lines</code>",id:"split_lines",level:3},{value:"Possible use:",id:"possible-use-49",level:4},{value:"Result:",id:"result-45",level:4},{value:"Examples:",id:"examples-39",level:4},{value:"<code>split_using</code>",id:"split_using",level:3},{value:"Possible use:",id:"possible-use-50",level:4},{value:"Result:",id:"result-46",level:4},{value:"Examples:",id:"examples-40",level:4},{value:"See also:",id:"see-also-13",level:4},{value:"<code>split_with</code>",id:"split_with",level:3},{value:"Possible use:",id:"possible-use-51",level:4},{value:"Result:",id:"result-47",level:4},{value:"Comment:",id:"comment-4",level:4},{value:"Examples:",id:"examples-41",level:4},{value:"<code>sqrt</code>",id:"sqrt",level:3},{value:"Possible use:",id:"possible-use-52",level:4},{value:"Result:",id:"result-48",level:4},{value:"Special cases:",id:"special-cases-10",level:4},{value:"Examples:",id:"examples-42",level:4},{value:"<code>square</code>",id:"square",level:3},{value:"Possible use:",id:"possible-use-53",level:4},{value:"Result:",id:"result-49",level:4},{value:"Comment:",id:"comment-5",level:4},{value:"Special cases:",id:"special-cases-11",level:4},{value:"Examples:",id:"examples-43",level:4},{value:"See also:",id:"see-also-14",level:4},{value:"<code>squircle</code>",id:"squircle",level:3},{value:"Possible use:",id:"possible-use-54",level:4},{value:"Result:",id:"result-50",level:4},{value:"Comment:",id:"comment-6",level:4},{value:"Special cases:",id:"special-cases-12",level:4},{value:"Examples:",id:"examples-44",level:4},{value:"See also:",id:"see-also-15",level:4},{value:"<code>stack</code>",id:"stack",level:3},{value:"Possible use:",id:"possible-use-55",level:4},{value:"<code>standard_deviation</code>",id:"standard_deviation",level:3},{value:"Possible use:",id:"possible-use-56",level:4},{value:"Result:",id:"result-51",level:4},{value:"Comment:",id:"comment-7",level:4},{value:"Examples:",id:"examples-45",level:4},{value:"See also:",id:"see-also-16",level:4},{value:"<code>step_sub_model</code>",id:"step_sub_model",level:3},{value:"Possible use:",id:"possible-use-57",level:4},{value:"Result:",id:"result-52",level:4},{value:"Comment:",id:"comment-8",level:4},{value:"<code>strahler</code>",id:"strahler",level:3},{value:"Possible use:",id:"possible-use-58",level:4},{value:"Result:",id:"result-53",level:4},{value:"<code>string</code>",id:"string",level:3},{value:"Possible use:",id:"possible-use-59",level:4},{value:"Result:",id:"result-54",level:4},{value:"Examples:",id:"examples-46",level:4},{value:"<code>student_area</code>",id:"student_area",level:3},{value:"Possible use:",id:"possible-use-60",level:4},{value:"Result:",id:"result-55",level:4},{value:"Examples:",id:"examples-47",level:4},{value:"<code>student_t_inverse</code>",id:"student_t_inverse",level:3},{value:"Possible use:",id:"possible-use-61",level:4},{value:"Result:",id:"result-56",level:4},{value:"Examples:",id:"examples-48",level:4},{value:"<code>subtract_days</code>",id:"subtract_days",level:3},{value:"<code>subtract_hours</code>",id:"subtract_hours",level:3},{value:"<code>subtract_minutes</code>",id:"subtract_minutes",level:3},{value:"<code>subtract_months</code>",id:"subtract_months",level:3},{value:"<code>subtract_ms</code>",id:"subtract_ms",level:3},{value:"<code>subtract_seconds</code>",id:"subtract_seconds",level:3},{value:"<code>subtract_weeks</code>",id:"subtract_weeks",level:3},{value:"<code>subtract_years</code>",id:"subtract_years",level:3},{value:"<code>successors_of</code>",id:"successors_of",level:3},{value:"Possible use:",id:"possible-use-62",level:4},{value:"Result:",id:"result-57",level:4},{value:"Examples:",id:"examples-49",level:4},{value:"See also:",id:"see-also-17",level:4},{value:"<code>sum</code>",id:"sum",level:3},{value:"Possible use:",id:"possible-use-63",level:4},{value:"Result:",id:"result-58",level:4},{value:"Comment:",id:"comment-9",level:4},{value:"Special cases:",id:"special-cases-13",level:4},{value:"See also:",id:"see-also-18",level:4},{value:"<code>sum_of</code>",id:"sum_of",level:3},{value:"Possible use:",id:"possible-use-64",level:4},{value:"Result:",id:"result-59",level:4},{value:"Comment:",id:"comment-10",level:4},{value:"Special cases:",id:"special-cases-14",level:4},{value:"Examples:",id:"examples-50",level:4},{value:"See also:",id:"see-also-19",level:4},{value:"<code>svg_file</code>",id:"svg_file",level:3},{value:"Possible use:",id:"possible-use-65",level:4},{value:"Result:",id:"result-60",level:4},{value:"Special cases:",id:"special-cases-15",level:4},{value:"See also:",id:"see-also-20",level:4},{value:"<code>tan</code>",id:"tan",level:3},{value:"Possible use:",id:"possible-use-66",level:4},{value:"Result:",id:"result-61",level:4},{value:"Special cases:",id:"special-cases-16",level:4},{value:"Examples:",id:"examples-51",level:4},{value:"See also:",id:"see-also-21",level:4},{value:"<code>tan_rad</code>",id:"tan_rad",level:3},{value:"Possible use:",id:"possible-use-67",level:4},{value:"Result:",id:"result-62",level:4},{value:"Examples:",id:"examples-52",level:4},{value:"See also:",id:"see-also-22",level:4},{value:"<code>tanh</code>",id:"tanh",level:3},{value:"Possible use:",id:"possible-use-68",level:4},{value:"Result:",id:"result-63",level:4},{value:"Examples:",id:"examples-53",level:4},{value:"<code>target_of</code>",id:"target_of",level:3},{value:"Possible use:",id:"possible-use-69",level:4},{value:"Result:",id:"result-64",level:4},{value:"Special cases:",id:"special-cases-17",level:4},{value:"Examples:",id:"examples-54",level:4},{value:"See also:",id:"see-also-23",level:4},{value:"<code>teapot</code>",id:"teapot",level:3},{value:"Possible use:",id:"possible-use-70",level:4},{value:"Result:",id:"result-65",level:4},{value:"Comment:",id:"comment-11",level:4},{value:"Special cases:",id:"special-cases-18",level:4},{value:"Examples:",id:"examples-55",level:4},{value:"See also:",id:"see-also-24",level:4},{value:"<code>text_file</code>",id:"text_file",level:3},{value:"Possible use:",id:"possible-use-71",level:4},{value:"Result:",id:"result-66",level:4},{value:"Special cases:",id:"special-cases-19",level:4},{value:"See also:",id:"see-also-25",level:4},{value:"<code>TGauss</code>",id:"tgauss",level:3},{value:"<code>threeds_file</code>",id:"threeds_file",level:3},{value:"Possible use:",id:"possible-use-72",level:4},{value:"Result:",id:"result-67",level:4},{value:"Special cases:",id:"special-cases-20",level:4},{value:"See also:",id:"see-also-26",level:4},{value:"<code>to</code>",id:"to",level:3},{value:"Possible use:",id:"possible-use-73",level:4},{value:"Result:",id:"result-68",level:4},{value:"Comment:",id:"comment-12",level:4},{value:"Examples:",id:"examples-56",level:4},{value:"See also:",id:"see-also-27",level:4},{value:"<code>to_GAMA_CRS</code>",id:"to_gama_crs",level:3},{value:"Possible use:",id:"possible-use-74",level:4},{value:"Special cases:",id:"special-cases-21",level:4},{value:"<code>to_gaml</code>",id:"to_gaml",level:3},{value:"Possible use:",id:"possible-use-75",level:4},{value:"Result:",id:"result-69",level:4},{value:"Examples:",id:"examples-57",level:4},{value:"<code>to_rectangles</code>",id:"to_rectangles",level:3},{value:"Possible use:",id:"possible-use-76",level:4},{value:"Result:",id:"result-70",level:4},{value:"Examples:",id:"examples-58",level:4},{value:"<code>to_segments</code>",id:"to_segments",level:3},{value:"Possible use:",id:"possible-use-77",level:4},{value:"Result:",id:"result-71",level:4},{value:"Examples:",id:"examples-59",level:4},{value:"<code>to_squares</code>",id:"to_squares",level:3},{value:"Possible use:",id:"possible-use-78",level:4},{value:"Result:",id:"result-72",level:4},{value:"Examples:",id:"examples-60",level:4},{value:"<code>to_sub_geometries</code>",id:"to_sub_geometries",level:3},{value:"Possible use:",id:"possible-use-79",level:4},{value:"Result:",id:"result-73",level:4},{value:"Examples:",id:"examples-61",level:4},{value:"<code>to_triangles</code>",id:"to_triangles",level:3},{value:"<code>tokenize</code>",id:"tokenize",level:3},{value:"<code>topology</code>",id:"topology",level:3},{value:"Possible use:",id:"possible-use-80",level:4},{value:"Result:",id:"result-74",level:4},{value:"Special cases:",id:"special-cases-22",level:4},{value:"Examples:",id:"examples-62",level:4},{value:"See also:",id:"see-also-28",level:4},{value:"<code>topology</code>",id:"topology-1",level:3},{value:"Possible use:",id:"possible-use-81",level:4},{value:"<code>touches</code>",id:"touches",level:3},{value:"Possible use:",id:"possible-use-82",level:4},{value:"Result:",id:"result-75",level:4},{value:"Comment:",id:"comment-13",level:4},{value:"Special cases:",id:"special-cases-23",level:4},{value:"Examples:",id:"examples-63",level:4},{value:"See also:",id:"see-also-29",level:4},{value:"<code>towards</code>",id:"towards",level:3},{value:"Possible use:",id:"possible-use-83",level:4},{value:"Result:",id:"result-76",level:4},{value:"Examples:",id:"examples-64",level:4},{value:"See also:",id:"see-also-30",level:4},{value:"<code>trace</code>",id:"trace",level:3},{value:"Possible use:",id:"possible-use-84",level:4},{value:"Result:",id:"result-77",level:4},{value:"Examples:",id:"examples-65",level:4},{value:"<code>transformed_by</code>",id:"transformed_by",level:3},{value:"Possible use:",id:"possible-use-85",level:4},{value:"Result:",id:"result-78",level:4},{value:"Examples:",id:"examples-66",level:4},{value:"See also:",id:"see-also-31",level:4},{value:"<code>translated_by</code>",id:"translated_by",level:3},{value:"Possible use:",id:"possible-use-86",level:4},{value:"Result:",id:"result-79",level:4},{value:"Examples:",id:"examples-67",level:4},{value:"See also:",id:"see-also-32",level:4},{value:"<code>translated_to</code>",id:"translated_to",level:3},{value:"<code>transpose</code>",id:"transpose",level:3},{value:"Possible use:",id:"possible-use-87",level:4},{value:"Result:",id:"result-80",level:4},{value:"Examples:",id:"examples-68",level:4},{value:"<code>triangle</code>",id:"triangle",level:3},{value:"Possible use:",id:"possible-use-88",level:4},{value:"Result:",id:"result-81",level:4},{value:"Comment:",id:"comment-14",level:4},{value:"Special cases:",id:"special-cases-24",level:4},{value:"Examples:",id:"examples-69",level:4},{value:"See also:",id:"see-also-33",level:4},{value:"<code>triangulate</code>",id:"triangulate",level:3},{value:"Possible use:",id:"possible-use-89",level:4},{value:"Result:",id:"result-82",level:4},{value:"Examples:",id:"examples-70",level:4},{value:"<code>truncated_gauss</code>",id:"truncated_gauss",level:3},{value:"Possible use:",id:"possible-use-90",level:4},{value:"Result:",id:"result-83",level:4},{value:"Special cases:",id:"special-cases-25",level:4},{value:"Examples:",id:"examples-71",level:4},{value:"See also:",id:"see-also-34",level:4},{value:"<code>type_of</code>",id:"type_of",level:3},{value:"Possible use:",id:"possible-use-91",level:4},{value:"Result:",id:"result-84",level:4},{value:"Examples:",id:"examples-72",level:4},{value:"<code>undirected</code>",id:"undirected",level:3},{value:"Possible use:",id:"possible-use-92",level:4},{value:"Result:",id:"result-85",level:4},{value:"Comment:",id:"comment-15",level:4},{value:"See also:",id:"see-also-35",level:4},{value:"<code>union</code>",id:"union",level:3},{value:"Possible use:",id:"possible-use-93",level:4},{value:"Result:",id:"result-86",level:4},{value:"Special cases:",id:"special-cases-26",level:4},{value:"Examples:",id:"examples-73",level:4},{value:"See also:",id:"see-also-36",level:4},{value:"<code>unknown</code>",id:"unknown",level:3},{value:"Possible use:",id:"possible-use-94",level:4},{value:"<code>until</code>",id:"until",level:3},{value:"Possible use:",id:"possible-use-95",level:4},{value:"Result:",id:"result-87",level:4},{value:"Examples:",id:"examples-74",level:4},{value:"<code>upper_case</code>",id:"upper_case",level:3},{value:"Possible use:",id:"possible-use-96",level:4},{value:"Result:",id:"result-88",level:4},{value:"Examples:",id:"examples-75",level:4},{value:"See also:",id:"see-also-37",level:4},{value:"<code>use_cache</code>",id:"use_cache",level:3},{value:"Possible use:",id:"possible-use-97",level:4},{value:"Result:",id:"result-89",level:4},{value:"Comment:",id:"comment-16",level:4},{value:"See also:",id:"see-also-38",level:4},{value:"<code>user_input</code>",id:"user_input",level:3},{value:"Possible use:",id:"possible-use-98",level:4},{value:"Result:",id:"result-90",level:4},{value:"Examples:",id:"examples-76",level:4},{value:"<code>using</code>",id:"using",level:3},{value:"Possible use:",id:"possible-use-99",level:4},{value:"Result:",id:"result-91",level:4},{value:"Special cases:",id:"special-cases-27",level:4},{value:"Examples:",id:"examples-77",level:4},{value:"<code>variance</code>",id:"variance",level:3},{value:"Possible use:",id:"possible-use-100",level:4},{value:"Result:",id:"result-92",level:4},{value:"Comment:",id:"comment-17",level:4},{value:"Examples:",id:"examples-78",level:4},{value:"See also:",id:"see-also-39",level:4},{value:"<code>variance</code>",id:"variance-1",level:3},{value:"Possible use:",id:"possible-use-101",level:4},{value:"Result:",id:"result-93",level:4},{value:"Comment:",id:"comment-18",level:4},{value:"Examples:",id:"examples-79",level:4},{value:"<code>variance_of</code>",id:"variance_of",level:3},{value:"Possible use:",id:"possible-use-102",level:4},{value:"Result:",id:"result-94",level:4},{value:"Comment:",id:"comment-19",level:4},{value:"Examples:",id:"examples-80",level:4},{value:"See also:",id:"see-also-40",level:4},{value:"<code>vertical</code>",id:"vertical",level:3},{value:"Possible use:",id:"possible-use-103",level:4},{value:"<code>voronoi</code>",id:"voronoi",level:3},{value:"Possible use:",id:"possible-use-104",level:4},{value:"Result:",id:"result-95",level:4},{value:"Examples:",id:"examples-81",level:4},{value:"<code>weibull_density</code>",id:"weibull_density",level:3},{value:"Possible use:",id:"possible-use-105",level:4},{value:"Result:",id:"result-96",level:4},{value:"Examples:",id:"examples-82",level:4},{value:"See also:",id:"see-also-41",level:4},{value:"<code>weibull_rnd</code>",id:"weibull_rnd",level:3},{value:"Possible use:",id:"possible-use-106",level:4},{value:"Result:",id:"result-97",level:4},{value:"Examples:",id:"examples-83",level:4},{value:"See also:",id:"see-also-42",level:4},{value:"<code>weibull_trunc_rnd</code>",id:"weibull_trunc_rnd",level:3},{value:"Possible use:",id:"possible-use-107",level:4},{value:"Result:",id:"result-98",level:4},{value:"Special cases:",id:"special-cases-28",level:4},{value:"See also:",id:"see-also-43",level:4},{value:"<code>weight_of</code>",id:"weight_of",level:3},{value:"Possible use:",id:"possible-use-108",level:4},{value:"Result:",id:"result-99",level:4},{value:"Comment:",id:"comment-20",level:4},{value:"Special cases:",id:"special-cases-29",level:4},{value:"Examples:",id:"examples-84",level:4},{value:"<code>weighted_means_DM</code>",id:"weighted_means_dm",level:3},{value:"Possible use:",id:"possible-use-109",level:4},{value:"Result:",id:"result-100",level:4},{value:"Special cases:",id:"special-cases-30",level:4},{value:"Examples:",id:"examples-85",level:4},{value:"See also:",id:"see-also-44",level:4},{value:"<code>where</code>",id:"where",level:3},{value:"Possible use:",id:"possible-use-110",level:4},{value:"Result:",id:"result-101",level:4},{value:"Comment:",id:"comment-21",level:4},{value:"Special cases:",id:"special-cases-31",level:4},{value:"Examples:",id:"examples-86",level:4},{value:"See also:",id:"see-also-45",level:4},{value:"<code>with_max_of</code>",id:"with_max_of",level:3},{value:"Possible use:",id:"possible-use-111",level:4},{value:"Result:",id:"result-102",level:4},{value:"Comment:",id:"comment-22",level:4},{value:"Special cases:",id:"special-cases-32",level:4},{value:"Examples:",id:"examples-87",level:4},{value:"See also:",id:"see-also-46",level:4},{value:"<code>with_min_of</code>",id:"with_min_of",level:3},{value:"Possible use:",id:"possible-use-112",level:4},{value:"Result:",id:"result-103",level:4},{value:"Comment:",id:"comment-23",level:4},{value:"Special cases:",id:"special-cases-33",level:4},{value:"Examples:",id:"examples-88",level:4},{value:"See also:",id:"see-also-47",level:4},{value:"<code>with_optimizer_type</code>",id:"with_optimizer_type",level:3},{value:"Possible use:",id:"possible-use-113",level:4},{value:"Result:",id:"result-104",level:4},{value:"Comment:",id:"comment-24",level:4},{value:"Examples:",id:"examples-89",level:4},{value:"See also:",id:"see-also-48",level:4},{value:"<code>with_precision</code>",id:"with_precision",level:3},{value:"Possible use:",id:"possible-use-114",level:4},{value:"Result:",id:"result-105",level:4},{value:"Examples:",id:"examples-90",level:4},{value:"See also:",id:"see-also-49",level:4},{value:"<code>with_values</code>",id:"with_values",level:3},{value:"Possible use:",id:"possible-use-115",level:4},{value:"Result:",id:"result-106",level:4},{value:"Examples:",id:"examples-91",level:4},{value:"<code>with_weights</code>",id:"with_weights",level:3},{value:"Possible use:",id:"possible-use-116",level:4},{value:"Result:",id:"result-107",level:4},{value:"Comment:",id:"comment-25",level:4},{value:"Special cases:",id:"special-cases-34",level:4},{value:"<code>without_holes</code>",id:"without_holes",level:3},{value:"Possible use:",id:"possible-use-117",level:4},{value:"Result:",id:"result-108",level:4},{value:"Examples:",id:"examples-92",level:4},{value:"<code>writable</code>",id:"writable",level:3},{value:"Possible use:",id:"possible-use-118",level:4},{value:"Result:",id:"result-109",level:4},{value:"Comment:",id:"comment-26",level:4},{value:"Examples:",id:"examples-93",level:4},{value:"See also:",id:"see-also-50",level:4},{value:"<code>xml_file</code>",id:"xml_file",level:3},{value:"Possible use:",id:"possible-use-119",level:4},{value:"Result:",id:"result-110",level:4},{value:"Special cases:",id:"special-cases-35",level:4},{value:"See also:",id:"see-also-51",level:4},{value:"<code>xor</code>",id:"xor",level:3},{value:"Possible use:",id:"possible-use-120",level:4},{value:"Result:",id:"result-111",level:4},{value:"Comment:",id:"comment-27",level:4},{value:"Examples:",id:"examples-94",level:4},{value:"See also:",id:"see-also-52",level:4},{value:"<code>years_between</code>",id:"years_between",level:3},{value:"Possible use:",id:"possible-use-121",level:4},{value:"Result:",id:"result-112",level:4},{value:"Examples:",id:"examples-95",level:4}],u={toc:d},k="wrapper";function h(e){var t=e.components,a=(0,r.Z)(e,i);return(0,l.kt)(k,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"This file is automatically generated from java files. Do Not Edit It.")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"definition"},"Definition"),(0,l.kt)("p",null,"Operators in the GAML language are used to compose complex expressions. An operator performs a function on one, two, or n operands (which are other expressions and thus may be themselves composed of operators) and returns the result of this function. "),(0,l.kt)("p",null,"Most of them use a classical prefixed functional syntax (i.e. ",(0,l.kt)("inlineCode",{parentName:"p"},"operator_name(operand1, operand2, operand3)"),", see below), with the exception of arithmetic (e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},"+"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"/"),"), logical (",(0,l.kt)("inlineCode",{parentName:"p"},"and"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"or"),"), comparison (e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},">"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"<"),"), access (",(0,l.kt)("inlineCode",{parentName:"p"},"."),", ",(0,l.kt)("inlineCode",{parentName:"p"},"[..]"),") and pair (",(0,l.kt)("inlineCode",{parentName:"p"},"::"),") operators, which require an infixed notation (i.e. ",(0,l.kt)("inlineCode",{parentName:"p"},"operand1 operator_symbol operand1"),"). "),(0,l.kt)("p",null,"The ternary functional if-else operator, ",(0,l.kt)("inlineCode",{parentName:"p"},"? :"),", uses a special infixed syntax composed with two symbols (e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},"operand1 ? operand2 : operand3"),"). Two unary operators (",(0,l.kt)("inlineCode",{parentName:"p"},"-")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"!"),") use a traditional prefixed syntax that does not require parentheses unless the operand is itself a complex expression (e.g. ",(0,l.kt)("inlineCode",{parentName:"p"}," - 10"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"! (operand1 or operand2)"),"). "),(0,l.kt)("p",null,"Finally, special constructor operators (",(0,l.kt)("inlineCode",{parentName:"p"},"{...}")," for constructing points, ",(0,l.kt)("inlineCode",{parentName:"p"},"[...]")," for constructing lists and maps) will require their operands to be placed between their two symbols (e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},"{1,2,3}"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"[operand1, operand2, ..., operandn]")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"[key1::value1, key2::value2... keyn::valuen]"),")."),(0,l.kt)("p",null,"With the exception of these special cases above, the following rules apply to the syntax of operators:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"if they only have one operand, the functional prefixed syntax is mandatory (e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"operator_name(operand1)"),")"),(0,l.kt)("li",{parentName:"ul"},"if they have two arguments, either the functional prefixed syntax (e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"operator_name(operand1, operand2)"),") or the infixed syntax (e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"operand1 operator_name operand2"),") can be used."),(0,l.kt)("li",{parentName:"ul"},"if they have more than two arguments, either the functional prefixed syntax (e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"operator_name(operand1, operand2, ..., operand)"),") or a special infixed syntax with the first operand on the left-hand side of the operator name (e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"operand1 operator_name(operand2, ..., operand)"),") can be used.")),(0,l.kt)("p",null,"All of these alternative syntaxes are completely equivalent."),(0,l.kt)("p",null,"Operators in GAML are purely functional, i.e. they are guaranteed to not have any side effects on their operands. For instance, the ",(0,l.kt)("inlineCode",{parentName:"p"},"shuffle")," operator, which randomizes the positions of elements in a list, does not modify its list operand but returns a new shuffled list."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"priority-between-operators"},"Priority between operators"),(0,l.kt)("p",null,"The priority of operators determines, in the case of complex expressions composed of several operators, which one(s) will be evaluated first."),(0,l.kt)("p",null,"GAML follows in general the traditional priorities attributed to arithmetic, boolean, comparison operators, with some twists. Namely:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the constructor operators, like ",(0,l.kt)("inlineCode",{parentName:"li"},"::"),", used to compose pairs of operands, have the lowest priority of all operators (e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"a > b :: b > c")," will return a pair of boolean values, which means that the two comparisons are evaluated before the operator applies. Similarly, ",(0,l.kt)("inlineCode",{parentName:"li"},"[a > 10, b > 5]")," will return a list of boolean values."),(0,l.kt)("li",{parentName:"ul"},"it is followed by the ",(0,l.kt)("inlineCode",{parentName:"li"},"?:")," operator, the functional if-else (e.g. ",(0,l.kt)("inlineCode",{parentName:"li"}," a > b ? a + 10 : a - 10")," will return the result of the if-else)."),(0,l.kt)("li",{parentName:"ul"},"next are the logical operators, ",(0,l.kt)("inlineCode",{parentName:"li"},"and")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"or")," (e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"a > b or b > c")," will return the value of the test)"),(0,l.kt)("li",{parentName:"ul"},"next are the comparison operators (i.e. ",(0,l.kt)("inlineCode",{parentName:"li"},">"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"<"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"<="),", ",(0,l.kt)("inlineCode",{parentName:"li"},">="),", ",(0,l.kt)("inlineCode",{parentName:"li"},"="),", ",(0,l.kt)("inlineCode",{parentName:"li"},"!="),")"),(0,l.kt)("li",{parentName:"ul"},"next the arithmetic operators in their logical order (multiplicative operators have a higher priority than additive operators)"),(0,l.kt)("li",{parentName:"ul"},"next the unary operators ",(0,l.kt)("inlineCode",{parentName:"li"},"-")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"!")),(0,l.kt)("li",{parentName:"ul"},"next the access operators ",(0,l.kt)("inlineCode",{parentName:"li"},".")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"[]")," (e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"{1,2,3}.x > 20 + {4,5,6}.y")," will return the result of the comparison between the x and y ordinates of the two points)"),(0,l.kt)("li",{parentName:"ul"},"and finally the functional operators, which have the highest priority of all.")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"using-actions-as-operators"},"Using actions as operators"),(0,l.kt)("p",null,"Actions defined in species can be used as operators, provided they are called on the correct agent. The syntax is that of normal functional operators, but the agent that will perform the action must be added as the first operand."),(0,l.kt)("p",null,"For instance, if the following species is defined:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"species spec1 {\n        int min(int x, int y) {\n                return x > y ? x : y;\n        }\n}\n")),(0,l.kt)("p",null,"Any agent instance of spec1 can use ",(0,l.kt)("inlineCode",{parentName:"p"},"min")," as an operator (if the action conflicts with an existing operator, a warning will be emitted). For instance, in the same model, the following line is perfectly acceptable:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"global {\n        init {\n                create spec1;\n                spec1 my_agent <- spec1[0];\n                int the_min <- my_agent min(10,20); // or min(my_agent, 10, 20);\n        }\n}\n")),(0,l.kt)("p",null,"If the action doesn't have any operands, the syntax to use is ",(0,l.kt)("inlineCode",{parentName:"p"},"my_agent the_action()"),". Finally, if it does not return a value, it might still be used but is considering as returning a value of type ",(0,l.kt)("inlineCode",{parentName:"p"},"unknown")," (e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},"unknown result <- my_agent the_action(op1, op2);"),")."),(0,l.kt)("p",null,"Note that due to the fact that actions are written by modelers, the general functional contract is not respected in that case: actions might perfectly have side effects on their operands (including the agent)."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"table-of-contents"},"Table of Contents"),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"operators-by-categories"},"Operators by categories"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"3d"},"3D"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#box"},"box"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#cone3d"},"cone3D"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#cube"},"cube"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#cylinder"},"cylinder"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#dem"},"dem"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#hexagon"},"hexagon"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#pyramid"},"pyramid"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#set_z"},"set_z"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#sphere"},"sphere"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#teapot"},"teapot"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"arithmetic-operators"},"Arithmetic operators"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#-"},"-"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#/"},"/"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#%5E"},"^"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#*"},"*"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#+"},"+"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#abs"},"abs"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#acos"},"acos"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#asin"},"asin"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#atan"},"atan"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#atan2"},"atan2"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#ceil"},"ceil"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#cos"},"cos"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#cos_rad"},"cos_rad"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#div"},"div"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#even"},"even"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#exp"},"exp"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#fact"},"fact"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#floor"},"floor"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#hypot"},"hypot"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#is_finite"},"is_finite"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#is_number"},"is_number"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#ln"},"ln"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#log"},"log"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#mod"},"mod"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#round"},"round"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#signum"},"signum"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#sin"},"sin"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#sin_rad"},"sin_rad"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#sqrt"},"sqrt"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#tan"},"tan"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#tan_rad"},"tan_rad"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#tanh"},"tanh"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#with_precision"},"with_precision"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"bdi"},"BDI"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#add_values"},"add_values"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#and"},"and"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#eval_when"},"eval_when"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_about"},"get_about"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_agent"},"get_agent"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_agent_cause"},"get_agent_cause"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_belief_op"},"get_belief_op"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_belief_with_name_op"},"get_belief_with_name_op"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_beliefs_op"},"get_beliefs_op"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_beliefs_with_name_op"},"get_beliefs_with_name_op"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_current_intention_op"},"get_current_intention_op"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_decay"},"get_decay"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_desire_op"},"get_desire_op"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_desire_with_name_op"},"get_desire_with_name_op"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_desires_op"},"get_desires_op"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_desires_with_name_op"},"get_desires_with_name_op"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_dominance"},"get_dominance"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_familiarity"},"get_familiarity"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_ideal_op"},"get_ideal_op"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_ideal_with_name_op"},"get_ideal_with_name_op"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_ideals_op"},"get_ideals_op"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_ideals_with_name_op"},"get_ideals_with_name_op"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_intensity"},"get_intensity"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_intention_op"},"get_intention_op"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_intention_with_name_op"},"get_intention_with_name_op"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_intentions_op"},"get_intentions_op"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_intentions_with_name_op"},"get_intentions_with_name_op"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_lifetime"},"get_lifetime"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_liking"},"get_liking"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_modality"},"get_modality"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_obligation_op"},"get_obligation_op"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_obligation_with_name_op"},"get_obligation_with_name_op"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_obligations_op"},"get_obligations_op"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_obligations_with_name_op"},"get_obligations_with_name_op"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_plan_name"},"get_plan_name"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_predicate"},"get_predicate"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_solidarity"},"get_solidarity"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_strength"},"get_strength"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_super_intention"},"get_super_intention"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_trust"},"get_trust"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_truth"},"get_truth"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_uncertainties_op"},"get_uncertainties_op"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_uncertainties_with_name_op"},"get_uncertainties_with_name_op"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_uncertainty_op"},"get_uncertainty_op"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_uncertainty_with_name_op"},"get_uncertainty_with_name_op"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get_values"},"get_values"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#has_belief_op"},"has_belief_op"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#has_belief_with_name_op"},"has_belief_with_name_op"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#has_desire_op"},"has_desire_op"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#has_desire_with_name_op"},"has_desire_with_name_op"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#has_ideal_op"},"has_ideal_op"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#has_ideal_with_name_op"},"has_ideal_with_name_op"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#has_intention_op"},"has_intention_op"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#has_intention_with_name_op"},"has_intention_with_name_op"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#has_obligation_op"},"has_obligation_op"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#has_obligation_with_name_op"},"has_obligation_with_name_op"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#has_uncertainty_op"},"has_uncertainty_op"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#has_uncertainty_with_name_op"},"has_uncertainty_with_name_op"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#new_emotion"},"new_emotion"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#new_mental_state"},"new_mental_state"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#new_predicate"},"new_predicate"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#new_social_link"},"new_social_link"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#not"},"not"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#or"},"or"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#set_about"},"set_about"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#set_agent"},"set_agent"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#set_agent_cause"},"set_agent_cause"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#set_decay"},"set_decay"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#set_dominance"},"set_dominance"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#set_familiarity"},"set_familiarity"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#set_intensity"},"set_intensity"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#set_lifetime"},"set_lifetime"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#set_liking"},"set_liking"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#set_modality"},"set_modality"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#set_predicate"},"set_predicate"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#set_solidarity"},"set_solidarity"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#set_strength"},"set_strength"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#set_trust"},"set_trust"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#set_truth"},"set_truth"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#with_values"},"with_values"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"casting-operators"},"Casting operators"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#as"},"as"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#as_int"},"as_int"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#as_matrix"},"as_matrix"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#font"},"font"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#is"},"is"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#is_skill"},"is_skill"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#list_with"},"list_with"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#matrix_with"},"matrix_with"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#species"},"species"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#to_gaml"},"to_gaml"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#topology"},"topology"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"color-related-operators"},"Color-related operators"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#-"},"-"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#/"},"/"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#*"},"*"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#+"},"+"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#blend"},"blend"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#brewer_colors"},"brewer_colors"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#brewer_palettes"},"brewer_palettes"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#grayscale"},"grayscale"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#hsb"},"hsb"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#mean"},"mean"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#median"},"median"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#rgb"},"rgb"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#rnd_color"},"rnd_color"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#sum"},"sum"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"comparison-operators"},"Comparison operators"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#!="},"!="),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#%3C"},"<"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#%3C="},"<="),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#="},"="),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#%3E"},">"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#%3E="},">="),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#between"},"between"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"containers-related-operators"},"Containers-related operators"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#-"},"-"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#::"},"::"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#+"},"+"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#accumulate"},"accumulate"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#all_match"},"all_match"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#among"},"among"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#at"},"at"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#collect"},"collect"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#contains"},"contains"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#contains_all"},"contains_all"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#contains_any"},"contains_any"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#contains_key"},"contains_key"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#count"},"count"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#distinct"},"distinct"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#empty"},"empty"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#every"},"every"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#first"},"first"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#first_with"},"first_with"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get"},"get"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#group_by"},"group_by"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#in"},"in"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#index_by"},"index_by"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#inter"},"inter"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#interleave"},"interleave"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#internal_at"},"internal_at"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#internal_integrated_value"},"internal_integrated_value"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#last"},"last"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#last_with"},"last_with"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#length"},"length"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#max"},"max"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#max_of"},"max_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#mean"},"mean"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#mean_of"},"mean_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#median"},"median"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#min"},"min"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#min_of"},"min_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#mul"},"mul"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#none_matches"},"none_matches"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#one_matches"},"one_matches"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#one_of"},"one_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#product_of"},"product_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#range"},"range"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#reverse"},"reverse"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#shuffle"},"shuffle"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#sort_by"},"sort_by"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#split"},"split"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#split_in"},"split_in"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#split_using"},"split_using"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#sum"},"sum"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#sum_of"},"sum_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#union"},"union"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#variance_of"},"variance_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#where"},"where"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#with_max_of"},"with_max_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#with_min_of"},"with_min_of"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"date-related-operators"},"Date-related operators"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#-"},"-"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#!="},"!="),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#+"},"+"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#%3C"},"<"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#%3C="},"<="),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#="},"="),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#%3E"},">"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#%3E="},">="),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#after"},"after"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#before"},"before"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#between"},"between"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#every"},"every"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#milliseconds_between"},"milliseconds_between"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#minus_days"},"minus_days"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#minus_hours"},"minus_hours"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#minus_minutes"},"minus_minutes"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#minus_months"},"minus_months"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#minus_ms"},"minus_ms"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#minus_weeks"},"minus_weeks"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#minus_years"},"minus_years"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#months_between"},"months_between"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#plus_days"},"plus_days"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#plus_hours"},"plus_hours"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#plus_minutes"},"plus_minutes"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#plus_months"},"plus_months"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#plus_ms"},"plus_ms"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#plus_weeks"},"plus_weeks"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#plus_years"},"plus_years"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#since"},"since"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#to"},"to"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#until"},"until"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#years_between"},"years_between"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"dates"},"Dates"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"displays"},"Displays"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#horizontal"},"horizontal"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#stack"},"stack"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#vertical"},"vertical"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"driving-operators"},"Driving operators"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#as_driving_graph"},"as_driving_graph"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"edge"},"edge"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#edge_between"},"edge_between"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#strahler"},"strahler"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"edp-related-operators"},"EDP-related operators"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#diff"},"diff"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#diff2"},"diff2"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"files-related-operators"},"Files-related operators"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#crs"},"crs"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#csv_file"},"csv_file"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#dxf_file"},"dxf_file"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#evaluate_sub_model"},"evaluate_sub_model"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#file_exists"},"file_exists"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#folder"},"folder"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#folder_exists"},"folder_exists"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#gaml_file"},"gaml_file"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#geojson_file"},"geojson_file"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#get"},"get"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#gif_file"},"gif_file"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#gml_file"},"gml_file"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#grid_file"},"grid_file"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#image_file"},"image_file"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#is_csv"},"is_csv"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#is_dxf"},"is_dxf"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#is_gaml"},"is_gaml"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#is_geojson"},"is_geojson"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#is_gif"},"is_gif"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#is_gml"},"is_gml"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#is_grid"},"is_grid"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#is_image"},"is_image"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#is_json"},"is_json"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#is_obj"},"is_obj"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#is_osm"},"is_osm"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#is_pgm"},"is_pgm"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#is_property"},"is_property"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#is_r"},"is_R"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#is_saved_simulation"},"is_saved_simulation"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#is_shape"},"is_shape"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#is_svg"},"is_svg"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#is_text"},"is_text"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#is_threeds"},"is_threeds"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#is_xml"},"is_xml"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#json_file"},"json_file"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#new_folder"},"new_folder"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#obj_file"},"obj_file"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#osm_file"},"osm_file"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#pgm_file"},"pgm_file"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#property_file"},"property_file"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#r_file"},"R_file"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#read"},"read"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#saved_simulation_file"},"saved_simulation_file"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#shape_file"},"shape_file"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#step_sub_model"},"step_sub_model"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#svg_file"},"svg_file"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#text_file"},"text_file"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#threeds_file"},"threeds_file"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#writable"},"writable"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#xml_file"},"xml_file"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"fipa-related-operators"},"FIPA-related operators"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#conversation"},"conversation"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#message"},"message"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"gamametatype"},"GamaMetaType"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#type_of"},"type_of"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"graphs-related-operators"},"Graphs-related operators"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#add_edge"},"add_edge"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#add_node"},"add_node"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#adjacency"},"adjacency"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#agent_from_geometry"},"agent_from_geometry"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#all_pairs_shortest_path"},"all_pairs_shortest_path"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#alpha_index"},"alpha_index"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#as_distance_graph"},"as_distance_graph"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#as_edge_graph"},"as_edge_graph"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#as_intersection_graph"},"as_intersection_graph"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#as_path"},"as_path"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#beta_index"},"beta_index"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#betweenness_centrality"},"betweenness_centrality"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#biggest_cliques_of"},"biggest_cliques_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#connected_components_of"},"connected_components_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#connectivity_index"},"connectivity_index"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#contains_edge"},"contains_edge"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#contains_vertex"},"contains_vertex"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#degree_of"},"degree_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#directed"},"directed"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#edge"},"edge"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#edge_between"},"edge_between"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#edge_betweenness"},"edge_betweenness"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#edges"},"edges"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#gamma_index"},"gamma_index"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#generate_barabasi_albert"},"generate_barabasi_albert"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#generate_complete_graph"},"generate_complete_graph"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#generate_watts_strogatz"},"generate_watts_strogatz"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#grid_cells_to_graph"},"grid_cells_to_graph"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#in_degree_of"},"in_degree_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#in_edges_of"},"in_edges_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#layout_circle"},"layout_circle"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#layout_force"},"layout_force"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#layout_grid"},"layout_grid"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#load_graph_from_file"},"load_graph_from_file"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#load_shortest_paths"},"load_shortest_paths"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#main_connected_component"},"main_connected_component"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#max_flow_between"},"max_flow_between"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#maximal_cliques_of"},"maximal_cliques_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#nb_cycles"},"nb_cycles"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#neighbors_of"},"neighbors_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#node"},"node"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#nodes"},"nodes"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#out_degree_of"},"out_degree_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#out_edges_of"},"out_edges_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#path_between"},"path_between"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#paths_between"},"paths_between"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#predecessors_of"},"predecessors_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#remove_node_from"},"remove_node_from"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#rewire_n"},"rewire_n"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#source_of"},"source_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#spatial_graph"},"spatial_graph"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#strahler"},"strahler"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#successors_of"},"successors_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#sum"},"sum"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#target_of"},"target_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#undirected"},"undirected"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#use_cache"},"use_cache"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#weight_of"},"weight_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#with_optimizer_type"},"with_optimizer_type"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#with_weights"},"with_weights"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"grid-related-operators"},"Grid-related operators"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#as_4_grid"},"as_4_grid"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#as_grid"},"as_grid"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#as_hexagonal_grid"},"as_hexagonal_grid"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#grid_at"},"grid_at"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#path_between"},"path_between"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"iterator-operators"},"Iterator operators"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#accumulate"},"accumulate"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#all_match"},"all_match"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#as_map"},"as_map"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#collect"},"collect"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#count"},"count"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#create_map"},"create_map"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#first_with"},"first_with"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#frequency_of"},"frequency_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#group_by"},"group_by"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#index_by"},"index_by"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#last_with"},"last_with"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#max_of"},"max_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#mean_of"},"mean_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#min_of"},"min_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#none_matches"},"none_matches"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#one_matches"},"one_matches"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#product_of"},"product_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#sort_by"},"sort_by"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#sum_of"},"sum_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#variance_of"},"variance_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#where"},"where"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#with_max_of"},"with_max_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#with_min_of"},"with_min_of"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"list-related-operators"},"List-related operators"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#all_indexes_of"},"all_indexes_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#copy_between"},"copy_between"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#index_of"},"index_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#last_index_of"},"last_index_of"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"logical-operators"},"Logical operators"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#:"},":"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#!"},"!"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#?"},"?"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#add_3dmodel"},"add_3Dmodel"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#add_geometry"},"add_geometry"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#add_icon"},"add_icon"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#and"},"and"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#or"},"or"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#xor"},"xor"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"map-comparaison-operators"},"Map comparaison operators"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#fuzzy_kappa"},"fuzzy_kappa"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#fuzzy_kappa_sim"},"fuzzy_kappa_sim"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#kappa"},"kappa"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#kappa_sim"},"kappa_sim"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#percent_absolute_deviation"},"percent_absolute_deviation"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"map-related-operators"},"Map-related operators"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#as_map"},"as_map"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#create_map"},"create_map"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#index_of"},"index_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#last_index_of"},"last_index_of"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"material"},"Material"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#material"},"material"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"matrix-related-operators"},"Matrix-related operators"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#-"},"-"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#/"},"/"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#."},"."),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#*"},"*"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#+"},"+"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#append_horizontally"},"append_horizontally"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#append_vertically"},"append_vertically"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#column_at"},"column_at"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#columns_list"},"columns_list"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#determinant"},"determinant"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#eigenvalues"},"eigenvalues"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#index_of"},"index_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#inverse"},"inverse"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#last_index_of"},"last_index_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#row_at"},"row_at"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#rows_list"},"rows_list"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#shuffle"},"shuffle"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#trace"},"trace"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#transpose"},"transpose"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"multicriteria-operators"},"multicriteria operators"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#electre_dm"},"electre_DM"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#evidence_theory_dm"},"evidence_theory_DM"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#fuzzy_choquet_dm"},"fuzzy_choquet_DM"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#promethee_dm"},"promethee_DM"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#weighted_means_dm"},"weighted_means_DM"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"path-related-operators"},"Path-related operators"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#agent_from_geometry"},"agent_from_geometry"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#all_pairs_shortest_path"},"all_pairs_shortest_path"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#as_path"},"as_path"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#load_shortest_paths"},"load_shortest_paths"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#max_flow_between"},"max_flow_between"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#path_between"},"path_between"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#path_to"},"path_to"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#paths_between"},"paths_between"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#use_cache"},"use_cache"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"points-related-operators"},"Points-related operators"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#-"},"-"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#/"},"/"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#*"},"*"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#+"},"+"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#%3C"},"<"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#%3C="},"<="),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#%3E"},">"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#%3E="},">="),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#add_point"},"add_point"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#angle_between"},"angle_between"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#any_location_in"},"any_location_in"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#centroid"},"centroid"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#closest_points_with"},"closest_points_with"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#farthest_point_to"},"farthest_point_to"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#grid_at"},"grid_at"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#norm"},"norm"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#points_along"},"points_along"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#points_at"},"points_at"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#points_on"},"points_on"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"random-operators"},"Random operators"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#binomial"},"binomial"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#flip"},"flip"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#gamma_density"},"gamma_density"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#gamma_rnd"},"gamma_rnd"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#gamma_trunc_rnd"},"gamma_trunc_rnd"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#gauss"},"gauss"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#lognormal_density"},"lognormal_density"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#lognormal_rnd"},"lognormal_rnd"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#lognormal_trunc_rnd"},"lognormal_trunc_rnd"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#open_simplex_generator"},"open_simplex_generator"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#poisson"},"poisson"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#rnd"},"rnd"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#rnd_choice"},"rnd_choice"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#sample"},"sample"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#shuffle"},"shuffle"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#simplex_generator"},"simplex_generator"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#skew_gauss"},"skew_gauss"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#truncated_gauss"},"truncated_gauss"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#weibull_density"},"weibull_density"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#weibull_rnd"},"weibull_rnd"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#weibull_trunc_rnd"},"weibull_trunc_rnd"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"reverseoperators"},"ReverseOperators"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#restore_simulation"},"restore_simulation"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#restore_simulation_from_file"},"restore_simulation_from_file"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#save_agent"},"save_agent"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#save_simulation"},"save_simulation"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#serialize"},"serialize"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#serialize_agent"},"serialize_agent"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"shape"},"Shape"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#arc"},"arc"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#box"},"box"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#circle"},"circle"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#cone"},"cone"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#cone3d"},"cone3D"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#cross"},"cross"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#cube"},"cube"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#curve"},"curve"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#cylinder"},"cylinder"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#ellipse"},"ellipse"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#elliptical_arc"},"elliptical_arc"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#envelope"},"envelope"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#geometry_collection"},"geometry_collection"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#hexagon"},"hexagon"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#line"},"line"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#link"},"link"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#plan"},"plan"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#polygon"},"polygon"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#polyhedron"},"polyhedron"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#pyramid"},"pyramid"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#rectangle"},"rectangle"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#sphere"},"sphere"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#square"},"square"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#squircle"},"squircle"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#teapot"},"teapot"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#triangle"},"triangle"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"spatial-operators"},"Spatial operators"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#-"},"-"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#*"},"*"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#+"},"+"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#add_point"},"add_point"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#agent_closest_to"},"agent_closest_to"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#agent_farthest_to"},"agent_farthest_to"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#agents_at_distance"},"agents_at_distance"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#agents_inside"},"agents_inside"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#agents_overlapping"},"agents_overlapping"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#angle_between"},"angle_between"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#any_location_in"},"any_location_in"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#arc"},"arc"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#around"},"around"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#as_4_grid"},"as_4_grid"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#as_grid"},"as_grid"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#as_hexagonal_grid"},"as_hexagonal_grid"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#at_distance"},"at_distance"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#at_location"},"at_location"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#box"},"box"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#centroid"},"centroid"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#circle"},"circle"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#clean"},"clean"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#clean_network"},"clean_network"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#closest_points_with"},"closest_points_with"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#closest_to"},"closest_to"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#cone"},"cone"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#cone3d"},"cone3D"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#convex_hull"},"convex_hull"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#covers"},"covers"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#cross"},"cross"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#crosses"},"crosses"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#crs"},"crs"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#crs_transform"},"CRS_transform"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#cube"},"cube"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#curve"},"curve"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#cylinder"},"cylinder"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#dem"},"dem"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#direction_between"},"direction_between"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#disjoint_from"},"disjoint_from"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#distance_between"},"distance_between"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#distance_to"},"distance_to"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#ellipse"},"ellipse"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#elliptical_arc"},"elliptical_arc"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#envelope"},"envelope"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#farthest_point_to"},"farthest_point_to"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#farthest_to"},"farthest_to"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#geometry_collection"},"geometry_collection"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#gini"},"gini"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#hexagon"},"hexagon"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#hierarchical_clustering"},"hierarchical_clustering"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#idw"},"IDW"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#inside"},"inside"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#inter"},"inter"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#intersects"},"intersects"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#inverse_rotation"},"inverse_rotation"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#line"},"line"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#link"},"link"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#masked_by"},"masked_by"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#moran"},"moran"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#neighbors_at"},"neighbors_at"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#neighbors_of"},"neighbors_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#normalized_rotation"},"normalized_rotation"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#overlapping"},"overlapping"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#overlaps"},"overlaps"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#partially_overlaps"},"partially_overlaps"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#path_between"},"path_between"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#path_to"},"path_to"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#plan"},"plan"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#points_along"},"points_along"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#points_at"},"points_at"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#points_on"},"points_on"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#polygon"},"polygon"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#polyhedron"},"polyhedron"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#pyramid"},"pyramid"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#rectangle"},"rectangle"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#rotated_by"},"rotated_by"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#rotation_composition"},"rotation_composition"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#round"},"round"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#scaled_to"},"scaled_to"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#set_z"},"set_z"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#simple_clustering_by_distance"},"simple_clustering_by_distance"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#simplification"},"simplification"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#skeletonize"},"skeletonize"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#smooth"},"smooth"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#sphere"},"sphere"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#split_at"},"split_at"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#split_geometry"},"split_geometry"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#split_lines"},"split_lines"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#square"},"square"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#squircle"},"squircle"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#teapot"},"teapot"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#to_gama_crs"},"to_GAMA_CRS"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#to_rectangles"},"to_rectangles"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#to_segments"},"to_segments"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#to_squares"},"to_squares"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#to_sub_geometries"},"to_sub_geometries"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#touches"},"touches"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#towards"},"towards"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#transformed_by"},"transformed_by"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#translated_by"},"translated_by"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#triangle"},"triangle"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#triangulate"},"triangulate"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#union"},"union"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#using"},"using"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#voronoi"},"voronoi"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#with_precision"},"with_precision"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#without_holes"},"without_holes"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"spatial-properties-operators"},"Spatial properties operators"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#covers"},"covers"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#crosses"},"crosses"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#intersects"},"intersects"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#partially_overlaps"},"partially_overlaps"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#touches"},"touches"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"spatial-queries-operators"},"Spatial queries operators"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#agent_closest_to"},"agent_closest_to"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#agent_farthest_to"},"agent_farthest_to"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#agents_at_distance"},"agents_at_distance"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#agents_inside"},"agents_inside"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#agents_overlapping"},"agents_overlapping"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#at_distance"},"at_distance"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#closest_to"},"closest_to"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#farthest_to"},"farthest_to"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#inside"},"inside"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#neighbors_at"},"neighbors_at"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#neighbors_of"},"neighbors_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#overlapping"},"overlapping"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"spatial-relations-operators"},"Spatial relations operators"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#direction_between"},"direction_between"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#distance_between"},"distance_between"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#distance_to"},"distance_to"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#path_between"},"path_between"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#path_to"},"path_to"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#towards"},"towards"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"spatial-statistical-operators"},"Spatial statistical operators"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#hierarchical_clustering"},"hierarchical_clustering"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#simple_clustering_by_distance"},"simple_clustering_by_distance"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"spatial-transformations-operators"},"Spatial transformations operators"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#-"},"-"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#*"},"*"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#+"},"+"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#as_4_grid"},"as_4_grid"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#as_grid"},"as_grid"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#as_hexagonal_grid"},"as_hexagonal_grid"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#at_location"},"at_location"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#clean"},"clean"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#clean_network"},"clean_network"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#convex_hull"},"convex_hull"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#crs_transform"},"CRS_transform"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#inverse_rotation"},"inverse_rotation"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#normalized_rotation"},"normalized_rotation"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#rotated_by"},"rotated_by"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#rotation_composition"},"rotation_composition"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#scaled_to"},"scaled_to"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#simplification"},"simplification"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#skeletonize"},"skeletonize"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#smooth"},"smooth"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#split_geometry"},"split_geometry"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#split_lines"},"split_lines"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#to_gama_crs"},"to_GAMA_CRS"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#to_rectangles"},"to_rectangles"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#to_segments"},"to_segments"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#to_squares"},"to_squares"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#to_sub_geometries"},"to_sub_geometries"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#transformed_by"},"transformed_by"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#translated_by"},"translated_by"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#triangulate"},"triangulate"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#voronoi"},"voronoi"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#with_precision"},"with_precision"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#without_holes"},"without_holes"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"species-related-operators"},"Species-related operators"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#index_of"},"index_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#last_index_of"},"last_index_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#of_generic_species"},"of_generic_species"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#of_species"},"of_species"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"statistical-operators"},"Statistical operators"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#auto_correlation"},"auto_correlation"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#beta"},"beta"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#binomial_coeff"},"binomial_coeff"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#binomial_complemented"},"binomial_complemented"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#binomial_sum"},"binomial_sum"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#build"},"build"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#chi_square"},"chi_square"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#chi_square_complemented"},"chi_square_complemented"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#corr"},"corR"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#correlation"},"correlation"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#covariance"},"covariance"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#dbscan"},"dbscan"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#distribution_of"},"distribution_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#distribution2d_of"},"distribution2d_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#dtw"},"dtw"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#durbin_watson"},"durbin_watson"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#frequency_of"},"frequency_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#gamma"},"gamma"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#gamma_distribution"},"gamma_distribution"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#gamma_distribution_complemented"},"gamma_distribution_complemented"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#geometric_mean"},"geometric_mean"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#gini"},"gini"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#harmonic_mean"},"harmonic_mean"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#hierarchical_clustering"},"hierarchical_clustering"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#incomplete_beta"},"incomplete_beta"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#incomplete_gamma"},"incomplete_gamma"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#incomplete_gamma_complement"},"incomplete_gamma_complement"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#kmeans"},"kmeans"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#kurtosis"},"kurtosis"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#kurtosis"},"kurtosis"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#log_gamma"},"log_gamma"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#max"},"max"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#mean"},"mean"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#mean_deviation"},"mean_deviation"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#meanr"},"meanR"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#median"},"median"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#min"},"min"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#moment"},"moment"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#moran"},"moran"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#mul"},"mul"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#normal_area"},"normal_area"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#normal_density"},"normal_density"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#normal_inverse"},"normal_inverse"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#predict"},"predict"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#pvalue_for_fstat"},"pValue_for_fStat"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#pvalue_for_tstat"},"pValue_for_tStat"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#quantile"},"quantile"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#quantile_inverse"},"quantile_inverse"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#rank_interpolated"},"rank_interpolated"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#rms"},"rms"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#simple_clustering_by_distance"},"simple_clustering_by_distance"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#skew"},"skew"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#skewness"},"skewness"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#split"},"split"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#split_in"},"split_in"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#split_using"},"split_using"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#standard_deviation"},"standard_deviation"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#student_area"},"student_area"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#student_t_inverse"},"student_t_inverse"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#sum"},"sum"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#variance"},"variance"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#variance"},"variance"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"strings-related-operators"},"Strings-related operators"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#+"},"+"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#%3C"},"<"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#%3C="},"<="),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#%3E"},">"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#%3E="},">="),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#at"},"at"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#char"},"char"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#contains"},"contains"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#contains_all"},"contains_all"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#contains_any"},"contains_any"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#copy_between"},"copy_between"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#date"},"date"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#empty"},"empty"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#first"},"first"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#in"},"in"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#indented_by"},"indented_by"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#index_of"},"index_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#is_number"},"is_number"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#last"},"last"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#last_index_of"},"last_index_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#length"},"length"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#lower_case"},"lower_case"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#replace"},"replace"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#replace_regex"},"replace_regex"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#reverse"},"reverse"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#sample"},"sample"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#shuffle"},"shuffle"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#split_with"},"split_with"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#string"},"string"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#upper_case"},"upper_case"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"submodel"},"SubModel"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#load_sub_model"},"load_sub_model"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"system"},"System"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#."},"."),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#choose"},"choose"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#command"},"command"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#copy"},"copy"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#copy_to_clipboard"},"copy_to_clipboard"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#dead"},"dead"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#enter"},"enter"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#eval_gaml"},"eval_gaml"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#every"},"every"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#is_error"},"is_error"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#is_warning"},"is_warning"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#user_input"},"user_input"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"time-related-operators"},"Time-related operators"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#date"},"date"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#string"},"string"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"types-related-operators"},"Types-related operators"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#action"},"action"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#agent"},"agent"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#attributes"},"attributes"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#bdiplan"},"BDIPlan"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#bool"},"bool"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#container"},"container"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#emotion"},"emotion"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#file"},"file"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#float"},"float"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#gaml_type"},"gaml_type"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#geometry"},"geometry"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#graph"},"graph"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#int"},"int"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#kml"},"kml"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#list"},"list"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#map"},"map"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#material"},"material"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#matrix"},"matrix"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#mental_state"},"mental_state"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#norm"},"Norm"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#pair"},"pair"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#path"},"path"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#point"},"point"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#predicate"},"predicate"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#regression"},"regression"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#rgb"},"rgb"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#sanction"},"Sanction"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#skill"},"skill"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#social_link"},"social_link"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#topology"},"topology"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#unknown"},"unknown"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"user-control-operators"},"User control operators"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#choose"},"choose"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#enter"},"enter"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#user_input"},"user_input"),", "),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"operators"},"Operators"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"sample"},(0,l.kt)("inlineCode",{parentName:"h3"},"sample")),(0,l.kt)("h4",{id:"possible-use"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"sample"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"any expression"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"string")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"sample"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"any expression")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"string")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"sample"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"string")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"any expression"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"string")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"sample"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"list"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"bool"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"sample"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"list"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"bool"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"list"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list")," ")),(0,l.kt)("h4",{id:"result"},"Result:"),(0,l.kt)("p",null,"takes a sample of the specified size from the elements of x using either with or without replacement\ntakes a sample of the specified size from the elements of x using either with or without replacement with given weights"),(0,l.kt)("h4",{id:"examples"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nlist var0 <- sample([2,10,1],2,false); // var0 equals [10,1] \nlist var1 <- sample([2,10,1],2,false,[0.1,0.7,0.2]); // var1 equals [10,2]\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"sanction"},(0,l.kt)("inlineCode",{parentName:"h3"},"Sanction")),(0,l.kt)("h4",{id:"possible-use-1"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"Sanction"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"any"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"Sanction")," ")),(0,l.kt)("h4",{id:"result-1"},"Result:"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"save_agent"},(0,l.kt)("inlineCode",{parentName:"h3"},"save_agent")),(0,l.kt)("h4",{id:"possible-use-2"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"agent")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"save_agent"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"string")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"int")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"save_agent"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"agent")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"int"))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"save_simulation"},(0,l.kt)("inlineCode",{parentName:"h3"},"save_simulation")),(0,l.kt)("h4",{id:"possible-use-3"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"save_simulation"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"int"))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"saved_simulation_file"},(0,l.kt)("inlineCode",{parentName:"h3"},"saved_simulation_file")),(0,l.kt)("h4",{id:"possible-use-4"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"saved_simulation_file"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"file")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"saved_simulation_file"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"list<agent>")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"file")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"saved_simulation_file"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"string")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"list<agent>"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"file")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"saved_simulation_file"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"bool")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"file")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"saved_simulation_file"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"string")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"bool"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"file")," ")),(0,l.kt)("h4",{id:"result-2"},"Result:"),(0,l.kt)("p",null,"Constructs a file of type saved_simulation. Allowed extensions are limited to gsim, gasim"),(0,l.kt)("h4",{id:"special-cases"},"Special cases:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"saved_simulation_file(string): Constructor for saved simulation files: read the metadata and content. ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"saved_simulation_file(string,list","<","agent>): Constructor for saved simulation files from a list of agents: it is used with aim of saving a simulation agent. ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"saved_simulation_file(string,bool): Constructor for saved simulation files: read the metadata. If and only if the boolean operand is true, the content of the file is read. ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"")),(0,l.kt)("h4",{id:"see-also"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#is_saved_simulation"},"is_saved_simulation"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"scaled_by"},(0,l.kt)("inlineCode",{parentName:"h3"},"scaled_by")),(0,l.kt)("p",null,"   Same signification as ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#*"},"*")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"scaled_to"},(0,l.kt)("inlineCode",{parentName:"h3"},"scaled_to")),(0,l.kt)("h4",{id:"possible-use-5"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"scaled_to"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"point")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"scaled_to"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"point"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," ")),(0,l.kt)("h4",{id:"result-3"},"Result:"),(0,l.kt)("p",null,"allows to restrict the size of a geometry so that it fits in the envelope {width, height, depth} defined by the second operand"),(0,l.kt)("h4",{id:"examples-1"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \ngeometry var0 <- shape scaled_to {10,10}; // var0 equals a geometry corresponding to the geometry of the agent applying the operator scaled so that it fits a square of 10x10\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"select"},(0,l.kt)("inlineCode",{parentName:"h3"},"select")),(0,l.kt)("p",null,"   Same signification as ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#where"},"where")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"serialize"},(0,l.kt)("inlineCode",{parentName:"h3"},"serialize")),(0,l.kt)("h4",{id:"possible-use-6"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"serialize"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"unknown"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"string")," ")),(0,l.kt)("h4",{id:"result-4"},"Result:"),(0,l.kt)("p",null,"It serializes any object, i.e. transform it into a string."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"serialize_agent"},(0,l.kt)("inlineCode",{parentName:"h3"},"serialize_agent")),(0,l.kt)("h4",{id:"possible-use-7"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"serialize_agent"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"agent"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"string"))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"set_about"},(0,l.kt)("inlineCode",{parentName:"h3"},"set_about")),(0,l.kt)("h4",{id:"possible-use-8"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"emotion")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"set_about"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"predicate")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"emotion")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"set_about"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"emotion")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"predicate"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"emotion")," ")),(0,l.kt)("h4",{id:"result-5"},"Result:"),(0,l.kt)("p",null,"change the about value of the given emotion"),(0,l.kt)("h4",{id:"examples-2"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nemotion set_about predicate1\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"set_agent"},(0,l.kt)("inlineCode",{parentName:"h3"},"set_agent")),(0,l.kt)("h4",{id:"possible-use-9"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"social_link")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"set_agent"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"agent")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"social_link")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"set_agent"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"social_link")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"agent"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"social_link")," ")),(0,l.kt)("h4",{id:"result-6"},"Result:"),(0,l.kt)("p",null,"change the agent value of the given social link"),(0,l.kt)("h4",{id:"examples-3"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nsocial_link set_agent agentA\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"set_agent_cause"},(0,l.kt)("inlineCode",{parentName:"h3"},"set_agent_cause")),(0,l.kt)("h4",{id:"possible-use-10"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"emotion")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"set_agent_cause"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"agent")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"emotion")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"set_agent_cause"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"emotion")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"agent"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"emotion")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"predicate")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"set_agent_cause"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"agent")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"predicate")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"set_agent_cause"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"predicate")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"agent"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"predicate")," ")),(0,l.kt)("h4",{id:"result-7"},"Result:"),(0,l.kt)("p",null,"change the agentCause value of the given emotion\nchange the agentCause value of the given predicate"),(0,l.kt)("h4",{id:"examples-4"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nemotion set_agent_cause agentA \npredicate set_agent_cause agentA\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"set_decay"},(0,l.kt)("inlineCode",{parentName:"h3"},"set_decay")),(0,l.kt)("h4",{id:"possible-use-11"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"emotion")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"set_decay"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"emotion")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"set_decay"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"emotion")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"emotion")," ")),(0,l.kt)("h4",{id:"result-8"},"Result:"),(0,l.kt)("p",null,"change the decay value of the given emotion"),(0,l.kt)("h4",{id:"examples-5"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nemotion set_decay 12\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"set_dominance"},(0,l.kt)("inlineCode",{parentName:"h3"},"set_dominance")),(0,l.kt)("h4",{id:"possible-use-12"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"social_link")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"set_dominance"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"social_link")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"set_dominance"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"social_link")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"social_link")," ")),(0,l.kt)("h4",{id:"result-9"},"Result:"),(0,l.kt)("p",null,"change the dominance value of the given social link"),(0,l.kt)("h4",{id:"examples-6"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nsocial_link set_dominance 0.4\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"set_familiarity"},(0,l.kt)("inlineCode",{parentName:"h3"},"set_familiarity")),(0,l.kt)("h4",{id:"possible-use-13"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"social_link")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"set_familiarity"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"social_link")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"set_familiarity"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"social_link")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"social_link")," ")),(0,l.kt)("h4",{id:"result-10"},"Result:"),(0,l.kt)("p",null,"change the familiarity value of the given social link"),(0,l.kt)("h4",{id:"examples-7"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nsocial_link set_familiarity 0.4\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"set_intensity"},(0,l.kt)("inlineCode",{parentName:"h3"},"set_intensity")),(0,l.kt)("h4",{id:"possible-use-14"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"emotion")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"set_intensity"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"emotion")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"set_intensity"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"emotion")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"emotion")," ")),(0,l.kt)("h4",{id:"result-11"},"Result:"),(0,l.kt)("p",null,"change the intensity value of the given emotion"),(0,l.kt)("h4",{id:"examples-8"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nemotion set_intensity 12\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"set_lifetime"},(0,l.kt)("inlineCode",{parentName:"h3"},"set_lifetime")),(0,l.kt)("h4",{id:"possible-use-15"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"mental_state")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"set_lifetime"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"int")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"mental_state")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"set_lifetime"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"mental_state")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"int"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"mental_state")," ")),(0,l.kt)("h4",{id:"result-12"},"Result:"),(0,l.kt)("p",null,"change the lifetime value of the given mental state"),(0,l.kt)("h4",{id:"examples-9"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nmental state set_lifetime 1\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"set_liking"},(0,l.kt)("inlineCode",{parentName:"h3"},"set_liking")),(0,l.kt)("h4",{id:"possible-use-16"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"social_link")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"set_liking"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"social_link")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"set_liking"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"social_link")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"social_link")," ")),(0,l.kt)("h4",{id:"result-13"},"Result:"),(0,l.kt)("p",null,"change the liking value of the given social link"),(0,l.kt)("h4",{id:"examples-10"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nsocial_link set_liking 0.4\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"set_modality"},(0,l.kt)("inlineCode",{parentName:"h3"},"set_modality")),(0,l.kt)("h4",{id:"possible-use-17"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"mental_state")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"set_modality"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"string")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"mental_state")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"set_modality"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"mental_state")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"mental_state")," ")),(0,l.kt)("h4",{id:"result-14"},"Result:"),(0,l.kt)("p",null,"change the modality value of the given mental state"),(0,l.kt)("h4",{id:"examples-11"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nmental state set_modality belief\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"set_predicate"},(0,l.kt)("inlineCode",{parentName:"h3"},"set_predicate")),(0,l.kt)("h4",{id:"possible-use-18"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"mental_state")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"set_predicate"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"predicate")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"mental_state")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"set_predicate"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"mental_state")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"predicate"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"mental_state")," ")),(0,l.kt)("h4",{id:"result-15"},"Result:"),(0,l.kt)("p",null,"change the predicate value of the given mental state"),(0,l.kt)("h4",{id:"examples-12"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nmental state set_predicate pred1\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"set_solidarity"},(0,l.kt)("inlineCode",{parentName:"h3"},"set_solidarity")),(0,l.kt)("h4",{id:"possible-use-19"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"social_link")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"set_solidarity"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"social_link")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"set_solidarity"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"social_link")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"social_link")," ")),(0,l.kt)("h4",{id:"result-16"},"Result:"),(0,l.kt)("p",null,"change the solidarity value of the given social link"),(0,l.kt)("h4",{id:"examples-13"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nsocial_link set_solidarity 0.4\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"set_strength"},(0,l.kt)("inlineCode",{parentName:"h3"},"set_strength")),(0,l.kt)("h4",{id:"possible-use-20"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"mental_state")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"set_strength"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"mental_state")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"set_strength"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"mental_state")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"mental_state")," ")),(0,l.kt)("h4",{id:"result-17"},"Result:"),(0,l.kt)("p",null,"change the strength value of the given mental state"),(0,l.kt)("h4",{id:"examples-14"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nmental state set_strength 1.0\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"set_trust"},(0,l.kt)("inlineCode",{parentName:"h3"},"set_trust")),(0,l.kt)("h4",{id:"possible-use-21"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"social_link")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"set_trust"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"social_link")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"set_trust"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"social_link")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"social_link")," ")),(0,l.kt)("h4",{id:"result-18"},"Result:"),(0,l.kt)("p",null,"change the trust value of the given social link"),(0,l.kt)("h4",{id:"examples-15"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nsocial_link set_familiarity 0.4\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"set_truth"},(0,l.kt)("inlineCode",{parentName:"h3"},"set_truth")),(0,l.kt)("h4",{id:"possible-use-22"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"predicate")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"set_truth"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"bool")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"predicate")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"set_truth"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"predicate")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"bool"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"predicate")," ")),(0,l.kt)("h4",{id:"result-19"},"Result:"),(0,l.kt)("p",null,"change the is_true value of the given predicate"),(0,l.kt)("h4",{id:"examples-16"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \npredicate set_truth false\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"set_z"},(0,l.kt)("inlineCode",{parentName:"h3"},"set_z")),(0,l.kt)("h4",{id:"possible-use-23"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"set_z"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"container<unknown,float>")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"set_z"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"container<unknown,float>"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"set_z"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"geometry"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," ")),(0,l.kt)("h4",{id:"result-20"},"Result:"),(0,l.kt)("p",null,"Sets the z ordinate of the n-th point of a geometry to the value provided by the third argument"),(0,l.kt)("h4",{id:"examples-17"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \ntriangle(3) set_z [5,10,14] \nset_z (triangle(3), 1, 3.0)\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"shape_file"},(0,l.kt)("inlineCode",{parentName:"h3"},"shape_file")),(0,l.kt)("h4",{id:"possible-use-24"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"shape_file"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"file")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"shape_file"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"int")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"file")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"shape_file"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"string")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"int"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"file")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"shape_file"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"string")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"file")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"shape_file"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"string")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"file")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"shape_file"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"bool")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"file")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"shape_file"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"string")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"bool"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"file")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"shape_file"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"string"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"bool"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"file")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"shape_file"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"string"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"string"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"bool"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"file")," ")),(0,l.kt)("h4",{id:"result-21"},"Result:"),(0,l.kt)("p",null,"Constructs a file of type shape. Allowed extensions are limited to shp"),(0,l.kt)("h4",{id:"special-cases-1"},"Special cases:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"shape_file(string): This file constructor allows to read a shapefile (.shp) file ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},' \nfile f <- shape_file("file.shp");\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"shape_file(string,int): This file constructor allows to read a shapefile (.shp) file and specifying the coordinates system code, as an int (epsg code) ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},' \nfile f <- shape_file("file.shp", "32648");\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"shape_file(string,string): This file constructor allows to read a shapefile (.shp) file and specifying the coordinates system code (epg,...,), as a string ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},' \nfile f <- shape_file("file.shp", "EPSG:32648");\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"shape_file(string,bool): This file constructor allows to read a shapefile (.shp) file and take a potential z value (not taken in account by default) ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},' \nfile f <- shape_file("file.shp", true);\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"shape_file(string,int,bool): This file constructor allows to read a shapefile (.shp) file and specifying the coordinates system code, as an int (epsg code) and take a potential z value (not taken in account by default) ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},' \nfile f <- shape_file("file.shp", "32648", true);\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"shape_file(string,string,bool): This file constructor allows to read a shapefile (.shp) file and specifying the coordinates system code (epg,...,), as a string and take a potential z value (not taken in account by default) ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},' \nfile f <- shape_file("file.shp", "EPSG:32648",true);\n')),(0,l.kt)("h4",{id:"see-also-1"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#is_shape"},"is_shape"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"shuffle"},(0,l.kt)("inlineCode",{parentName:"h3"},"shuffle")),(0,l.kt)("h4",{id:"possible-use-25"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"shuffle"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"matrix"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"matrix")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"shuffle"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"string")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"shuffle"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"container"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list")," ")),(0,l.kt)("h4",{id:"result-22"},"Result:"),(0,l.kt)("p",null,"The elements of the operand in random order."),(0,l.kt)("h4",{id:"special-cases-2"},"Special cases:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"if the operand is empty, returns an empty list (or string, matrix)")),(0,l.kt)("h4",{id:"examples-18"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},' \nmatrix var0 <- shuffle (matrix([["c11","c12","c13"],["c21","c22","c23"]])); // var0 equals matrix([["c12","c21","c11"],["c13","c22","c23"]]) (for example) \nstring var1 <- shuffle (\'abc\'); // var1 equals \'bac\' (for example) \nlist var2 <- shuffle ([12, 13, 14]); // var2 equals [14,12,13] (for example)\n\n')),(0,l.kt)("h4",{id:"see-also-2"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#reverse"},"reverse"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"signum"},(0,l.kt)("inlineCode",{parentName:"h3"},"signum")),(0,l.kt)("h4",{id:"possible-use-26"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"signum"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"int")," ")),(0,l.kt)("h4",{id:"result-23"},"Result:"),(0,l.kt)("p",null,"Returns -1 if the argument is negative, +1 if it is positive, 0 if it is equal to zero or not a number"),(0,l.kt)("h4",{id:"examples-19"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nint var0 <- signum(-12); // var0 equals -1 \nint var1 <- signum(14); // var1 equals 1 \nint var2 <- signum(0); // var2 equals 0\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"simple_clustering_by_distance"},(0,l.kt)("inlineCode",{parentName:"h3"},"simple_clustering_by_distance")),(0,l.kt)("h4",{id:"possible-use-27"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"container<unknown,agent>")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"simple_clustering_by_distance"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<list<agent>>")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"simple_clustering_by_distance"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"container<unknown,agent>")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<list<agent>>")," ")),(0,l.kt)("h4",{id:"result-24"},"Result:"),(0,l.kt)("p",null,"A list of agent groups clustered by distance considering a distance min between two groups."),(0,l.kt)("h4",{id:"examples-20"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nlist<list<agent>> var0 <- [ag1, ag2, ag3, ag4, ag5] simpleClusteringByDistance 20.0; // var0 equals for example, can return [[ag1, ag3], [ag2], [ag4, ag5]]\n\n")),(0,l.kt)("h4",{id:"see-also-3"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#hierarchical_clustering"},"hierarchical_clustering"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"simple_clustering_by_envelope_distance"},(0,l.kt)("inlineCode",{parentName:"h3"},"simple_clustering_by_envelope_distance")),(0,l.kt)("p",null,"   Same signification as ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#simple_clustering_by_distance"},"simple_clustering_by_distance")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"simplex_generator"},(0,l.kt)("inlineCode",{parentName:"h3"},"simplex_generator")),(0,l.kt)("h4",{id:"possible-use-28"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"simplex_generator"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,l.kt)("h4",{id:"result-25"},"Result:"),(0,l.kt)("p",null,"take a x, y and a bias parameters and gives a value"),(0,l.kt)("h4",{id:"examples-21"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nfloat var0 <- simplex_generator(2,3,253); // var0 equals 0.0976676931220678\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"simplification"},(0,l.kt)("inlineCode",{parentName:"h3"},"simplification")),(0,l.kt)("h4",{id:"possible-use-29"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"simplification"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"simplification"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," ")),(0,l.kt)("h4",{id:"result-26"},"Result:"),(0,l.kt)("p",null,"A geometry corresponding to the simplification of the operand (geometry, agent, point) considering a tolerance distance.  "),(0,l.kt)("h4",{id:"comment"},"Comment:"),(0,l.kt)("p",null,"The algorithm used for the simplification is Douglas-Peucker"),(0,l.kt)("h4",{id:"examples-22"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \ngeometry var0 <- self simplification 0.1; // var0 equals the geometry resulting from the application of the Douglas-Peuker algorithm on the geometry of the agent applying the operator with a tolerance distance of 0.1.\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"sin"},(0,l.kt)("inlineCode",{parentName:"h3"},"sin")),(0,l.kt)("h4",{id:"possible-use-30"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"sin"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"int"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"float")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"sin"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,l.kt)("h4",{id:"result-27"},"Result:"),(0,l.kt)("p",null,"Returns the value (in ","[-1,1]",") of the sinus of the operand (in decimal degrees). The argument is casted to an int before being evaluated."),(0,l.kt)("h4",{id:"special-cases-3"},"Special cases:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Operand values out of the range ","[0-359]"," are normalized.")),(0,l.kt)("h4",{id:"examples-23"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nfloat var0 <- sin (0); // var0 equals 0.0 \nfloat var1 <- sin(360) with_precision 10 with_precision 10; // var1 equals 0.0\n\n")),(0,l.kt)("h4",{id:"see-also-4"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#cos"},"cos"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#tan"},"tan"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"sin_rad"},(0,l.kt)("inlineCode",{parentName:"h3"},"sin_rad")),(0,l.kt)("h4",{id:"possible-use-31"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"sin_rad"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,l.kt)("h4",{id:"result-28"},"Result:"),(0,l.kt)("p",null,"Returns the value (in ","[-1,1]",") of the sinus of the operand (in radians)."),(0,l.kt)("h4",{id:"examples-24"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nfloat var0 <- sin_rad(0); // var0 equals 0.0 \nfloat var1 <- sin_rad(#pi/2); // var1 equals 1.0\n\n")),(0,l.kt)("h4",{id:"see-also-5"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#cos_rad"},"cos_rad"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#tan_rad"},"tan_rad"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"since"},(0,l.kt)("inlineCode",{parentName:"h3"},"since")),(0,l.kt)("h4",{id:"possible-use-32"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"since"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"date"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"bool")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"any expression")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"since"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"date")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"bool")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"since"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"any expression")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"date"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"bool")," ")),(0,l.kt)("h4",{id:"result-29"},"Result:"),(0,l.kt)("p",null,"Returns true if the current_date of the model is after (or equal to) the date passed in argument. Synonym of 'current_date >= argument'. Can be used, like 'after', in its composed form with 2 arguments to express the lowest boundary of the computation of a frequency. However, contrary to 'after', there is a subtle difference: the lowest boundary will be tested against the frequency as well"),(0,l.kt)("h4",{id:"examples-25"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nreflex when: since(starting_date) {}    // this reflex will always be run \nevery(2#days) since (starting_date + 1#day) // the computation will return true 1 day after the starting date and every two days after this reference date\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"skeletonize"},(0,l.kt)("inlineCode",{parentName:"h3"},"skeletonize")),(0,l.kt)("h4",{id:"possible-use-33"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"skeletonize"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"geometry"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<geometry>")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"skeletonize"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<geometry>")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"skeletonize"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<geometry>")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"skeletonize"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"geometry"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<geometry>")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"skeletonize"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"geometry"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"bool"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<geometry>")," ")),(0,l.kt)("h4",{id:"result-30"},"Result:"),(0,l.kt)("p",null,"A list of geometries (polylines) corresponding to the skeleton of the operand geometry (geometry, agent) with the given tolerance for the clipping and for the triangulation\nA list of geometries (polylines) corresponding to the skeleton of the operand geometry (geometry, agent) with the given tolerance for the clipping and for the triangulation\nA list of geometries (polylines) corresponding to the skeleton of the operand geometry (geometry, agent) with the given tolerance for the clipping\nA list of geometries (polylines) corresponding to the skeleton of the operand geometry (geometry, agent)"),(0,l.kt)("h4",{id:"examples-26"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nlist<geometry> var0 <- skeletonize(self); // var0 equals the list of geometries corresponding to the skeleton of the geometry of the agent applying the operator. \nlist<geometry> var1 <- skeletonize(self); // var1 equals the list of geometries corresponding to the skeleton of the geometry of the agent applying the operator. \nlist<geometry> var2 <- skeletonize(self); // var2 equals the list of geometries corresponding to the skeleton of the geometry of the agent applying the operator. \nlist<geometry> var3 <- skeletonize(self); // var3 equals the list of geometries corresponding to the skeleton of the geometry of the agent applying the operator.\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"skew"},(0,l.kt)("inlineCode",{parentName:"h3"},"skew")),(0,l.kt)("h4",{id:"possible-use-34"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"skew"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"container"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"float")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"float")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"skew"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"float")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"skew"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"float")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,l.kt)("h4",{id:"result-31"},"Result:"),(0,l.kt)("p",null,"Returns the skew of a data sequence when the 3rd moment has already been computed.\nReturns the skew of a data sequence, which is moment(data,3,mean) / standardDeviation3  "),(0,l.kt)("h4",{id:"comment-1"},"Comment:"),(0,l.kt)("p",null,"In R moment(c(1, 3, 5, 6, 9, 11, 12, 13), order=3,center=TRUE) is -10.125 and sd(c(1,3,5,6,9,11,12,13)) = 4.407785The value of the skewness tested here is different because there are different types of estimatorJoanes and Gill (1998) discuss three methods for estimating skewness:Type 1: g_1 = m_3 / m_2^(3/2). This is the typical definition used in many older textbooks.Type 2: G_1 = g_1 * sqrt(n(n-1)) / (n-2). Used in SAS and SPSS.Type 3: b_1 = m_3 / s^3 = g_1 ((n-1)/n)^(3/2). Used in MINITAB and BMDP.In R skewness(c(1, 3, 5, 6, 9, 11, 12, 13),type=3) is -0.1182316"),(0,l.kt)("h4",{id:"examples-27"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nfloat var0 <- skew(-10.125,4.407785) with_precision(2); // var0 equals -0.12 \nfloat var1 <- skew([1,3,5,6,9,11,12,13]) with_precision(2); // var1 equals -0.14\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"skew_gauss"},(0,l.kt)("inlineCode",{parentName:"h3"},"skew_gauss")),(0,l.kt)("h4",{id:"possible-use-35"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"skew_gauss"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,l.kt)("h4",{id:"result-32"},"Result:"),(0,l.kt)("p",null,"A value from a skew normally distributed random variable with min value (the minimum skewed value possible), max value (the maximum skewed value possible), skew (the degree to which the values cluster around the mode of the distribution; higher values mean tighter clustering) and bias (the tendency of the mode to approach the min, max or midpoint value; positive values bias toward max, negative values toward min).The algorithm was taken from ",(0,l.kt)("a",{parentName:"p",href:"http://stackoverflow.com/questions/5853187/skewing-java-random-number-generation-toward-a-certain-number"},"http://stackoverflow.com/questions/5853187/skewing-java-random-number-generation-toward-a-certain-number")),(0,l.kt)("h4",{id:"examples-28"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nfloat var0 <- skew_gauss(0.0, 1.0, 0.7,0.1); // var0 equals 0.1729218460343077\n\n")),(0,l.kt)("h4",{id:"see-also-6"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#binomial"},"binomial"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#gamma_rnd"},"gamma_rnd"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#gauss_rnd"},"gauss_rnd"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#lognormal_rnd"},"lognormal_rnd"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#poisson"},"poisson"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#rnd"},"rnd"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#truncated_gauss"},"truncated_gauss"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#weibull_rnd"},"weibull_rnd"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"skewness"},(0,l.kt)("inlineCode",{parentName:"h3"},"skewness")),(0,l.kt)("h4",{id:"possible-use-36"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"skewness"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"list"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,l.kt)("h4",{id:"result-33"},"Result:"),(0,l.kt)("p",null,"returns skewness value computed from the operand list of values"),(0,l.kt)("h4",{id:"special-cases-4"},"Special cases:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"if the length of the list is lower than 3, returns NaN")),(0,l.kt)("h4",{id:"examples-29"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nfloat var0 <- skewness ([1,2,3,4,5]); // var0 equals 0.0\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"skill"},(0,l.kt)("inlineCode",{parentName:"h3"},"skill")),(0,l.kt)("h4",{id:"possible-use-37"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"skill"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"any"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"skill"))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"smooth"},(0,l.kt)("inlineCode",{parentName:"h3"},"smooth")),(0,l.kt)("h4",{id:"possible-use-38"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"smooth"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"smooth"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," ")),(0,l.kt)("h4",{id:"result-34"},"Result:"),(0,l.kt)("p",null,"Returns a 'smoothed' geometry, where straight lines are replaces by polynomial (bicubic) curves. The first parameter is the original geometry, the second is the 'fit' parameter which can be in the range 0 (loose fit) to 1 (tightest fit)."),(0,l.kt)("h4",{id:"examples-30"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \ngeometry var0 <- smooth(square(10), 0.0); // var0 equals a 'rounded' square\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"social_link"},(0,l.kt)("inlineCode",{parentName:"h3"},"social_link")),(0,l.kt)("h4",{id:"possible-use-39"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"social_link"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"any"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"social_link")," ")),(0,l.kt)("h4",{id:"result-35"},"Result:"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"solid"},(0,l.kt)("inlineCode",{parentName:"h3"},"solid")),(0,l.kt)("p",null,"   Same signification as ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#without_holes"},"without_holes")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"sort"},(0,l.kt)("inlineCode",{parentName:"h3"},"sort")),(0,l.kt)("p",null,"   Same signification as ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#sort_by"},"sort_by")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"sort_by"},(0,l.kt)("inlineCode",{parentName:"h3"},"sort_by")),(0,l.kt)("h4",{id:"possible-use-40"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"container")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"sort_by"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"any expression")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"sort_by"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"container")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"any expression"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list")," ")),(0,l.kt)("h4",{id:"result-36"},"Result:"),(0,l.kt)("p",null,"Returns a list, containing the elements of the left-hand operand sorted in ascending order by the value of the right-hand operand when it is evaluated on them.  "),(0,l.kt)("h4",{id:"comment-2"},"Comment:"),(0,l.kt)("p",null,"the left-hand operand is casted to a list before applying the operator. In the right-hand operand, the keyword each can be used to represent, in turn, each of the elements."),(0,l.kt)("h4",{id:"special-cases-5"},"Special cases:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"if the left-hand operand is nil, sort_by throws an error. If the sorting function returns values that cannot be compared, an error will be thrown as well")),(0,l.kt)("h4",{id:"examples-31"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nlist var0 <- [1,2,4,3,5,7,6,8] sort_by (each); // var0 equals [1,2,3,4,5,6,7,8] \nlist var2 <- g2 sort_by (length(g2 out_edges_of each) ); // var2 equals [node9, node7, node10, node8, node11, node6, node5, node4] \nlist var3 <- (list(node) sort_by (round(node(each).location.x)); // var3 equals [node5, node1, node0, node2, node3] \nlist var4 <- [1::2, 5::6, 3::4] sort_by (each); // var4 equals [2, 4, 6]\n\n")),(0,l.kt)("h4",{id:"see-also-7"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#group_by"},"group_by"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"source_of"},(0,l.kt)("inlineCode",{parentName:"h3"},"source_of")),(0,l.kt)("h4",{id:"possible-use-41"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"graph")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"source_of"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"unknown")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"unknown")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"source_of"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"graph")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"unknown"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"unknown")," ")),(0,l.kt)("h4",{id:"result-37"},"Result:"),(0,l.kt)("p",null,"returns the source of the edge (right-hand operand) contained in the graph given in left-hand operand."),(0,l.kt)("h4",{id:"special-cases-6"},"Special cases:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"if the lef-hand operand (the graph) is nil, throws an Exception")),(0,l.kt)("h4",{id:"examples-32"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},' \ngraph graphEpidemio <- generate_barabasi_albert( ["edges_species"::edge,"vertices_specy"::node,"size"::3,"m"::5] ); \nunknown var1 <- graphEpidemio source_of(edge(3)); // var1 equals node1 \ngraph graphFromMap <-  as_edge_graph([{1,5}::{12,45},{12,45}::{34,56}]); \npoint var3 <- graphFromMap source_of(link({1,5},{12,45})); // var3 equals {1,5}\n\n')),(0,l.kt)("h4",{id:"see-also-8"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#target_of"},"target_of"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"spatial_graph"},(0,l.kt)("inlineCode",{parentName:"h3"},"spatial_graph")),(0,l.kt)("h4",{id:"possible-use-42"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"spatial_graph"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"container"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"graph")," ")),(0,l.kt)("h4",{id:"result-38"},"Result:"),(0,l.kt)("p",null,"allows to create a spatial graph from a container of vertices, without trying to wire them. The container can be empty. Emits an error if the contents of the container are not geometries, points or agents    "),(0,l.kt)("h4",{id:"see-also-9"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#graph"},"graph"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"species"},(0,l.kt)("inlineCode",{parentName:"h3"},"species")),(0,l.kt)("h4",{id:"possible-use-43"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"species"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"unknown"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"species")," ")),(0,l.kt)("h4",{id:"result-39"},"Result:"),(0,l.kt)("p",null,"casting of the operand to a species."),(0,l.kt)("h4",{id:"special-cases-7"},"Special cases:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"if the operand is nil, returns nil;    "),(0,l.kt)("li",{parentName:"ul"},"if the operand is an agent, returns its species;    "),(0,l.kt)("li",{parentName:"ul"},"if the operand is a string, returns the species with this name (nil if not found);    "),(0,l.kt)("li",{parentName:"ul"},"otherwise, returns nil")),(0,l.kt)("h4",{id:"examples-33"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nspecies var0 <- species(self); // var0 equals the species of the current agent \nspecies var1 <- species('node'); // var1 equals node \nspecies var2 <- species([1,5,9,3]); // var2 equals nil \nspecies var3 <- species(node1); // var3 equals node\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"species_of"},(0,l.kt)("inlineCode",{parentName:"h3"},"species_of")),(0,l.kt)("p",null,"   Same signification as ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#species"},"species")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"sphere"},(0,l.kt)("inlineCode",{parentName:"h3"},"sphere")),(0,l.kt)("h4",{id:"possible-use-44"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"sphere"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," ")),(0,l.kt)("h4",{id:"result-40"},"Result:"),(0,l.kt)("p",null,"A sphere geometry which radius is equal to the operand.  "),(0,l.kt)("h4",{id:"comment-3"},"Comment:"),(0,l.kt)("p",null,"the centre of the sphere is by default the location of the current agent in which has been called this operator."),(0,l.kt)("h4",{id:"special-cases-8"},"Special cases:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"returns a point if the operand is lower or equal to 0.")),(0,l.kt)("h4",{id:"examples-34"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \ngeometry var0 <- sphere(10); // var0 equals a geometry as a circle of radius 10 but displays a sphere.\n\n")),(0,l.kt)("h4",{id:"see-also-10"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#around"},"around"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#cone"},"cone"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#line"},"line"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#link"},"link"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#norm"},"norm"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#point"},"point"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#polygon"},"polygon"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#polyline"},"polyline"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#rectangle"},"rectangle"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#square"},"square"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#triangle"},"triangle"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"split"},(0,l.kt)("inlineCode",{parentName:"h3"},"split")),(0,l.kt)("h4",{id:"possible-use-45"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"split"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"list<unknown>"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<list<unknown>>")," ")),(0,l.kt)("h4",{id:"result-41"},"Result:"),(0,l.kt)("p",null,"Splits a list of numbers into n=(1+3.3*log10(elements)) bins. The splitting is strict (i.e. elements are in the ith bin if they are strictly smaller than the ith bound)"),(0,l.kt)("h4",{id:"examples-35"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nlist<list<unknown>> var0 <- split([1.0,2.0,1.0,3.0,1.0,2.0]); // var0 equals [[1.0,1.0,1.0],[2.0,2.0],[3.0]]\n\n")),(0,l.kt)("h4",{id:"see-also-11"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#split_in"},"split_in"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#split_using"},"split_using"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"split_at"},(0,l.kt)("inlineCode",{parentName:"h3"},"split_at")),(0,l.kt)("h4",{id:"possible-use-46"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"split_at"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"point")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<geometry>")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"split_at"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"point"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<geometry>")," ")),(0,l.kt)("h4",{id:"result-42"},"Result:"),(0,l.kt)("p",null,"The two part of the left-operand lines split at the given right-operand point"),(0,l.kt)("h4",{id:"special-cases-9"},"Special cases:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"if the left-operand is a point or a polygon, returns an empty list")),(0,l.kt)("h4",{id:"examples-36"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nlist<geometry> var0 <- polyline([{1,2},{4,6}]) split_at {7,6}; // var0 equals [polyline([{1.0,2.0},{7.0,6.0}]), polyline([{7.0,6.0},{4.0,6.0}])]\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"split_geometry"},(0,l.kt)("inlineCode",{parentName:"h3"},"split_geometry")),(0,l.kt)("h4",{id:"possible-use-47"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"split_geometry"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"point")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<geometry>")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"split_geometry"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"point"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<geometry>")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"split_geometry"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<geometry>")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"split_geometry"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<geometry>")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"split_geometry"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"geometry"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"int"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<geometry>")," ")),(0,l.kt)("h4",{id:"result-43"},"Result:"),(0,l.kt)("p",null,"A list of geometries that result from the decomposition of the geometry by rectangle cells of the given dimension (geometry, {size_x, size_y})\nA list of geometries that result from the decomposition of the geometry by square cells of the given side size (geometry, size)\nA list of geometries that result from the decomposition of the geometry according to a grid with the given number of rows and columns (geometry, nb_cols, nb_rows)"),(0,l.kt)("h4",{id:"examples-37"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nlist<geometry> var0 <- to_rectangles(self, {10.0, 15.0}); // var0 equals the list of the geometries corresponding to the decomposition of the geometry by rectangles of size 10.0, 15.0 \nlist<geometry> var1 <- to_squares(self, 10.0); // var1 equals the list of the geometries corresponding to the decomposition of the geometry by squares of side size 10.0 \nlist<geometry> var2 <- to_rectangles(self, 10,20); // var2 equals the list of the geometries corresponding to the decomposition of the geometry of the agent applying the operator\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"split_in"},(0,l.kt)("inlineCode",{parentName:"h3"},"split_in")),(0,l.kt)("h4",{id:"possible-use-48"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"list<unknown>")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"split_in"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"int")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<list<unknown>>")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"split_in"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"list<unknown>")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"int"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<list<unknown>>")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"split_in"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"list<unknown>"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"bool"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<list<unknown>>")," ")),(0,l.kt)("h4",{id:"result-44"},"Result:"),(0,l.kt)("p",null,"Splits a list of numbers into n bins defined by n-1 bounds between the minimum and maximum values found in the first argument. The splitting is strict (i.e. elements are in the ith bin if they are strictly smaller than the ith bound)\nSplits a list of numbers into n bins defined by n-1 bounds between the minimum and maximum values found in the first argument. The boolean argument controls whether or not the splitting is  strict (if true, elements are in the ith bin if they are strictly smaller than the ith bound)"),(0,l.kt)("h4",{id:"examples-38"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nlist<float> li <- [1.0,3.1,5.2,6.0,9.2,11.1,12.0,13.0,19.9,35.9,40.0]; \nlist<list<unknown>> var1 <- split_in(li,3); // var1 equals [[1.0,3.1,5.2,6.0,9.2,11.1,12.0,13.0],[19.9],[35.9,40.0]] \nlist<float> l <- [1.0,3.1,5.2,6.0,9.2,11.1,12.0,13.0,19.9,35.9,40.0]; \nlist<list<unknown>> var3 <- split_in(l,3, true); // var3 equals [[1.0,3.1,5.2,6.0,9.2,11.1,12.0,13.0],[19.9],[35.9,40.0]]\n\n")),(0,l.kt)("h4",{id:"see-also-12"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#split"},"split"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#split_using"},"split_using"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"split_lines"},(0,l.kt)("inlineCode",{parentName:"h3"},"split_lines")),(0,l.kt)("h4",{id:"possible-use-49"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"split_lines"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"container<unknown,geometry>"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<geometry>")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"container<unknown,geometry>")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"split_lines"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"bool")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<geometry>")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"split_lines"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"container<unknown,geometry>")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"bool"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<geometry>")," ")),(0,l.kt)("h4",{id:"result-45"},"Result:"),(0,l.kt)("p",null,"A list of geometries resulting after cutting the lines at their intersections. if the last boolean operand is set to true, the split lines will import the attributes of the initial lines\nA list of geometries resulting after cutting the lines at their intersections."),(0,l.kt)("h4",{id:"examples-39"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nlist<geometry> var0 <- split_lines([line([{0,10}, {20,10}]), line([{0,10}, {20,10}])]); // var0 equals a list of four polylines: line([{0,10}, {10,10}]), line([{10,10}, {20,10}]), line([{10,0}, {10,10}]) and line([{10,10}, {10,20}]) \nlist<geometry> var1 <- split_lines([line([{0,10}, {20,10}]), line([{0,10}, {20,10}])]); // var1 equals a list of four polylines: line([{0,10}, {10,10}]), line([{10,10}, {20,10}]), line([{10,0}, {10,10}]) and line([{10,10}, {10,20}])\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"split_using"},(0,l.kt)("inlineCode",{parentName:"h3"},"split_using")),(0,l.kt)("h4",{id:"possible-use-50"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"list<unknown>")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"split_using"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"list<? extends java.lang.Comparable>")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<list<unknown>>")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"split_using"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"list<unknown>")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"list<? extends java.lang.Comparable>"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<list<unknown>>")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"split_using"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"list<unknown>"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"list<? extends java.lang.Comparable>"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"bool"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<list<unknown>>")," ")),(0,l.kt)("h4",{id:"result-46"},"Result:"),(0,l.kt)("p",null,"Splits a list of numbers into n+1 bins using a set of n bounds passed as the second argument. The splitting is strict (i.e. elements are in the ith bin if they are strictly smaller than the ith bound\nSplits a list of numbers into n+1 bins using a set of n bounds passed as the second argument. The boolean argument controls whether or not the splitting is strict (if true, elements are in the ith bin if they are strictly smaller than the ith bound"),(0,l.kt)("h4",{id:"examples-40"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nlist<float> li <- [1.0,3.1,5.2,6.0,9.2,11.1,12.0,13.0,19.9,35.9,40.0]; \nlist<list<unknown>> var1 <- split_using(li,[1.0,3.0,4.2]); // var1 equals [[],[1.0],[3.1],[5.2,6.0,9.2,11.1,12.0,13.0,19.9,35.9,40.0]] \nlist<float> l <- [1.0,3.1,5.2,6.0,9.2,11.1,12.0,13.0,19.9,35.9,40.0]; \nlist<list<unknown>> var3 <- split_using(l,[1.0,3.0,4.2], true); // var3 equals [[],[1.0],[3.1],[5.2,6.0,9.2,11.1,12.0,13.0,19.9,35.9,40.0]]\n\n")),(0,l.kt)("h4",{id:"see-also-13"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#split"},"split"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#split_in"},"split_in"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"split_with"},(0,l.kt)("inlineCode",{parentName:"h3"},"split_with")),(0,l.kt)("h4",{id:"possible-use-51"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"split_with"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"string")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"split_with"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"string")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"split_with"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"string"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"string"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"bool"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list")," ")),(0,l.kt)("h4",{id:"result-47"},"Result:"),(0,l.kt)("p",null,"Returns a list containing the sub-strings (tokens) of the left-hand operand delimited by each of the characters of the right-hand operand.\nReturns a list containing the sub-strings (tokens) of the left-hand operand delimited either by each of the characters of the right-hand operand (false) or by the whole right-hand operand (true).  "),(0,l.kt)("h4",{id:"comment-4"},"Comment:"),(0,l.kt)("p",null,"Delimiters themselves are excluded from the resulting list.Delimiters themselves are excluded from the resulting list."),(0,l.kt)("h4",{id:"examples-41"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nlist var0 <- 'to be or not to be,that is the question' split_with ' ,'; // var0 equals ['to','be','or','not','to','be','that','is','the','question'] \nlist var1 <- 'aa::bb:cc' split_with ('::', true); // var1 equals ['aa','bb:cc']\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"sqrt"},(0,l.kt)("inlineCode",{parentName:"h3"},"sqrt")),(0,l.kt)("h4",{id:"possible-use-52"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"sqrt"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"float")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"sqrt"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"int"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,l.kt)("h4",{id:"result-48"},"Result:"),(0,l.kt)("p",null,"Returns the square root of the operand."),(0,l.kt)("h4",{id:"special-cases-10"},"Special cases:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"if the operand is negative, an exception is raised")),(0,l.kt)("h4",{id:"examples-42"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nfloat var0 <- sqrt(4); // var0 equals 2.0 \nfloat var1 <- sqrt(4); // var1 equals 2.0\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"square"},(0,l.kt)("inlineCode",{parentName:"h3"},"square")),(0,l.kt)("h4",{id:"possible-use-53"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"square"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," ")),(0,l.kt)("h4",{id:"result-49"},"Result:"),(0,l.kt)("p",null,"A square geometry which side size is equal to the operand.  "),(0,l.kt)("h4",{id:"comment-5"},"Comment:"),(0,l.kt)("p",null,"the centre of the square is by default the location of the current agent in which has been called this operator."),(0,l.kt)("h4",{id:"special-cases-11"},"Special cases:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"returns nil if the operand is nil.")),(0,l.kt)("h4",{id:"examples-43"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \ngeometry var0 <- square(10); // var0 equals a geometry as a square of side size 10. \nfloat var1 <- var0.area; // var1 equals 100.0\n\n")),(0,l.kt)("h4",{id:"see-also-14"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#around"},"around"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#circle"},"circle"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#cone"},"cone"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#line"},"line"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#link"},"link"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#norm"},"norm"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#point"},"point"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#polygon"},"polygon"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#polyline"},"polyline"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#rectangle"},"rectangle"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#triangle"},"triangle"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"squircle"},(0,l.kt)("inlineCode",{parentName:"h3"},"squircle")),(0,l.kt)("h4",{id:"possible-use-54"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"float")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"squircle"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"squircle"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"float")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," ")),(0,l.kt)("h4",{id:"result-50"},"Result:"),(0,l.kt)("p",null,"A mix of square and circle geometry (see : ",(0,l.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/Squircle"},"http://en.wikipedia.org/wiki/Squircle"),"), which side size is equal to the first operand and power is equal to the second operand  "),(0,l.kt)("h4",{id:"comment-6"},"Comment:"),(0,l.kt)("p",null,"the center of the ellipse is by default the location of the current agent in which has been called this operator."),(0,l.kt)("h4",{id:"special-cases-12"},"Special cases:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"returns a point if the side operand is lower or equal to 0.")),(0,l.kt)("h4",{id:"examples-44"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \ngeometry var0 <- squircle(4,4); // var0 equals a geometry as a squircle of side 4 with a power of 4.\n\n")),(0,l.kt)("h4",{id:"see-also-15"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#around"},"around"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#cone"},"cone"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#line"},"line"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#link"},"link"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#norm"},"norm"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#point"},"point"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#polygon"},"polygon"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#polyline"},"polyline"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#super_ellipse"},"super_ellipse"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#rectangle"},"rectangle"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#square"},"square"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#circle"},"circle"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#ellipse"},"ellipse"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#triangle"},"triangle"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"stack"},(0,l.kt)("inlineCode",{parentName:"h3"},"stack")),(0,l.kt)("h4",{id:"possible-use-55"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"stack"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"list<int>"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"unknown<string>"))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"standard_deviation"},(0,l.kt)("inlineCode",{parentName:"h3"},"standard_deviation")),(0,l.kt)("h4",{id:"possible-use-56"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"standard_deviation"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"container"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,l.kt)("h4",{id:"result-51"},"Result:"),(0,l.kt)("p",null,"the standard deviation on the elements of the operand. See ",(0,l.kt)("a",{href:"http://en.wikipedia.org/wiki/Standard_deviation"},"Standard_deviation")," for more details.  "),(0,l.kt)("h4",{id:"comment-7"},"Comment:"),(0,l.kt)("p",null,"The operator casts all the numerical element of the list into float. The elements that are not numerical are discarded."),(0,l.kt)("h4",{id:"examples-45"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nfloat var0 <- standard_deviation ([4.5, 3.5, 5.5, 7.0]); // var0 equals 1.2930100540985752\n\n")),(0,l.kt)("h4",{id:"see-also-16"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#mean"},"mean"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#mean_deviation"},"mean_deviation"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"step_sub_model"},(0,l.kt)("inlineCode",{parentName:"h3"},"step_sub_model")),(0,l.kt)("h4",{id:"possible-use-57"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"step_sub_model"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"agent"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"int")," ")),(0,l.kt)("h4",{id:"result-52"},"Result:"),(0,l.kt)("p",null,"Load a submodel  "),(0,l.kt)("h4",{id:"comment-8"},"Comment:"),(0,l.kt)("p",null,"loaded submodel"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"strahler"},(0,l.kt)("inlineCode",{parentName:"h3"},"strahler")),(0,l.kt)("h4",{id:"possible-use-58"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"strahler"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"graph"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"map")," ")),(0,l.kt)("h4",{id:"result-53"},"Result:"),(0,l.kt)("p",null,"retur for each edge, its strahler number"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"string"},(0,l.kt)("inlineCode",{parentName:"h3"},"string")),(0,l.kt)("h4",{id:"possible-use-59"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"date")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"string"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"string")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"string")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"string"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"date")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"string")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"string"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"date"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"string"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"string")," ")),(0,l.kt)("h4",{id:"result-54"},"Result:"),(0,l.kt)("p",null,"converts a date to astring following a custom pattern and using a specific locale (e.g.: 'fr', 'en', etc.). The pattern can use \"%Y %M %N %D %E %h %m %s %z\" for outputting years, months, name of month, days, name of days, hours, minutes, seconds and the time-zone. A null or empty pattern will return the complete date as defined by the ISO date & time format. The pattern can also follow the pattern definition found here, which gives much more control over the format of the date: ",(0,l.kt)("a",{parentName:"p",href:"https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#patterns"},"https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#patterns"),'. Different patterns are available by default as constants: #iso_local, #iso_simple, #iso_offset, #iso_zoned and #custom, which can be changed in the preferences\nconverts a date to astring following a custom pattern. The pattern can use "%Y %M %N %D %E %h %m %s %z" for outputting years, months, name of month, days, name of days, hours, minutes, seconds and the time-zone. A null or empty pattern will return the complete date as defined by the ISO date & time format. The pattern can also follow the pattern definition found here, which gives much more control over the format of the date: ',(0,l.kt)("a",{parentName:"p",href:"https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#patterns"},"https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#patterns"),". Different patterns are available by default as constants: #iso_local, #iso_simple, #iso_offset, #iso_zoned and #custom, which can be changed in the preferences"),(0,l.kt)("h4",{id:"examples-46"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nstring(#now, 'yyyy-MM-dd') \nstring(#now, 'yyyy-MM-dd')\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"student_area"},(0,l.kt)("inlineCode",{parentName:"h3"},"student_area")),(0,l.kt)("h4",{id:"possible-use-60"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"float")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"student_area"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"int")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"float")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"student_area"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"float")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"int"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,l.kt)("h4",{id:"result-55"},"Result:"),(0,l.kt)("p",null,"Returns the area to the left of x in the Student T distribution with the given degrees of freedom."),(0,l.kt)("h4",{id:"examples-47"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nfloat var0 <- student_area(1.64,3) with_precision(2); // var0 equals 0.9\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"student_t_inverse"},(0,l.kt)("inlineCode",{parentName:"h3"},"student_t_inverse")),(0,l.kt)("h4",{id:"possible-use-61"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"float")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"student_t_inverse"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"int")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"float")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"student_t_inverse"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"float")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"int"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,l.kt)("h4",{id:"result-56"},"Result:"),(0,l.kt)("p",null,"Returns the value, t, for which the area under the Student-t probability density function (integrated from minus infinity to t) is equal to x."),(0,l.kt)("h4",{id:"examples-48"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nfloat var0 <- student_t_inverse(0.9,3) with_precision(2); // var0 equals 1.64\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"subtract_days"},(0,l.kt)("inlineCode",{parentName:"h3"},"subtract_days")),(0,l.kt)("p",null,"   Same signification as ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#minus_days"},"minus_days")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"subtract_hours"},(0,l.kt)("inlineCode",{parentName:"h3"},"subtract_hours")),(0,l.kt)("p",null,"   Same signification as ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#minus_hours"},"minus_hours")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"subtract_minutes"},(0,l.kt)("inlineCode",{parentName:"h3"},"subtract_minutes")),(0,l.kt)("p",null,"   Same signification as ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#minus_minutes"},"minus_minutes")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"subtract_months"},(0,l.kt)("inlineCode",{parentName:"h3"},"subtract_months")),(0,l.kt)("p",null,"   Same signification as ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#minus_months"},"minus_months")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"subtract_ms"},(0,l.kt)("inlineCode",{parentName:"h3"},"subtract_ms")),(0,l.kt)("p",null,"   Same signification as ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#minus_ms"},"minus_ms")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"subtract_seconds"},(0,l.kt)("inlineCode",{parentName:"h3"},"subtract_seconds")),(0,l.kt)("p",null,"   Same signification as ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#-"},"-")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"subtract_weeks"},(0,l.kt)("inlineCode",{parentName:"h3"},"subtract_weeks")),(0,l.kt)("p",null,"   Same signification as ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#minus_weeks"},"minus_weeks")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"subtract_years"},(0,l.kt)("inlineCode",{parentName:"h3"},"subtract_years")),(0,l.kt)("p",null,"   Same signification as ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#minus_years"},"minus_years")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"successors_of"},(0,l.kt)("inlineCode",{parentName:"h3"},"successors_of")),(0,l.kt)("h4",{id:"possible-use-62"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"graph")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"successors_of"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"unknown")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"successors_of"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"graph")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"unknown"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list")," ")),(0,l.kt)("h4",{id:"result-57"},"Result:"),(0,l.kt)("p",null,"returns the list of successors (i.e. targets of out edges) of the given vertex (right-hand operand) in the given graph (left-hand operand)"),(0,l.kt)("h4",{id:"examples-49"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nlist var1 <- graphEpidemio successors_of ({1,5}); // var1 equals [{12,45}] \nlist var2 <- graphEpidemio successors_of node({34,56}); // var2 equals []\n\n")),(0,l.kt)("h4",{id:"see-also-17"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#predecessors_of"},"predecessors_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#neighbors_of"},"neighbors_of"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"sum"},(0,l.kt)("inlineCode",{parentName:"h3"},"sum")),(0,l.kt)("h4",{id:"possible-use-63"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"sum"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"container"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"unknown")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"sum"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"graph"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,l.kt)("h4",{id:"result-58"},"Result:"),(0,l.kt)("p",null,"the sum of all the elements of the operand  "),(0,l.kt)("h4",{id:"comment-9"},"Comment:"),(0,l.kt)("p",null,"the behavior depends on the nature of the operand"),(0,l.kt)("h4",{id:"special-cases-13"},"Special cases:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"if it is a population or a list of other types: sum transforms all elements into float and sums them    "),(0,l.kt)("li",{parentName:"ul"},"if it is a map, sum returns the sum of the value of all elements    "),(0,l.kt)("li",{parentName:"ul"},"if it is a file, sum returns the sum of the content of the file (that is also a container)    "),(0,l.kt)("li",{parentName:"ul"},"if it is a graph, sum returns the total weight of the graph    "),(0,l.kt)("li",{parentName:"ul"},"if it is a matrix of int, float or object, sum returns the sum of all the numerical elements (i.e. all elements for integer and float matrices)    "),(0,l.kt)("li",{parentName:"ul"},"if it is a matrix of other types: sum transforms all elements into float and sums them    "),(0,l.kt)("li",{parentName:"ul"},"if it is a list of colors: sum will sum them and return the blended resulting color    "),(0,l.kt)("li",{parentName:"ul"},"if it is a list of int or float: sum returns the sum of all the elements ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nint var0 <- sum ([12,10,3]); // var0 equals 25\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"if it is a list of points: sum returns the sum of all points as a point (each coordinate is the sum of the corresponding coordinate of each element) ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nunknown var1 <- sum([{1.0,3.0},{3.0,5.0},{9.0,1.0},{7.0,8.0}]); // var1 equals {20.0,17.0}\n")),(0,l.kt)("h4",{id:"see-also-18"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#mul"},"mul"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"sum_of"},(0,l.kt)("inlineCode",{parentName:"h3"},"sum_of")),(0,l.kt)("h4",{id:"possible-use-64"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"container")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"sum_of"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"any expression")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"unknown")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"sum_of"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"container")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"any expression"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"unknown")," ")),(0,l.kt)("h4",{id:"result-59"},"Result:"),(0,l.kt)("p",null,"the sum of the right-hand expression evaluated on each of the elements of the left-hand operand  "),(0,l.kt)("h4",{id:"comment-10"},"Comment:"),(0,l.kt)("p",null,"in the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements."),(0,l.kt)("h4",{id:"special-cases-14"},"Special cases:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"if the left-operand is a map, the keyword each will contain each value ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nunknown var1 <- [1::2, 3::4, 5::6] sum_of (each + 3); // var1 equals 21\n")),(0,l.kt)("h4",{id:"examples-50"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nunknown var0 <- [1,2] sum_of (each * 100 ); // var0 equals 300\n\n")),(0,l.kt)("h4",{id:"see-also-19"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#min_of"},"min_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#max_of"},"max_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#product_of"},"product_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#mean_of"},"mean_of"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"svg_file"},(0,l.kt)("inlineCode",{parentName:"h3"},"svg_file")),(0,l.kt)("h4",{id:"possible-use-65"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"svg_file"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"file")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"svg_file"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"point")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"file")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"svg_file"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"string")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"point"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"file")," ")),(0,l.kt)("h4",{id:"result-60"},"Result:"),(0,l.kt)("p",null,"Constructs a file of type svg. Allowed extensions are limited to svg"),(0,l.kt)("h4",{id:"special-cases-15"},"Special cases:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"svg_file(string): This file constructor allows to read a svg file ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},' \nfile f <-svg_file("file.svg");\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"svg_file(string,point): This file constructor allows to read a svg file, specifying the size of the bounding box ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},' \nfile f <-svg_file("file.svg", {10,10});\n')),(0,l.kt)("h4",{id:"see-also-20"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#is_svg"},"is_svg"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"tan"},(0,l.kt)("inlineCode",{parentName:"h3"},"tan")),(0,l.kt)("h4",{id:"possible-use-66"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"tan"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"int"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"float")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"tan"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,l.kt)("h4",{id:"result-61"},"Result:"),(0,l.kt)("p",null,"Returns the value (in ","[-1,1]",") of the trigonometric tangent of the operand (in decimal degrees)."),(0,l.kt)("h4",{id:"special-cases-16"},"Special cases:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Operand values out of the range ","[0-359]"," are normalized. Notice that tan(360) does not return 0.0 but -2.4492935982947064E-16    "),(0,l.kt)("li",{parentName:"ul"},"The tangent is only defined for any real number except 90 + k ",(0,l.kt)("inlineCode",{parentName:"li"},"*")," 180 (k an positive or negative integer). Nevertheless notice that tan(90) returns 1.633123935319537E16 (whereas we could except infinity).")),(0,l.kt)("h4",{id:"examples-51"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nfloat var0 <- tan (0); // var0 equals 0.0 \nfloat var1 <- tan(90); // var1 equals 1.633123935319537E16\n\n")),(0,l.kt)("h4",{id:"see-also-21"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#cos"},"cos"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#sin"},"sin"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"tan_rad"},(0,l.kt)("inlineCode",{parentName:"h3"},"tan_rad")),(0,l.kt)("h4",{id:"possible-use-67"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"tan_rad"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,l.kt)("h4",{id:"result-62"},"Result:"),(0,l.kt)("p",null,"Returns the value (in ","[-1,1]",") of the trigonometric tangent of the operand (in radians)."),(0,l.kt)("h4",{id:"examples-52"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nfloat var0 <- tan_rad(0); // var0 equals 0.0\n\n")),(0,l.kt)("h4",{id:"see-also-22"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#cos_rad"},"cos_rad"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#sin_rad"},"sin_rad"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"tanh"},(0,l.kt)("inlineCode",{parentName:"h3"},"tanh")),(0,l.kt)("h4",{id:"possible-use-68"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"tanh"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"int"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"float")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"tanh"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,l.kt)("h4",{id:"result-63"},"Result:"),(0,l.kt)("p",null,"Returns the value (in the interval ","[-1,1]",") of the hyperbolic tangent of the operand (which can be any real number, expressed in decimal degrees)."),(0,l.kt)("h4",{id:"examples-53"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nfloat var0 <- tanh(0); // var0 equals 0.0 \nfloat var1 <- tanh(100); // var1 equals 1.0\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"target_of"},(0,l.kt)("inlineCode",{parentName:"h3"},"target_of")),(0,l.kt)("h4",{id:"possible-use-69"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"graph")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"target_of"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"unknown")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"unknown")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"target_of"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"graph")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"unknown"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"unknown")," ")),(0,l.kt)("h4",{id:"result-64"},"Result:"),(0,l.kt)("p",null,"returns the target of the edge (right-hand operand) contained in the graph given in left-hand operand."),(0,l.kt)("h4",{id:"special-cases-17"},"Special cases:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"if the lef-hand operand (the graph) is nil, returns nil")),(0,l.kt)("h4",{id:"examples-54"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},' \ngraph graphEpidemio <- generate_barabasi_albert( ["edges_species"::edge,"vertices_specy"::node,"size"::3,"m"::5] ); \nunknown var1 <- graphEpidemio source_of(edge(3)); // var1 equals node1 \ngraph graphFromMap <-  as_edge_graph([{1,5}::{12,45},{12,45}::{34,56}]); \nunknown var3 <- graphFromMap target_of(link({1,5},{12,45})); // var3 equals {12,45}\n\n')),(0,l.kt)("h4",{id:"see-also-23"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#source_of"},"source_of"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"teapot"},(0,l.kt)("inlineCode",{parentName:"h3"},"teapot")),(0,l.kt)("h4",{id:"possible-use-70"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"teapot"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," ")),(0,l.kt)("h4",{id:"result-65"},"Result:"),(0,l.kt)("p",null,"A teapot geometry which radius is equal to the operand.  "),(0,l.kt)("h4",{id:"comment-11"},"Comment:"),(0,l.kt)("p",null,"the centre of the teapot is by default the location of the current agent in which has been called this operator."),(0,l.kt)("h4",{id:"special-cases-18"},"Special cases:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"returns a point if the operand is lower or equal to 0.")),(0,l.kt)("h4",{id:"examples-55"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \ngeometry var0 <- teapot(10); // var0 equals a geometry as a circle of radius 10 but displays a teapot.\n\n")),(0,l.kt)("h4",{id:"see-also-24"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#around"},"around"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#cone"},"cone"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#line"},"line"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#link"},"link"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#norm"},"norm"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#point"},"point"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#polygon"},"polygon"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#polyline"},"polyline"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#rectangle"},"rectangle"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#square"},"square"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#triangle"},"triangle"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"text_file"},(0,l.kt)("inlineCode",{parentName:"h3"},"text_file")),(0,l.kt)("h4",{id:"possible-use-71"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"text_file"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"file")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"text_file"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"list<string>")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"file")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"text_file"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"string")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"list<string>"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"file")," ")),(0,l.kt)("h4",{id:"result-66"},"Result:"),(0,l.kt)("p",null,"Constructs a file of type text. Allowed extensions are limited to txt, data, text"),(0,l.kt)("h4",{id:"special-cases-19"},"Special cases:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"text_file(string): This file constructor allows to read a text file (.txt, .data, .text) ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},' \nfile f <-text_file("file.txt");\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"text_file(string,list","<","string>): This file constructor allows to store a list of string in a text file (it does not save it - just store it in memory) ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},' \nfile f <-text_file("file.txt", ["item1","item2","item3"]);\n')),(0,l.kt)("h4",{id:"see-also-25"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#is_text"},"is_text"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"tgauss"},(0,l.kt)("inlineCode",{parentName:"h3"},"TGauss")),(0,l.kt)("p",null,"   Same signification as ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#truncated_gauss"},"truncated_gauss")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"threeds_file"},(0,l.kt)("inlineCode",{parentName:"h3"},"threeds_file")),(0,l.kt)("h4",{id:"possible-use-72"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"threeds_file"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"file")," ")),(0,l.kt)("h4",{id:"result-67"},"Result:"),(0,l.kt)("p",null,"Constructs a file of type threeds. Allowed extensions are limited to 3ds, max"),(0,l.kt)("h4",{id:"special-cases-20"},"Special cases:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"threeds_file(string): This file constructor allows to read a 3DS Max file. Only loads vertices and faces ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},' \nthreeds_file f <- threeds_file("file");\n')),(0,l.kt)("h4",{id:"see-also-26"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#is_threeds"},"is_threeds"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"to"},(0,l.kt)("inlineCode",{parentName:"h3"},"to")),(0,l.kt)("p",null,"   Same signification as ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#range"},"range")),(0,l.kt)("h4",{id:"possible-use-73"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"date")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"to"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"date")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<date>")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"to"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"date")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"date"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<date>")," ")),(0,l.kt)("h4",{id:"result-68"},"Result:"),(0,l.kt)("p",null,"builds an interval between two dates (the first inclusive and the second exclusive, which behaves like a read-only list of dates. The default step between two dates is the step of the model  "),(0,l.kt)("h4",{id:"comment-12"},"Comment:"),(0,l.kt)("p",null,"The default step can be overruled by using the every operator applied to this interval"),(0,l.kt)("h4",{id:"examples-56"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \ndate('2000-01-01') to date('2010-01-01') // builds an interval between these two dates \n(date('2000-01-01') to date('2010-01-01')) every (#month) // builds an interval between these two dates which contains all the monthly dates starting from the beginning of the interval\n\n")),(0,l.kt)("h4",{id:"see-also-27"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#every"},"every"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"to_gama_crs"},(0,l.kt)("inlineCode",{parentName:"h3"},"to_GAMA_CRS")),(0,l.kt)("h4",{id:"possible-use-74"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"to_GAMA_CRS"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"geometry"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"to_GAMA_CRS"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"string")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"to_GAMA_CRS"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"geometry"))),(0,l.kt)("h4",{id:"special-cases-21"},"Special cases:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"returns the geometry corresponding to the transformation of the given geometry to the GAMA CRS (Coordinate Reference System) assuming the given geometry is referenced by the current CRS, the one corresponding to the world's agent one ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \ngeometry var0 <- to_GAMA_CRS({121,14}); // var0 equals a geometry corresponding to the agent geometry transformed into the GAMA CRS\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"returns the geometry corresponding to the transformation of the given geometry to the GAMA CRS (Coordinate Reference System) assuming the given geometry is referenced by given CRS ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},' \ngeometry var1 <- to_GAMA_CRS({121,14}, "EPSG:4326"); // var1 equals a geometry corresponding to the agent geometry transformed into the GAMA CRS\n')),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"to_gaml"},(0,l.kt)("inlineCode",{parentName:"h3"},"to_gaml")),(0,l.kt)("h4",{id:"possible-use-75"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"to_gaml"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"unknown"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"string")," ")),(0,l.kt)("h4",{id:"result-69"},"Result:"),(0,l.kt)("p",null,"returns the literal description of an expression or description -- action, behavior, species, aspect, even model -- in gaml"),(0,l.kt)("h4",{id:"examples-57"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nstring var0 <- to_gaml(0); // var0 equals '0' \nstring var1 <- to_gaml(3.78); // var1 equals '3.78' \nstring var2 <- to_gaml(true); // var2 equals 'true' \nstring var3 <- to_gaml({23, 4.0}); // var3 equals '{23.0,4.0,0.0}' \nstring var4 <- to_gaml(5::34); // var4 equals '5::34' \nstring var5 <- to_gaml(rgb(255,0,125)); // var5 equals 'rgb (255, 0, 125,255)' \nstring var6 <- to_gaml('hello'); // var6 equals \"'hello'\" \nstring var7 <- to_gaml([1,5,9,3]); // var7 equals '[1,5,9,3]' \nstring var8 <- to_gaml(['a'::345, 'b'::13, 'c'::12]); // var8 equals \"map(['a'::345,'b'::13,'c'::12])\" \nstring var9 <- to_gaml([[3,5,7,9],[2,4,6,8]]); // var9 equals '[[3,5,7,9],[2,4,6,8]]' \nstring var10 <- to_gaml(a_graph); // var10 equals ([((1 as node)::(3 as node))::(5 as edge),((0 as node)::(3 as node))::(3 as edge),((1 as node)::(2 as node))::(1 as edge),((0 as node)::(2 as node))::(2 as edge),((0 as node)::(1 as node))::(0 as edge),((2 as node)::(3 as node))::(4 as edge)] as map ) as graph \nstring var11 <- to_gaml(node1); // var11 equals  1 as node\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"to_rectangles"},(0,l.kt)("inlineCode",{parentName:"h3"},"to_rectangles")),(0,l.kt)("h4",{id:"possible-use-76"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"to_rectangles"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"geometry"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"point"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"bool"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<geometry>")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"to_rectangles"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"geometry"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"bool"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<geometry>")," ")),(0,l.kt)("h4",{id:"result-70"},"Result:"),(0,l.kt)("p",null,"A list of rectangles corresponding to the given dimension that result from the decomposition of the geometry into rectangles (geometry, nb_cols, nb_rows, overlaps) by a grid composed of the given number of columns and rows, if overlaps = true, add the rectangles that overlap the border of the geometry\nA list of rectangles of the size corresponding to the given dimension that result from the decomposition of the geometry into rectangles (geometry, dimension, overlaps), if overlaps = true, add the rectangles that overlap the border of the geometry"),(0,l.kt)("h4",{id:"examples-58"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nlist<geometry> var0 <- to_rectangles(self, 5, 20, true); // var0 equals the list of rectangles corresponding to the discretization by a grid of 5 columns and 20 rows into rectangles of the geometry of the agent applying the operator. The rectangles overlapping the border of the geometry are kept \nlist<geometry> var1 <- to_rectangles(self, {10.0, 15.0}, true); // var1 equals the list of rectangles of size {10.0, 15.0} corresponding to the discretization into rectangles of the geometry of the agent applying the operator. The rectangles overlapping the border of the geometry are kept\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"to_segments"},(0,l.kt)("inlineCode",{parentName:"h3"},"to_segments")),(0,l.kt)("h4",{id:"possible-use-77"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"to_segments"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"geometry"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<geometry>")," ")),(0,l.kt)("h4",{id:"result-71"},"Result:"),(0,l.kt)("p",null,"A list of a segments resulting from the decomposition of the geometry (or its contours for polygons) into sgements"),(0,l.kt)("h4",{id:"examples-59"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nlist<geometry> var0 <- to_segments(line([{10,10},{80,10},{80,80}])); // var0 equals [line([{10,10},{80,10}]), line([{80,10},{80,80}])]\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"to_squares"},(0,l.kt)("inlineCode",{parentName:"h3"},"to_squares")),(0,l.kt)("h4",{id:"possible-use-78"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"to_squares"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"geometry"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"bool"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<geometry>")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"to_squares"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"geometry"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"bool"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<geometry>")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"to_squares"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"geometry"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"bool"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<geometry>")," ")),(0,l.kt)("h4",{id:"result-72"},"Result:"),(0,l.kt)("p",null,"A list of a given number of squares from the decomposition of the geometry into squares (geometry, nb_square, overlaps), if overlaps = true, add the squares that overlap the border of the geometry\nA list of a given number of squares from the decomposition of the geometry into squares (geometry, nb_square, overlaps, precision_coefficient), if overlaps = true, add the squares that overlap the border of the geometry, coefficient_precision should be close to 1.0\nA list of squares of the size corresponding to the given size that result from the decomposition of the geometry into squares (geometry, size, overlaps), if overlaps = true, add the squares that overlap the border of the geometry"),(0,l.kt)("h4",{id:"examples-60"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nlist<geometry> var0 <- to_squares(self, 10, true); // var0 equals the list of 10 squares corresponding to the discretization into squares of the geometry of the agent applying the operator. The squares overlapping the border of the geometry are kept \nlist<geometry> var1 <- to_squares(self, 10, true, 0.99); // var1 equals the list of 10 squares corresponding to the discretization into squares of the geometry of the agent applying the operator. The squares overlapping the border of the geometry are kept \nlist<geometry> var2 <- to_squares(self, 10.0, true); // var2 equals the list of squares of side size 10.0 corresponding to the discretization into squares of the geometry of the agent applying the operator. The squares overlapping the border of the geometry are kept\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"to_sub_geometries"},(0,l.kt)("inlineCode",{parentName:"h3"},"to_sub_geometries")),(0,l.kt)("h4",{id:"possible-use-79"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"to_sub_geometries"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"list<float>")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<geometry>")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"to_sub_geometries"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"list<float>"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<geometry>")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"to_sub_geometries"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"geometry"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"list<float>"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<geometry>")," ")),(0,l.kt)("h4",{id:"result-73"},"Result:"),(0,l.kt)("p",null,"A list of geometries resulting after spliting the geometry into sub-geometries.\nA list of geometries resulting after spliting the geometry into sub-geometries."),(0,l.kt)("h4",{id:"examples-61"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nlist<geometry> var0 <- to_sub_geometries(rectangle(10, 50), [0.1, 0.5, 0.4], 1.0); // var0 equals a list of three geometries corresponding to 3 sub-geometries using cubes of 1m size \nlist<geometry> var1 <- to_sub_geometries(rectangle(10, 50), [0.1, 0.5, 0.4]); // var1 equals a list of three geometries corresponding to 3 sub-geometries\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"to_triangles"},(0,l.kt)("inlineCode",{parentName:"h3"},"to_triangles")),(0,l.kt)("p",null,"   Same signification as ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#triangulate"},"triangulate")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"tokenize"},(0,l.kt)("inlineCode",{parentName:"h3"},"tokenize")),(0,l.kt)("p",null,"   Same signification as ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#split_with"},"split_with")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"topology"},(0,l.kt)("inlineCode",{parentName:"h3"},"topology")),(0,l.kt)("h4",{id:"possible-use-80"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"topology"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"unknown"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"topology")," ")),(0,l.kt)("h4",{id:"result-74"},"Result:"),(0,l.kt)("p",null,"casting of the operand to a topology."),(0,l.kt)("h4",{id:"special-cases-22"},"Special cases:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"if the operand is a topology, returns the topology itself;    "),(0,l.kt)("li",{parentName:"ul"},"if the operand is a spatial graph, returns the graph topology associated;    "),(0,l.kt)("li",{parentName:"ul"},"if the operand is a population, returns the topology of the population;    "),(0,l.kt)("li",{parentName:"ul"},"if the operand is a shape or a geometry, returns the continuous topology bounded by the geometry;    "),(0,l.kt)("li",{parentName:"ul"},"if the operand is a matrix, returns the grid topology associated    "),(0,l.kt)("li",{parentName:"ul"},"if the operand is another kind of container, returns the multiple topology associated to the container    "),(0,l.kt)("li",{parentName:"ul"},"otherwise, casts the operand to a geometry and build a topology from it.")),(0,l.kt)("h4",{id:"examples-62"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \ntopology var0 <- topology(0); // var0 equals nil \ntopology(a_graph)   --: Multiple topology in POLYGON ((24.712119771887785 7.867357373616512, 24.712119771887785 61.283226839310565, 82.4013676510046  7.867357373616512)) at location[53.556743711446195;34.57529210646354]\n\n")),(0,l.kt)("h4",{id:"see-also-28"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#geometry"},"geometry"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"topology-1"},(0,l.kt)("inlineCode",{parentName:"h3"},"topology")),(0,l.kt)("h4",{id:"possible-use-81"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"topology"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"any"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"topology"))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"touches"},(0,l.kt)("inlineCode",{parentName:"h3"},"touches")),(0,l.kt)("h4",{id:"possible-use-82"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"touches"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"bool")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"touches"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"geometry"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"bool")," ")),(0,l.kt)("h4",{id:"result-75"},"Result:"),(0,l.kt)("p",null,"A boolean, equal to true if the left-geometry (or agent/point) touches the right-geometry (or agent/point).  "),(0,l.kt)("h4",{id:"comment-13"},"Comment:"),(0,l.kt)("p",null,"returns true when the left-operand only touches the right-operand. When one geometry covers partially (or fully) the other one, it returns false."),(0,l.kt)("h4",{id:"special-cases-23"},"Special cases:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"if one of the operand is null, returns false.")),(0,l.kt)("h4",{id:"examples-63"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nbool var0 <- polyline([{10,10},{20,20}]) touches {15,15}; // var0 equals false \nbool var1 <- polyline([{10,10},{20,20}]) touches {10,10}; // var1 equals true \nbool var2 <- {15,15} touches {15,15}; // var2 equals false \nbool var3 <- polyline([{10,10},{20,20}]) touches polyline([{10,10},{5,5}]); // var3 equals true \nbool var4 <- polyline([{10,10},{20,20}]) touches polyline([{5,5},{15,15}]); // var4 equals false \nbool var5 <- polyline([{10,10},{20,20}]) touches polyline([{15,15},{25,25}]); // var5 equals false \nbool var6 <- polygon([{10,10},{10,20},{20,20},{20,10}]) touches polygon([{15,15},{15,25},{25,25},{25,15}]); // var6 equals false \nbool var7 <- polygon([{10,10},{10,20},{20,20},{20,10}]) touches polygon([{10,20},{20,20},{20,30},{10,30}]); // var7 equals true \nbool var8 <- polygon([{10,10},{10,20},{20,20},{20,10}]) touches polygon([{10,10},{0,10},{0,0},{10,0}]); // var8 equals true \nbool var9 <- polygon([{10,10},{10,20},{20,20},{20,10}]) touches {15,15}; // var9 equals false \nbool var10 <- polygon([{10,10},{10,20},{20,20},{20,10}]) touches {10,15}; // var10 equals true\n\n")),(0,l.kt)("h4",{id:"see-also-29"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#disjoint_from"},"disjoint_from"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#crosses"},"crosses"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#overlaps"},"overlaps"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#partially_overlaps"},"partially_overlaps"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#intersects"},"intersects"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"towards"},(0,l.kt)("inlineCode",{parentName:"h3"},"towards")),(0,l.kt)("h4",{id:"possible-use-83"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"towards"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"float")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"towards"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"geometry"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,l.kt)("h4",{id:"result-76"},"Result:"),(0,l.kt)("p",null,"The direction (in degree) between the two geometries (geometries, agents, points) considering the topology of the agent applying the operator."),(0,l.kt)("h4",{id:"examples-64"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nfloat var0 <- ag1 towards ag2; // var0 equals the direction between ag1 and ag2 and ag3 considering the topology of the agent applying the operator\n\n")),(0,l.kt)("h4",{id:"see-also-30"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#distance_between"},"distance_between"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#distance_to"},"distance_to"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#direction_between"},"direction_between"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#path_between"},"path_between"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#path_to"},"path_to"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"trace"},(0,l.kt)("inlineCode",{parentName:"h3"},"trace")),(0,l.kt)("h4",{id:"possible-use-84"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"trace"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"matrix<unknown>"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,l.kt)("h4",{id:"result-77"},"Result:"),(0,l.kt)("p",null,"The trace of the given matrix (the sum of the elements on the main diagonal)."),(0,l.kt)("h4",{id:"examples-65"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nfloat var0 <- trace(matrix([[1,2],[3,4]])); // var0 equals 5\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"transformed_by"},(0,l.kt)("inlineCode",{parentName:"h3"},"transformed_by")),(0,l.kt)("h4",{id:"possible-use-85"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"transformed_by"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"point")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"transformed_by"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"point"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," ")),(0,l.kt)("h4",{id:"result-78"},"Result:"),(0,l.kt)("p",null,"A geometry resulting from the application of a rotation and a scaling (right-operand : point {angle(degree), scale factor} of the left-hand operand (geometry, agent, point)"),(0,l.kt)("h4",{id:"examples-66"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \ngeometry var0 <- self transformed_by {45, 0.5}; // var0 equals the geometry resulting from 45 degrees rotation and 50% scaling of the geometry of the agent applying the operator.\n\n")),(0,l.kt)("h4",{id:"see-also-31"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#rotated_by"},"rotated_by"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#translated_by"},"translated_by"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"translated_by"},(0,l.kt)("inlineCode",{parentName:"h3"},"translated_by")),(0,l.kt)("h4",{id:"possible-use-86"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"translated_by"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"point")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"translated_by"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"point"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," ")),(0,l.kt)("h4",{id:"result-79"},"Result:"),(0,l.kt)("p",null,"A geometry resulting from the application of a translation by the right-hand operand distance to the left-hand operand (geometry, agent, point)"),(0,l.kt)("h4",{id:"examples-67"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \ngeometry var0 <- self translated_by {10,10,10}; // var0 equals the geometry resulting from applying the translation to the left-hand geometry (or agent).\n\n")),(0,l.kt)("h4",{id:"see-also-32"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#rotated_by"},"rotated_by"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#transformed_by"},"transformed_by"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"translated_to"},(0,l.kt)("inlineCode",{parentName:"h3"},"translated_to")),(0,l.kt)("p",null,"   Same signification as ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#at_location"},"at_location")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"transpose"},(0,l.kt)("inlineCode",{parentName:"h3"},"transpose")),(0,l.kt)("h4",{id:"possible-use-87"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"transpose"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"matrix<unknown>"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"matrix")," ")),(0,l.kt)("h4",{id:"result-80"},"Result:"),(0,l.kt)("p",null,"The transposition of the given matrix"),(0,l.kt)("h4",{id:"examples-68"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nmatrix var0 <- transpose(matrix([[5,-3],[6,-4]])); // var0 equals matrix([[5,6],[-3,-4]])\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"triangle"},(0,l.kt)("inlineCode",{parentName:"h3"},"triangle")),(0,l.kt)("h4",{id:"possible-use-88"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"triangle"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"float")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"triangle"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"triangle"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"float")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," ")),(0,l.kt)("h4",{id:"result-81"},"Result:"),(0,l.kt)("p",null,"A triangle geometry which side size is given by the operand.\nA triangle geometry which the base and height size are given by the operand.  "),(0,l.kt)("h4",{id:"comment-14"},"Comment:"),(0,l.kt)("p",null,"the center of the triangle is by default the location of the current agent in which has been called this operator.the center of the triangle is by default the location of the current agent in which has been called this operator."),(0,l.kt)("h4",{id:"special-cases-24"},"Special cases:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"returns nil if the operand is nil.    "),(0,l.kt)("li",{parentName:"ul"},"returns nil if one of the operand is nil.")),(0,l.kt)("h4",{id:"examples-69"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \ngeometry var0 <- triangle(5); // var0 equals a geometry as a triangle with side_size = 5. \ngeometry var1 <- triangle(5, 10); // var1 equals a geometry as a triangle with a base of 5m and a height of 10m.\n\n")),(0,l.kt)("h4",{id:"see-also-33"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#around"},"around"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#circle"},"circle"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#cone"},"cone"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#line"},"line"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#link"},"link"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#norm"},"norm"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#point"},"point"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#polygon"},"polygon"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#polyline"},"polyline"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#rectangle"},"rectangle"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#square"},"square"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"triangulate"},(0,l.kt)("inlineCode",{parentName:"h3"},"triangulate")),(0,l.kt)("h4",{id:"possible-use-89"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"triangulate"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"geometry"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<geometry>")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"triangulate"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"list<geometry>"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<geometry>")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"triangulate"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<geometry>")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"triangulate"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<geometry>")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"triangulate"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"geometry"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<geometry>")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"triangulate"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"geometry"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"bool"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<geometry>")," ")),(0,l.kt)("h4",{id:"result-82"},"Result:"),(0,l.kt)("p",null,"A list of geometries (triangles) corresponding to the Delaunay triangulation of the operand geometry (geometry, agent, point, use_approx_clipping) with the given tolerance for the clipping and for the triangulation with using an approximate clipping is the last operand is true\nA list of geometries (triangles) corresponding to the Delaunay triangulation of the operand geometry (geometry, agent, point) with the given tolerance for the clipping\nA list of geometries (triangles) corresponding to the Delaunay triangulation of the operand geometry (geometry, agent, point) with the given tolerance for the clipping and for the triangulation\nA list of geometries (triangles) corresponding to the Delaunay triangulation of the operand geometry (geometry, agent, point)\nA list of geometries (triangles) corresponding to the Delaunay triangulation computed from the list of polylines"),(0,l.kt)("h4",{id:"examples-70"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nlist<geometry> var0 <- triangulate(self,0.1, 1.0); // var0 equals the list of geometries (triangles) corresponding to the Delaunay triangulation of the geometry of the agent applying the operator. \nlist<geometry> var1 <- triangulate(self, 0.1); // var1 equals the list of geometries (triangles) corresponding to the Delaunay triangulation of the geometry of the agent applying the operator. \nlist<geometry> var2 <- triangulate(self,0.1, 1.0); // var2 equals the list of geometries (triangles) corresponding to the Delaunay triangulation of the geometry of the agent applying the operator. \nlist<geometry> var3 <- triangulate(self); // var3 equals the list of geometries (triangles) corresponding to the Delaunay triangulation of the geometry of the agent applying the operator. \nlist<geometry> var4 <- triangulate([line([{0,50},{100,50}]), line([{50,0},{50,100}])); // var4 equals the list of geometries (triangles) corresponding to the Delaunay triangulation of the geometry of the agent applying the operator.\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"truncated_gauss"},(0,l.kt)("inlineCode",{parentName:"h3"},"truncated_gauss")),(0,l.kt)("h4",{id:"possible-use-90"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"truncated_gauss"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"list"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"float")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"truncated_gauss"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"point"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,l.kt)("h4",{id:"result-83"},"Result:"),(0,l.kt)("p",null,"A random value from a normally distributed random variable in the interval ]mean - standardDeviation; mean + standardDeviation[."),(0,l.kt)("h4",{id:"special-cases-25"},"Special cases:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"if the operand is a list, only the two first elements are taken into account as ","[mean, standardDeviation]","    "),(0,l.kt)("li",{parentName:"ul"},"when truncated_gauss is called with a list of only one element mean, it will always return 0.0    "),(0,l.kt)("li",{parentName:"ul"},"when the operand is a point, it is read as {mean, standardDeviation}")),(0,l.kt)("h4",{id:"examples-71"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nfloat var0 <- truncated_gauss ([0.5, 0.0]); // var0 equals 0.5 \nfloat var1 <- truncated_gauss ({0, 0.3}); // var1 equals a float between -0.3 and 0.3\n\n")),(0,l.kt)("h4",{id:"see-also-34"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#binomial"},"binomial"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#gamma_rnd"},"gamma_rnd"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#gauss_rnd"},"gauss_rnd"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#lognormal_rnd"},"lognormal_rnd"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#poisson"},"poisson"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#rnd"},"rnd"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#skew_gauss"},"skew_gauss"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#weibull_rnd"},"weibull_rnd"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#gamma_trunc_rnd"},"gamma_trunc_rnd"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#weibull_trunc_rnd"},"weibull_trunc_rnd"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#lognormal_trunc_rnd"},"lognormal_trunc_rnd"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"type_of"},(0,l.kt)("inlineCode",{parentName:"h3"},"type_of")),(0,l.kt)("h4",{id:"possible-use-91"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"type_of"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"unknown"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"any GAML type<unknown>")," ")),(0,l.kt)("h4",{id:"result-84"},"Result:"),(0,l.kt)("p",null,"Returns the GAML type of the operand"),(0,l.kt)("h4",{id:"examples-72"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},' \nstring var0 <- string(type_of("a string")); // var0 equals "string" \nstring var1 <- string(type_of([1,2,3,4,5])); // var1 equals "list<int>" \ngeometry g0 <- to_GAMA_CRS({121,14}, "EPSG:4326");  \nstring var3 <- string(type_of(g0)); // var3 equals "point"\n\n')),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"undirected"},(0,l.kt)("inlineCode",{parentName:"h3"},"undirected")),(0,l.kt)("h4",{id:"possible-use-92"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"undirected"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"graph"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"graph")," ")),(0,l.kt)("h4",{id:"result-85"},"Result:"),(0,l.kt)("p",null,"the operand graph becomes an undirected graph.  "),(0,l.kt)("h4",{id:"comment-15"},"Comment:"),(0,l.kt)("p",null,"WARNING / side effect: this operator modifies the operand and does not create a new graph.    "),(0,l.kt)("h4",{id:"see-also-35"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#directed"},"directed"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"union"},(0,l.kt)("inlineCode",{parentName:"h3"},"union")),(0,l.kt)("h4",{id:"possible-use-93"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"union"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"container<unknown,geometry>"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"container")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"union"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"container")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"union"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"container")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"container"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list")," ")),(0,l.kt)("h4",{id:"result-86"},"Result:"),(0,l.kt)("p",null,"returns a new list containing all the elements of both containers without duplicated elements."),(0,l.kt)("h4",{id:"special-cases-26"},"Special cases:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"if the right-operand is a container of points, geometries or agents, returns the geometry resulting from the union all the geometries    "),(0,l.kt)("li",{parentName:"ul"},"if the left or right operand is nil, union throws an error")),(0,l.kt)("h4",{id:"examples-73"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \ngeometry var0 <- union([geom1, geom2, geom3]); // var0 equals a geometry corresponding to union between geom1, geom2 and geom3 \nlist var1 <- [1,2,3,4,5,6] union [2,4,9]; // var1 equals [1,2,3,4,5,6,9] \nlist var2 <- [1,2,3,4,5,6] union [0,8]; // var2 equals [1,2,3,4,5,6,0,8] \nlist var3 <- [1,3,2,4,5,6,8,5,6] union [0,8]; // var3 equals [1,3,2,4,5,6,8,0]\n\n")),(0,l.kt)("h4",{id:"see-also-36"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#inter"},"inter"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#+"},"+"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"unknown"},(0,l.kt)("inlineCode",{parentName:"h3"},"unknown")),(0,l.kt)("h4",{id:"possible-use-94"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"unknown"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"any"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"unknown"))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"until"},(0,l.kt)("inlineCode",{parentName:"h3"},"until")),(0,l.kt)("h4",{id:"possible-use-95"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"until"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"date"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"bool")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"any expression")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"until"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"date")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"bool")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"until"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"any expression")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"date"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"bool")," ")),(0,l.kt)("h4",{id:"result-87"},"Result:"),(0,l.kt)("p",null,"Returns true if the current_date of the model is before (or equel to) the date passed in argument. Synonym of 'current_date <= argument'"),(0,l.kt)("h4",{id:"examples-74"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nreflex when: until(starting_date) {}    // This reflex will be run only once at the beginning of the simulation\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"upper_case"},(0,l.kt)("inlineCode",{parentName:"h3"},"upper_case")),(0,l.kt)("h4",{id:"possible-use-96"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"upper_case"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"string")," ")),(0,l.kt)("h4",{id:"result-88"},"Result:"),(0,l.kt)("p",null,"Converts all of the characters in the string operand to upper case"),(0,l.kt)("h4",{id:"examples-75"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nstring var0 <- upper_case(\"Abc\"); // var0 equals 'ABC'\n\n")),(0,l.kt)("h4",{id:"see-also-37"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#lower_case"},"lower_case"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"use_cache"},(0,l.kt)("inlineCode",{parentName:"h3"},"use_cache")),(0,l.kt)("h4",{id:"possible-use-97"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"graph")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"use_cache"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"bool")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"graph")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"use_cache"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"graph")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"bool"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"graph")," ")),(0,l.kt)("h4",{id:"result-89"},"Result:"),(0,l.kt)("p",null,"if the second operand is true, the operand graph will store in a cache all the previously computed shortest path (the cache be cleared if the graph is modified).  "),(0,l.kt)("h4",{id:"comment-16"},"Comment:"),(0,l.kt)("p",null,"WARNING / side effect: this operator modifies the operand and does not create a new graph.    "),(0,l.kt)("h4",{id:"see-also-38"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#path_between"},"path_between"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"user_input"},(0,l.kt)("inlineCode",{parentName:"h3"},"user_input")),(0,l.kt)("h4",{id:"possible-use-98"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"user_input"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"list"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"map<string,unknown>")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"user_input"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"list")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"map<string,unknown>")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"user_input"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"string")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"list"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"map<string,unknown>")," ")),(0,l.kt)("h4",{id:"result-90"},"Result:"),(0,l.kt)("p",null,"Asks the user for some values and returns a map containing these values. Takes a string and a list of calls to the ",(0,l.kt)("inlineCode",{parentName:"p"},"enter()")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"choose()")," operators as arguments. The string is used to specify the message of the dialog box. The list is to specify the parameters the user can enter\nAsks the user for some values and returns a map containing these values. Takes a string and a list of calls to the ",(0,l.kt)("inlineCode",{parentName:"p"},"enter()")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"choose()")," operators as arguments. The string is used to specify the message of the dialog box. The list is to specify the parameters the user can enter"),(0,l.kt)("h4",{id:"examples-76"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nmap<string,unknown> values_no_title <- user_input([enter('Number',100), enter('Location',point, {10, 10})]); \ncreate bug number: int(values2 at \"Number\") with: [location:: (point(values2 at \"Location\"))]; \nmap<string,unknown> values2 <- user_input('Enter number of agents and locations',[enter('Number',100), enter('Location',point, {10, 10})]); \ncreate bug number: int(values2 at \"Number\") with: [location:: (point(values2 at \"Location\"))];\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"using"},(0,l.kt)("inlineCode",{parentName:"h3"},"using")),(0,l.kt)("h4",{id:"possible-use-99"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"any expression")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"using"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"topology")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"unknown")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"using"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"any expression")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"topology"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"unknown")," ")),(0,l.kt)("h4",{id:"result-91"},"Result:"),(0,l.kt)("p",null,"Allows to specify in which topology a spatial computation should take place."),(0,l.kt)("h4",{id:"special-cases-27"},"Special cases:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"has no effect if the topology passed as a parameter is nil")),(0,l.kt)("h4",{id:"examples-77"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nunknown var0 <- (agents closest_to self) using topology(world); // var0 equals the closest agent to self (the caller) in the continuous topology of the world\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"variance"},(0,l.kt)("inlineCode",{parentName:"h3"},"variance")),(0,l.kt)("h4",{id:"possible-use-100"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"variance"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"container"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,l.kt)("h4",{id:"result-92"},"Result:"),(0,l.kt)("p",null,"the variance of the elements of the operand. See ",(0,l.kt)("a",{href:"http://en.wikipedia.org/wiki/Variance"},"Variance")," for more details.  "),(0,l.kt)("h4",{id:"comment-17"},"Comment:"),(0,l.kt)("p",null,"The operator casts all the numerical element of the list into float. The elements that are not numerical are discarded."),(0,l.kt)("h4",{id:"examples-78"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nfloat var0 <- variance ([4.5, 3.5, 5.5, 7.0]); // var0 equals 1.671875\n\n")),(0,l.kt)("h4",{id:"see-also-39"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#mean"},"mean"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#median"},"median"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"variance-1"},(0,l.kt)("inlineCode",{parentName:"h3"},"variance")),(0,l.kt)("h4",{id:"possible-use-101"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"variance"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"float")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"variance"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,l.kt)("h4",{id:"result-93"},"Result:"),(0,l.kt)("p",null,"Returns the variance from a standard deviation.\nReturns the variance of a data sequence. That is (sumOfSquares - mean*sum) / size with mean = sum/size.  "),(0,l.kt)("h4",{id:"comment-18"},"Comment:"),(0,l.kt)("p",null,"In the example we consider variance of ","[1,3,5,7]",". The size is 4, the sum is 1+3+5+7=16 and the sum of squares is 84.The variance is (84- 16^2/4)/4. CQFD."),(0,l.kt)("h4",{id:"examples-79"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nint var0 <- int(variance([1,3,5,6,9,11,12,13])); // var0 equals 17 \nint var1 <- int(variance(4,16,84)); // var1 equals 5\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"variance_of"},(0,l.kt)("inlineCode",{parentName:"h3"},"variance_of")),(0,l.kt)("h4",{id:"possible-use-102"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"container")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"variance_of"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"any expression")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"unknown")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"variance_of"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"container")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"any expression"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"unknown")," ")),(0,l.kt)("h4",{id:"result-94"},"Result:"),(0,l.kt)("p",null,"the variance of the right-hand expression evaluated on each of the elements of the left-hand operand  "),(0,l.kt)("h4",{id:"comment-19"},"Comment:"),(0,l.kt)("p",null,"in the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements."),(0,l.kt)("h4",{id:"examples-80"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nfloat var0 <- [1,2,3,4,5,6] variance_of each with_precision 2; // var0 equals 2.92\n\n")),(0,l.kt)("h4",{id:"see-also-40"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#min_of"},"min_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#max_of"},"max_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#sum_of"},"sum_of"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#product_of"},"product_of"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"vertical"},(0,l.kt)("inlineCode",{parentName:"h3"},"vertical")),(0,l.kt)("h4",{id:"possible-use-103"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"vertical"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"map<unknown,int>"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"unknown<string>"))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"voronoi"},(0,l.kt)("inlineCode",{parentName:"h3"},"voronoi")),(0,l.kt)("h4",{id:"possible-use-104"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"voronoi"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"list<point>"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<geometry>")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"list<point>")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"voronoi"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<geometry>")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"voronoi"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"list<point>")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"geometry"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list<geometry>")," ")),(0,l.kt)("h4",{id:"result-95"},"Result:"),(0,l.kt)("p",null,"A list of geometries corresponding to the Voronoi diagram built from the list of points according to the given clip\nA list of geometries corresponding to the Voronoi diagram built from the list of points"),(0,l.kt)("h4",{id:"examples-81"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nlist<geometry> var0 <- voronoi([{10,10},{50,50},{90,90},{10,90},{90,10}], square(300)); // var0 equals the list of geometries corresponding to the Voronoi Diagram built from the list of points with a square of 300m side size as clip. \nlist<geometry> var1 <- voronoi([{10,10},{50,50},{90,90},{10,90},{90,10}]); // var1 equals the list of geometries corresponding to the Voronoi Diagram built from the list of points.\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"weibull_density"},(0,l.kt)("inlineCode",{parentName:"h3"},"weibull_density")),(0,l.kt)("h4",{id:"possible-use-105"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"weibull_density"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,l.kt)("h4",{id:"result-96"},"Result:"),(0,l.kt)("p",null,"weibull_density(x,shape,scale) returns the probability density function (PDF) at the specified point x of the Weibull distribution with the given shape and scale."),(0,l.kt)("h4",{id:"examples-82"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nfloat var0 <- weibull_rnd(1,2,3) ; // var0 equals 0.731\n\n")),(0,l.kt)("h4",{id:"see-also-41"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#binomial"},"binomial"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#gamma_rnd"},"gamma_rnd"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#gauss_rnd"},"gauss_rnd"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#lognormal_rnd"},"lognormal_rnd"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#poisson"},"poisson"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#rnd"},"rnd"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#skew_gauss"},"skew_gauss"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#lognormal_density"},"lognormal_density"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#gamma_density"},"gamma_density"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"weibull_rnd"},(0,l.kt)("inlineCode",{parentName:"h3"},"weibull_rnd")),(0,l.kt)("h4",{id:"possible-use-106"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"float")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"weibull_rnd"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"float")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"weibull_rnd"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"float")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,l.kt)("h4",{id:"result-97"},"Result:"),(0,l.kt)("p",null,"returns a random value from a Weibull distribution with specified values of the shape (alpha) and scale (beta) parameters. See ",(0,l.kt)("a",{parentName:"p",href:"https://mathworld.wolfram.com/WeibullDistribution.html"},"https://mathworld.wolfram.com/WeibullDistribution.html")," for more details (equations 1 and 2)."),(0,l.kt)("h4",{id:"examples-83"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nfloat var0 <- weibull_rnd(2,3) ; // var0 equals 0.731\n\n")),(0,l.kt)("h4",{id:"see-also-42"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsBC#binomial"},"binomial"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#gamma_rnd"},"gamma_rnd"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#gauss_rnd"},"gauss_rnd"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#lognormal_rnd"},"lognormal_rnd"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#poisson"},"poisson"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#rnd"},"rnd"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#skew_gauss"},"skew_gauss"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#truncated_gauss"},"truncated_gauss"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#weibull_trunc_rnd"},"weibull_trunc_rnd"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"weibull_trunc_rnd"},(0,l.kt)("inlineCode",{parentName:"h3"},"weibull_trunc_rnd")),(0,l.kt)("h4",{id:"possible-use-107"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"weibull_trunc_rnd"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"float")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"weibull_trunc_rnd"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"bool"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,l.kt)("h4",{id:"result-98"},"Result:"),(0,l.kt)("p",null,"returns a random value from a truncated Weibull distribution (in a range or given only one boundary) with specified values of the shape (alpha) and scale (beta) parameters. See ",(0,l.kt)("a",{parentName:"p",href:"https://mathworld.wolfram.com/WeibullDistribution.html"},"https://mathworld.wolfram.com/WeibullDistribution.html")," for more details (equations 1 and 2)."),(0,l.kt)("h4",{id:"special-cases-28"},"Special cases:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"when 2 float operands are specified, they are taken as mininimum and maximum values for the result ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nweibull_trunc_rnd(2,3,0.0,5.0)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"when 1 float and a boolean (isMax) operands are specified, the float value represents the single boundary (max if the boolean is true, min otherwise), ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nweibull_trunc_rnd(2,3,5,true)\n")),(0,l.kt)("h4",{id:"see-also-43"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#weibull_rnd"},"weibull_rnd"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#gamma_trunc_rnd"},"gamma_trunc_rnd"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#lognormal_trunc_rnd"},"lognormal_trunc_rnd"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#truncated_gauss"},"truncated_gauss"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"weight_of"},(0,l.kt)("inlineCode",{parentName:"h3"},"weight_of")),(0,l.kt)("h4",{id:"possible-use-108"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"graph")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"weight_of"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"unknown")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"float")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"weight_of"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"graph")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"unknown"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,l.kt)("h4",{id:"result-99"},"Result:"),(0,l.kt)("p",null,"returns the weight of the given edge (right-hand operand) contained in the graph given in right-hand operand.  "),(0,l.kt)("h4",{id:"comment-20"},"Comment:"),(0,l.kt)("p",null,"In a localized graph, an edge has a weight by default (the distance between both vertices)."),(0,l.kt)("h4",{id:"special-cases-29"},"Special cases:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"if the left-operand (the graph) is nil, returns nil    "),(0,l.kt)("li",{parentName:"ul"},"if the right-hand operand is not an edge of the given graph, weight_of checks whether it is a node of the graph and tries to return its weight    "),(0,l.kt)("li",{parentName:"ul"},"if the right-hand operand is neither a node, nor an edge, returns 1.")),(0,l.kt)("h4",{id:"examples-84"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \ngraph graphFromMap <-  as_edge_graph([{1,5}::{12,45},{12,45}::{34,56}]); \nfloat var1 <- graphFromMap weight_of(link({1,5},{12,45})); // var1 equals 1.0\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"weighted_means_dm"},(0,l.kt)("inlineCode",{parentName:"h3"},"weighted_means_DM")),(0,l.kt)("h4",{id:"possible-use-109"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"list<list>")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"weighted_means_DM"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"list<map<string,unknown>>")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"int")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"weighted_means_DM"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"list<list>")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"list<map<string,unknown>>"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"int")," ")),(0,l.kt)("h4",{id:"result-100"},"Result:"),(0,l.kt)("p",null,"The index of the candidate that maximizes the weighted mean of its criterion values. The first operand is the list of candidates (a candidate is a list of criterion values); the second operand the list of criterion (list of map)"),(0,l.kt)("h4",{id:"special-cases-30"},"Special cases:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"returns -1 is the list of candidates is nil or empty")),(0,l.kt)("h4",{id:"examples-85"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},' \nint var0 <- weighted_means_DM([[1.0, 7.0],[4.0,2.0],[3.0, 3.0]], [["name"::"utility", "weight" :: 2.0],["name"::"price", "weight" :: 1.0]]); // var0 equals 1\n\n')),(0,l.kt)("h4",{id:"see-also-44"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#promethee_dm"},"promethee_DM"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#electre_dm"},"electre_DM"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#evidence_theory_dm"},"evidence_theory_DM"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"where"},(0,l.kt)("inlineCode",{parentName:"h3"},"where")),(0,l.kt)("h4",{id:"possible-use-110"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"container")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"where"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"any expression")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"where"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"container")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"any expression"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"list")," ")),(0,l.kt)("h4",{id:"result-101"},"Result:"),(0,l.kt)("p",null,"a list containing all the elements of the left-hand operand that make the right-hand operand evaluate to true.  "),(0,l.kt)("h4",{id:"comment-21"},"Comment:"),(0,l.kt)("p",null,"in the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements."),(0,l.kt)("h4",{id:"special-cases-31"},"Special cases:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"if the left-hand operand is a list nil, where returns a new empty list    "),(0,l.kt)("li",{parentName:"ul"},"if the left-operand is a map, the keyword each will contain each value ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nlist var4 <- [1::2, 3::4, 5::6] where (each >= 4); // var4 equals [4, 6]\n")),(0,l.kt)("h4",{id:"examples-86"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nlist var0 <- [1,2,3,4,5,6,7,8] where (each > 3); // var0 equals [4, 5, 6, 7, 8]  \nlist var2 <- g2 where (length(g2 out_edges_of each) = 0 ); // var2 equals [node9, node7, node10, node8, node11] \nlist var3 <- (list(node) where (round(node(each).location.x) > 32); // var3 equals [node2, node3]\n\n")),(0,l.kt)("h4",{id:"see-also-45"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#first_with"},"first_with"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#last_with"},"last_with"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#where"},"where"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"with_max_of"},(0,l.kt)("inlineCode",{parentName:"h3"},"with_max_of")),(0,l.kt)("h4",{id:"possible-use-111"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"container")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"with_max_of"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"any expression")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"unknown")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"with_max_of"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"container")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"any expression"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"unknown")," ")),(0,l.kt)("h4",{id:"result-102"},"Result:"),(0,l.kt)("p",null,"one of elements of the left-hand operand that maximizes the value of the right-hand operand  "),(0,l.kt)("h4",{id:"comment-22"},"Comment:"),(0,l.kt)("p",null,"in the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements."),(0,l.kt)("h4",{id:"special-cases-32"},"Special cases:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"if the left-hand operand is nil, with_max_of returns the default value of the right-hand operand")),(0,l.kt)("h4",{id:"examples-87"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nunknown var0 <- [1,2,3,4,5,6,7,8] with_max_of (each ); // var0 equals 8 \nunknown var2 <- g2 with_max_of (length(g2 out_edges_of each)  ) ; // var2 equals node4 \nunknown var3 <- (list(node) with_max_of (round(node(each).location.x)); // var3 equals node3 \nunknown var4 <- [1::2, 3::4, 5::6] with_max_of (each); // var4 equals 6\n\n")),(0,l.kt)("h4",{id:"see-also-46"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#where"},"where"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#with_min_of"},"with_min_of"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"with_min_of"},(0,l.kt)("inlineCode",{parentName:"h3"},"with_min_of")),(0,l.kt)("h4",{id:"possible-use-112"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"container")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"with_min_of"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"any expression")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"unknown")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"with_min_of"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"container")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"any expression"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"unknown")," ")),(0,l.kt)("h4",{id:"result-103"},"Result:"),(0,l.kt)("p",null,"one of elements of the left-hand operand that minimizes the value of the right-hand operand  "),(0,l.kt)("h4",{id:"comment-23"},"Comment:"),(0,l.kt)("p",null,"in the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements."),(0,l.kt)("h4",{id:"special-cases-33"},"Special cases:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"if the left-hand operand is nil, with_max_of returns the default value of the right-hand operand")),(0,l.kt)("h4",{id:"examples-88"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nunknown var0 <- [1,2,3,4,5,6,7,8] with_min_of (each ); // var0 equals 1 \nunknown var2 <- g2 with_min_of (length(g2 out_edges_of each)  ); // var2 equals node11 \nunknown var3 <- (list(node) with_min_of (round(node(each).location.x)); // var3 equals node0 \nunknown var4 <- [1::2, 3::4, 5::6] with_min_of (each); // var4 equals 2\n\n")),(0,l.kt)("h4",{id:"see-also-47"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#where"},"where"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#with_max_of"},"with_max_of"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"with_optimizer_type"},(0,l.kt)("inlineCode",{parentName:"h3"},"with_optimizer_type")),(0,l.kt)("h4",{id:"possible-use-113"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"graph")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"with_optimizer_type"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"string")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"graph")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"with_optimizer_type"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"graph")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"graph")," ")),(0,l.kt)("h4",{id:"result-104"},"Result:"),(0,l.kt)("p",null,"changes the shortest path computation method of the given graph  "),(0,l.kt)("h4",{id:"comment-24"},"Comment:"),(0,l.kt)("p",null,'the right-hand operand can be "Djikstra", "Bellmann", "Astar" to use the associated algorithm. Note that these methods are dynamic: the path is computed when needed. In contrarily, if the operand is another string, a static method will be used, i.e. all the shortest are previously computed.'),(0,l.kt)("h4",{id:"examples-89"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},' \ngraphEpidemio <- graphEpidemio with_optimizer_type "static";\n\n')),(0,l.kt)("h4",{id:"see-also-48"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsSZ#set_verbose"},"set_verbose"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"with_precision"},(0,l.kt)("inlineCode",{parentName:"h3"},"with_precision")),(0,l.kt)("h4",{id:"possible-use-114"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"float")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"with_precision"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"int")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"float")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"with_precision"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"float")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"int"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"float")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"with_precision"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"int")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"with_precision"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"int"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"point")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"with_precision"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"int")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"point")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"with_precision"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"point")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"int"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"point")," ")),(0,l.kt)("h4",{id:"result-105"},"Result:"),(0,l.kt)("p",null,"Rounds off the value of left-hand operand to the precision given by the value of right-hand operand\nA geometry corresponding to the rounding of points of the operand considering a given precison.\nRounds off the ordinates of the left-hand point to the precision given by the value of right-hand operand"),(0,l.kt)("h4",{id:"examples-90"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nfloat var0 <- 12345.78943 with_precision 2; // var0 equals 12345.79 \nfloat var1 <- 123 with_precision 2; // var1 equals 123.00 \ngeometry var2 <- self with_precision 2; // var2 equals the geometry resulting from the rounding of points of the geometry with a precision of 0.1. \npoint var3 <- {12345.78943, 12345.78943, 12345.78943} with_precision 2 ; // var3 equals {12345.79, 12345.79, 12345.79}\n\n")),(0,l.kt)("h4",{id:"see-also-49"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#round"},"round"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"with_values"},(0,l.kt)("inlineCode",{parentName:"h3"},"with_values")),(0,l.kt)("h4",{id:"possible-use-115"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"predicate")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"with_values"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"map")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"predicate")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"with_values"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"predicate")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"map"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"predicate")," ")),(0,l.kt)("h4",{id:"result-106"},"Result:"),(0,l.kt)("p",null,"change the parameters of the given predicate"),(0,l.kt)("h4",{id:"examples-91"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},' \npredicate with_values ["time"::10]\n\n')),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"with_weights"},(0,l.kt)("inlineCode",{parentName:"h3"},"with_weights")),(0,l.kt)("h4",{id:"possible-use-116"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"graph")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"with_weights"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"list")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"graph")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"with_weights"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"graph")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"list"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"graph")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"graph")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"with_weights"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"map")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"graph")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"with_weights"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"graph")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"map"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"graph")," ")),(0,l.kt)("h4",{id:"result-107"},"Result:"),(0,l.kt)("p",null,"returns the graph (left-hand operand) with weight given in the map (right-hand operand).  "),(0,l.kt)("h4",{id:"comment-25"},"Comment:"),(0,l.kt)("p",null,"WARNING / side effect: this operator modifies the operand and does not create a new graph. It also re-initializes the path finder"),(0,l.kt)("h4",{id:"special-cases-34"},"Special cases:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"if the right-hand operand is a list, assigns the n elements of the list to the n first edges. Note that the ordering of edges may change overtime, which can create some problems...    "),(0,l.kt)("li",{parentName:"ul"},"if the left-hand operand is a map, the map should contains pairs such as: vertex/edge::double ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \ngraph_from_edges (list(ant) as_map each::one_of (list(ant))) with_weights (list(ant) as_map each::each.food)\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"without_holes"},(0,l.kt)("inlineCode",{parentName:"h3"},"without_holes")),(0,l.kt)("h4",{id:"possible-use-117"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"without_holes"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"geometry"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," ")),(0,l.kt)("h4",{id:"result-108"},"Result:"),(0,l.kt)("p",null,"A geometry corresponding to the operand geometry (geometry, agent, point) without its holes"),(0,l.kt)("h4",{id:"examples-92"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \ngeometry var0 <- solid(self); // var0 equals the geometry corresponding to the geometry of the agent applying the operator without its holes. \nfloat var1 <- without_holes(polygon([{0,50}, {0,0}, {50,0}, {50,50}, {0,50}]) - square(10) at_location {10,10}).area; // var1 equals 2500.0\n\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"writable"},(0,l.kt)("inlineCode",{parentName:"h3"},"writable")),(0,l.kt)("h4",{id:"possible-use-118"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"file")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"writable"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"bool")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"file")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"writable"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"file")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"bool"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"file")," ")),(0,l.kt)("h4",{id:"result-109"},"Result:"),(0,l.kt)("p",null,"Marks the file as read-only or not, depending on the second boolean argument, and returns the first argument  "),(0,l.kt)("h4",{id:"comment-26"},"Comment:"),(0,l.kt)("p",null,'A file is created using its native flags. This operator can change them. Beware that this change is system-wide (and not only restrained to GAMA): changing a file to read-only mode (e.g. "writable(f, false)")'),(0,l.kt)("h4",{id:"examples-93"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},' \nfile var0 <- shape_file("../images/point_eau.shp") writable false; // var0 equals returns a file in read-only mode\n\n')),(0,l.kt)("h4",{id:"see-also-50"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsDH#file"},"file"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"xml_file"},(0,l.kt)("inlineCode",{parentName:"h3"},"xml_file")),(0,l.kt)("h4",{id:"possible-use-119"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"xml_file"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"file")," ")),(0,l.kt)("h4",{id:"result-110"},"Result:"),(0,l.kt)("p",null,"Constructs a file of type xml. Allowed extensions are limited to xml"),(0,l.kt)("h4",{id:"special-cases-35"},"Special cases:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"xml_file(string): This file constructor allows to read a xml file ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},' \nfile f <-xml_file("file.xml");\n')),(0,l.kt)("h4",{id:"see-also-51"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsIM#is_xml"},"is_xml"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"xor"},(0,l.kt)("inlineCode",{parentName:"h3"},"xor")),(0,l.kt)("h4",{id:"possible-use-120"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"bool")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"xor"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"bool")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"bool")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"xor"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"bool")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"bool"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"bool")," ")),(0,l.kt)("h4",{id:"result-111"},"Result:"),(0,l.kt)("p",null,"a bool value, equal to the logical xor between the left-hand operand and the right-hand operand. False when they are equal  "),(0,l.kt)("h4",{id:"comment-27"},"Comment:"),(0,l.kt)("p",null,"both operands are always casted to bool before applying the operator. Thus, an expression like 1 xor 0 is accepted and returns true."),(0,l.kt)("h4",{id:"examples-94"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nbool var0 <- xor(true,false); // var0 equals true \nbool var1 <- xor(false,false); // var1 equals false \nbool var2 <- xor(false,true); // var2 equals true \nbool var3 <- xor(true,true); // var3 equals false \nbool var4 <- true xor true; // var4 equals false\n\n")),(0,l.kt)("h4",{id:"see-also-52"},"See also:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"OperatorsNR#or"},"or"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#and"},"and"),", ",(0,l.kt)("a",{parentName:"p",href:"OperatorsAA#!"},"!"),", "),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"years_between"},(0,l.kt)("inlineCode",{parentName:"h3"},"years_between")),(0,l.kt)("h4",{id:"possible-use-121"},"Possible use:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"date")," ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"years_between"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"date")," ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"int")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"years_between"))," (",(0,l.kt)("inlineCode",{parentName:"li"},"date")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"date"),") ---\x3e  ",(0,l.kt)("inlineCode",{parentName:"li"},"int")," ")),(0,l.kt)("h4",{id:"result-112"},"Result:"),(0,l.kt)("p",null,"Provide the exact number of years between two dates. This number can be positive or negative (if the second operand is smaller than the first one)"),(0,l.kt)("h4",{id:"examples-95"},"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," \nint var0 <- years_between(date('2000-01-01'), date('2010-01-01')); // var0 equals 10\n\n")))}h.isMDXComponent=!0}}]);