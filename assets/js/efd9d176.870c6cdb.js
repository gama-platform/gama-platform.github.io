"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[70409],{27261:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"DefiningAdvancedSpecies","title":"Defining advanced species","description":"In the previous chapter, we saw how to declare and manipulate regular species and the global species (as a reminder, the instance of the global species is the world agent).","source":"@site/versioned_docs/version-1.8.1/DefiningAdvancedSpecies.md","sourceDirName":".","slug":"/DefiningAdvancedSpecies","permalink":"/wiki/1.8.1/DefiningAdvancedSpecies","draft":false,"unlisted":false,"editUrl":"https://github.com/gama-platform/gama/wiki/DefiningAdvancedSpecies/_edit","tags":[],"version":"1.8.1","frontMatter":{"title":"Defining advanced species"},"sidebar":"main","previous":{"title":"Inheritance","permalink":"/wiki/1.8.1/Inheritance"},"next":{"title":"Grid Species","permalink":"/wiki/1.8.1/GridSpecies"}}');var s=i(74848),r=i(28453);const a={title:"Defining advanced species"},c=void 0,o={},l=[];function d(e){const n={a:"a",p:"p",strong:"strong",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["In the previous chapter, we saw how to declare and manipulate ",(0,s.jsx)(n.a,{href:"RegularSpecies",children:(0,s.jsx)(n.strong,{children:"regular species"})})," and the ",(0,s.jsx)(n.a,{href:"GlobalSpecies",children:(0,s.jsx)(n.strong,{children:"global species"})})," (as a reminder, the instance of the ",(0,s.jsx)(n.strong,{children:"global species"})," is the ",(0,s.jsx)(n.strong,{children:"world agent"}),")."]}),"\n",(0,s.jsxs)(n.p,{children:["We will now see that GAMA provides you the possibility to declare some special species, such as ",(0,s.jsx)(n.a,{href:"GridSpecies",children:(0,s.jsx)(n.strong,{children:"grids"})})," or ",(0,s.jsx)(n.a,{href:"GraphSpecies",children:(0,s.jsx)(n.strong,{children:"graphs"})}),", with their own built-in attributes and their own built-in actions. We will also see how to declare ",(0,s.jsx)(n.a,{href:"MirrorSpecies",children:(0,s.jsx)(n.strong,{children:"mirror species"})}),', which is a "copy" of a regular species, in order to give it an other representation. Finally, we will learn how to represent several agents through one unique agent, with ',(0,s.jsx)(n.a,{href:"MultiLevelArchitecture",children:(0,s.jsx)(n.strong,{children:"multi-level architecture"})}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>c});var t=i(96540);const s={},r=t.createContext(s);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);