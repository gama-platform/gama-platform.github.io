"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[22547],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var l=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,l,a=function(e,t){if(null==e)return{};var n,l,a={},i=Object.keys(e);for(l=0;l<i.length;l++)n=i[l],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(l=0;l<i.length;l++)n=i[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=l.createContext({}),s=function(e){var t=l.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=s(e.components);return l.createElement(p.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},u=l.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=s(n),u=a,h=m["".concat(p,".").concat(u)]||m[u]||c[u]||i;return n?l.createElement(h,r(r({ref:t},d),{},{components:n})):l.createElement(h,r({ref:t},d))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[m]="string"==typeof e?e:a,r[1]=o;for(var s=2;s<i;s++)r[s]=n[s];return l.createElement.apply(null,r)}return l.createElement.apply(null,n)}u.displayName="MDXCreateElement"},97578:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>p,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>m});var l=n(87462),a=n(63366),i=(n(67294),n(3905)),r=["components"],o={title:"2. Moving Cells"},p=void 0,s={unversionedId:"ThreeD_step2",id:"ThreeD_step2",title:"2. Moving Cells",description:"This second step model adds the moving3D skill to the cell agents and simply makes the cell agents move by defining a reflex that will call the action move. We will also add additional visual information to the display.",source:"@site/../docs/ThreeD_step2.md",sourceDirName:".",slug:"/ThreeD_step2",permalink:"/wiki/next/ThreeD_step2",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/ThreeD_step2/_edit",tags:[],version:"current",frontMatter:{title:"2. Moving Cells"},sidebar:"tuto",previous:{title:"1. Basic Model",permalink:"/wiki/next/ThreeD_step1"},next:{title:"3. Connections",permalink:"/wiki/next/ThreeD_step3"}},d={},m=[{value:"Formulation",id:"formulation",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"Global Section",id:"global-section",level:3},{value:"Global variable",id:"global-variable",level:4},{value:"Model initialization",id:"model-initialization",level:4},{value:"Moving3D skills",id:"moving3d-skills",level:3},{value:"Experiment",id:"experiment",level:3},{value:"Output",id:"output",level:4},{value:"Complete Model",id:"complete-model",level:2}],c={toc:m};function u(e){var t=e.components,o=(0,a.Z)(e,r);return(0,i.kt)("wrapper",(0,l.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This second step model adds the ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"moving3D"))," skill to the ",(0,i.kt)("inlineCode",{parentName:"p"},"cell")," agents and simply makes the ",(0,i.kt)("inlineCode",{parentName:"p"},"cell")," agents move by defining a reflex that will call the action ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"move")),". We will also add additional visual information to the display."),(0,i.kt)("h2",{id:"formulation"},"Formulation"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Redefining the shape of the world with a 3D Shape."),(0,i.kt)("li",{parentName:"ul"},"Attaching new skills (",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"moving3D")),") to ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"cell"))," agents."),(0,i.kt)("li",{parentName:"ul"},"Modify ",(0,i.kt)("strong",{parentName:"li"},"cell")," aspect."),(0,i.kt)("li",{parentName:"ul"},"Add a graphics layer.")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"http://www.youtube.com/watch?feature=player_embedded&v=_QqUbC0MWRU"},(0,i.kt)("img",{alt:"3D tutorial: moving cells in a 3D space.",src:n(69645).Z,width:"500",height:"500"}))),(0,i.kt)("h2",{id:"model-definition"},"Model Definition"),(0,i.kt)("h3",{id:"global-section"},"Global Section"),(0,i.kt)("h4",{id:"global-variable"},"Global variable"),(0,i.kt)("p",null,"We use a new global variable called ",(0,i.kt)("inlineCode",{parentName:"p"},"environment_size")," to define the size of our 3D environment.\nIn the global section, we define the new variable:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"int environment_size <-100;\n")),(0,i.kt)("p",null,"Then we redefine the ",(0,i.kt)("inlineCode",{parentName:"p"},"shape")," of the world (by default the shape of the world is a 100x100 square) as a cube that will have the size defined by the ",(0,i.kt)("inlineCode",{parentName:"p"},"environment_size")," variable. To do so we change the shape of the world in the ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"global"))," section:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"geometry shape <- cube(environment_size);   \n")),(0,i.kt)("h4",{id:"model-initialization"},"Model initialization"),(0,i.kt)("p",null,"When we created the ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"cell"))," agents, we want to place them randomly in the 3D environment. To do so we set the ",(0,i.kt)("inlineCode",{parentName:"p"},"location")," with a random value for ",(0,i.kt)("inlineCode",{parentName:"p"},"x"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"y")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"z")," between ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"environment_size"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"create cell number: nb_cells { \n  location <- {rnd(environment_size), rnd(environment_size), rnd(environment_size)};       \n}\n")),(0,i.kt)("h3",{id:"moving3d-skills"},"Moving3D skills"),(0,i.kt)("p",null,"In the previous example, we only created ",(0,i.kt)("inlineCode",{parentName:"p"},"cell")," agents that did not have any behavior. In this step we want to make them move. To do so we add a ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"moving3D"))," skill to the ",(0,i.kt)("inlineCode",{parentName:"p"},"cell")," species."),(0,i.kt)("p",null,"More information on built-in skills proposed by GAMA can be found ",(0,i.kt)("a",{parentName:"p",href:"BuiltInSkills"},"here"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"species cell skills: [moving3D]{\n...     \n}\n")),(0,i.kt)("p",null,"Then we define a new reflex for the species ",(0,i.kt)("inlineCode",{parentName:"p"},"cell")," that consists in calling the action ",(0,i.kt)("inlineCode",{parentName:"p"},"move")," bundled in ",(0,i.kt)("inlineCode",{parentName:"p"},"moving3D")," skill."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"reflex move {\n    do move;\n}                       \n")),(0,i.kt)("p",null,"Finally we modify a bit the aspect of the sphere to set its size according to the ",(0,i.kt)("inlineCode",{parentName:"p"},"environment_size")," global variable previously defined."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"aspect default {\n    draw sphere(environment_size*0.01) color: #blue;   \n}\n")),(0,i.kt)("h3",{id:"experiment"},"Experiment"),(0,i.kt)("p",null,"The experiment is the same as the previous one except that we will display the bounds of the environment by using a ",(0,i.kt)("inlineCode",{parentName:"p"},"graphics")," layer."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'graphics "env" {\n    draw cube(environment_size) color: #black wireframe: true;  \n}\n')),(0,i.kt)("h4",{id:"output"},"Output"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'output {\n    display View1 type:opengl{\n        graphics "env"{\n            draw cube(environment_size) color: #black wireframe: true;  \n        }\n        species cell;  \n    }\n}\n')),(0,i.kt)("h2",{id:"complete-model"},"Complete Model"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gaml",metastring:"reference",reference:!0},"https://github.com/gama-platform/gama/blob/master/msi.gama.models/models/Tutorials/3D/models/Model%2002.gaml\n")))}u.isMDXComponent=!0},69645:(e,t,n)=>{n.d(t,{Z:()=>l});const l=n.p+"assets/images/3D_model1-35ed6f27fc184f2e81c434b4cb4f821c.png"}}]);