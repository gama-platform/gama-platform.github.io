"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[86399],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>g});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=i.createContext({}),p=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=p(e.components);return i.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),u=p(n),g=a,_=u["".concat(c,".").concat(g)]||u[g]||m[g]||r;return n?i.createElement(_,s(s({ref:t},l),{},{components:n})):i.createElement(_,s({ref:t},l))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=u;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var p=2;p<r;p++)s[p]=n[p];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},17118:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>g,frontMatter:()=>o,metadata:()=>p,toc:()=>m});var i=n(87462),a=n(63366),r=(n(67294),n(3905)),s=["components"],o={title:"Multi-level architecture"},c=void 0,p={unversionedId:"MultiLevelArchitecture",id:"MultiLevelArchitecture",title:"Multi-level architecture",description:"[//]: # (startConcept|multi_level)",source:"@site/../docs/MultiLevelArchitecture.md",sourceDirName:".",slug:"/MultiLevelArchitecture",permalink:"/wiki/next/MultiLevelArchitecture",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/MultiLevelArchitecture/_edit",tags:[],version:"current",frontMatter:{title:"Multi-level architecture"},sidebar:"side",previous:{title:"Mirror species",permalink:"/wiki/next/MirrorSpecies"},next:{title:"Defining GUI Experiment",permalink:"/wiki/next/DefiningGUIExperiment"}},l={},m=[{value:"Index",id:"index",level:2},{value:"Declaration of micro-species",id:"declaration-of-micro-species",level:2},{value:"Access to micro-agents, host agent",id:"access-to-micro-agents-host-agent",level:2},{value:"Representation of an entity as different types of agent",id:"representation-of-an-entity-as-different-types-of-agent",level:2},{value:"Dynamic migration of agents",id:"dynamic-migration-of-agents",level:2},{value:"Example:",id:"example",level:2}],u={toc:m};function g(e){var t=e.components,o=(0,a.Z)(e,s);return(0,r.kt)("wrapper",(0,i.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The multi-level architecture offers the modeler the following possibilities: the declaration of a species as a micro-species of another species, the representation of an entity as different types of agent (i.e., GAML species), the dynamic migration of agents between populations."),(0,r.kt)("h2",{id:"index"},"Index"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#declaration-of-micro-species"},"Declaration of micro-species")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#access-to-micro-agents-host-agent"},"Access to micro-agents / host agent")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#representation-of-an-entity-as-different-types-of-agent"},"Representation of an entity as different types of agent")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#dynamic-migration-of-agents"},"Dynamic migration of agents")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#example"},"Example"))),(0,r.kt)("h2",{id:"declaration-of-micro-species"},"Declaration of micro-species"),(0,r.kt)("p",null,"A species can have other species as ",(0,r.kt)("strong",{parentName:"p"},"micro-species"),". The micro-species of a species is declared inside the species' declaration."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"species macro_species {\n      species micro_species_in_group {\n      }\n}\n")),(0,r.kt)("p",null,"In the above example, ",(0,r.kt)("inlineCode",{parentName:"p"},"micro_species_in_group")," is a micro-species of ",(0,r.kt)("inlineCode",{parentName:"p"},"macro_species"),". An agent of ",(0,r.kt)("inlineCode",{parentName:"p"},"macro_species")," can have agents ",(0,r.kt)("inlineCode",{parentName:"p"},"micro_species_in_group")," as micro-agents. Agents of ",(0,r.kt)("inlineCode",{parentName:"p"},"micro_species_in_group")," have an agent of ",(0,r.kt)("inlineCode",{parentName:"p"},"macro_species")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"host")," agent."),(0,r.kt)("p",null,"As the species ",(0,r.kt)("inlineCode",{parentName:"p"},"micro_species_in_group")," is declared inside the species ",(0,r.kt)("inlineCode",{parentName:"p"},"macro_species"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"micro_species_in_group")," will return a list of ",(0,r.kt)("inlineCode",{parentName:"p"},"micro_species_in_group")," agent inside the given ",(0,r.kt)("inlineCode",{parentName:"p"},"macro_species")," agent."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'global {\n    init {\n    create macro_species number:5;\n    }\n}\n\nspecies macro_species  {    \n    init {\n    create micro_species_in_group number: rnd(10);\n    write "the macro species agent named "+name+" contains "+length(micro_species_in_group)+" agents of micro-species.";\n    }\n\n    species micro_species_in_group { }\n}\n\nexperiment my_experiment type: gui { }\n')),(0,r.kt)("p",null,"In the above example, we create 5 macro-species agents, and each one creates a random number of inner micro-species agents. We can see that ",(0,r.kt)("inlineCode",{parentName:"p"},"micro_species_in_group")," refers to the list of micro-species agents inside the given macro-species agent."),(0,r.kt)("h2",{id:"access-to-micro-agents-host-agent"},"Access to micro-agents, host agent"),(0,r.kt)("p",null,"To access micro-agents (from a macro-agent), and to host agent (from a micro-agents), you have to use two built-in attributes."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"members")," built-in attribute is used inside the macro-agent, to get the list of all its micro-agents."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'species macro_species  {\n    init {\n    create first_micro_species number: 3;\n    create second_micro_species number: 6;\n    write "the macro-agent named "+name+" contains "+length(members)+" micro-agents.";\n    }\n    \n    species first_micro_species { }\n    \n    species second_micro_species { }\n}\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"host")," built-in attribute is used inside a micro-agent to get its host macro-agent."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'species macro_species {\n    \n    micro_species_in_group micro_agent;\n    \n    init {\n    create micro_species_in_group number: rnd(10);\n    write "the macro-agent named "+name+" contains "+length(members)+" micro-agents.";\n    }\n    \n    species micro_species_in_group {\n        init {\n            write "the micro-agent named "+name+" is hosted by "+host;\n        }\n    }\n}\n')),(0,r.kt)("p",null,"NB: We already said that the ",(0,r.kt)("inlineCode",{parentName:"p"},"world")," agent is a particular agent, instantiated just once. In fact, the world agent is the host of all the agents. You can try to get the host for a regular species agent, you will get the ",(0,r.kt)("inlineCode",{parentName:"p"},"world")," agent itself (named as you named your model). You can also try to get the members of your ",(0,r.kt)("inlineCode",{parentName:"p"},"world")," (from the global scope for example), and you will get the list of the agents presents in the world."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'global {\n    init {\n    create macro_species number:5;\n    write "the world has "+length(members)+" members.";\n    }\n}\n\nspecies macro_species  {    \n    init {\n    write "the macro agent named "+name+" is hosted by "+host;\n    }\n}\n')),(0,r.kt)("h2",{id:"representation-of-an-entity-as-different-types-of-agent"},"Representation of an entity as different types of agent"),(0,r.kt)("p",null,'The multi-level architecture is often used in order to represent an entity through different types of agent. For example, an agent "bee" can have a behavior when it is alone, but when the agent is near from a lot of agents, he can changes his type to "bee_in_swarm", defined as a micro-species agent of a macro-species "swarm" agent. Another example: an agent "pedestrian" can have a certain behavior when walking on the street, and then change his type to "pedestrian_in_building" when he is in a macro-agent "building".'),(0,r.kt)("p",null,"You have then to distinguish two different species to define your micro-species:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'The first can be seen as a regular species (it is the "bee" or the "pedestrian" for instance). We will name this species as "micro_species".'),(0,r.kt)("li",{parentName:"ul"},'The second is the real micro-species, defined inside the macro-species (it is the "bee_in_swarm" or the "pedestrian_in_building" for instance). We will name this species as "micro_species_in_group". This species has to inherit from the "micro_species" in order to allow migrations between ',(0,r.kt)("inlineCode",{parentName:"li"},"micro_species_in_group")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"micro_species"),". ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"species micro_species { }\n\nspecies macro_species  {    \n    species micro_species_in_group parent: micro_species { }\n}\n")),(0,r.kt)("h2",{id:"dynamic-migration-of-agents"},"Dynamic migration of agents"),(0,r.kt)("p",null,'In our example about bees, a "swarm" entity is composed of nearby flying "bee" entities. When a "bee" entity approaches a "swarm" entity, this "bee" entity will become a member of the group. To represent this, the modeler lets the "bee" agent change its species to "bee_in_swarm" species. The "bee" agent hence becomes a "bee_in_swarm" agent. To change species of an agent, we can use one of the following statements: ',(0,r.kt)("inlineCode",{parentName:"p"},"capture"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"release"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"migrate"),"."),(0,r.kt)("p",null,"The statement ",(0,r.kt)("inlineCode",{parentName:"p"},"capture"),' is used by the "macro_species" to capture one (or several) "micro_species" agent(s), and turn it (them) to a "micro_species_in_group". You can specify which agent (or list of agents) you want to capture by passing them as the first argument of the statement ',(0,r.kt)("inlineCode",{parentName:"p"},"capture"),". The facet ",(0,r.kt)("inlineCode",{parentName:"p"},"as"),' is used to cast the agent(s) from "micro_species" to the species "micro_species_in_group". You can use the facet ',(0,r.kt)("inlineCode",{parentName:"p"},"returns")," to get the newly captured agent(s)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"capture agents_of_micro_species as: micro_species_in_group;\n")),(0,r.kt)("p",null,"The statement ",(0,r.kt)("inlineCode",{parentName:"p"},"release"),' is used by a "macro_species" agent to release one (or several) "micro_species_in_group" agent(s), and turn it (them) to a "micro_species". You can specify which agent (or list of agents) you want to release by giving them as the first argument of the ',(0,r.kt)("inlineCode",{parentName:"p"},"release")," statement. The facet ",(0,r.kt)("inlineCode",{parentName:"p"},"as"),' is used to cast the agents from "micro_species_in_group" species to "micro_species" species. The facet ',(0,r.kt)("inlineCode",{parentName:"p"},"in"),' is used to specify the new host (by default, it is the host of the "macro_species"). You can use the facet ',(0,r.kt)("inlineCode",{parentName:"p"},"returns")," to get the newly released agent(s)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"release agents_of_micro_species_in_group as: micro_species in: world;\n")),(0,r.kt)("p",null,"The statement ",(0,r.kt)("inlineCode",{parentName:"p"},"migrate"),", less used, permits agents to migrate from one population/species to another population/species and stay in the same host after the migration. Read the GAML Reference to learn more about this statement."),(0,r.kt)("h2",{id:"example"},"Example:"),(0,r.kt)("p",null,"Here is an example of micro_species that gather together in macro_species when they are close enough."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Illustration of the multi-level architecture: agents are merged when they are close enough.",src:n(27029).Z,width:"499",height:"499"})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"model multilevel\n\nglobal {\n    int release_time <- 20;\n    int capture_time <- 100;\n    int remaining_release_time <- 0;\n    int remaining_capture_time <- capture_time;\n    init {\n    create micro_species number:200;\n    }\n    reflex reflex_timer {\n    if (remaining_release_time=1) {\n        remaining_release_time <- 0;\n        remaining_capture_time <- capture_time;\n    } else if (remaining_capture_time=1) {\n        remaining_capture_time <- 0;\n        remaining_release_time <- release_time;\n    }\n    remaining_release_time <- remaining_release_time - 1;\n    remaining_capture_time <- remaining_capture_time - 1;\n    }\n    reflex capture_micro_species when:(remaining_capture_time>0 and flip(0.1)) {\n    ask macro_species {\n        list&lt;micro_species> micro_species_in_range <- micro_species at_distance 1;\n        if (micro_species_in_range != []) {\n        do capture_micro_species(micro_species_in_range);\n        }\n    }\n    ask micro_species {\n        list&lt;micro_species> micro_species_list_to_be_captured <- micro_species at_distance 1;\n        if(micro_species_list_to_be_captured != []) {\n        create macro_species {\n            location <- myself.location;\n            add myself to:micro_species_list_to_be_captured;\n            do capture_micro_species(micro_species_list_to_be_captured);\n        }\n        }\n    }\n    }\n}\n\nspecies micro_species skills:[moving] {\n    geometry shape <- circle(1);\n\n    reflex move{\n    do wander;\n    }\n\n    aspect base {\n    draw shape border: #black;\n    }   \n}\n\nspecies macro_species {\n    geometry shape <- circle(1) update:circle(length(members));\n    \n    species micro_species_in_group parent:micro_species { }\n\n    action capture_micro_species(list&lt;micro_species> micro_list) {\n    loop mic_sp over:micro_list {\n        capture mic_sp as:micro_species_in_group;\n    }\n    }\n    \n    reflex release_reflex when: (remaining_release_time>0 and flip(0.1)) {\n    release members as: micro_species in:world;\n    do die;\n    }\n    \n    aspect base {\n    draw shape border: #black;\n    draw string(length(members)) color:#black size:4;\n    }\n}\n\nexperiment MyExperiment type: gui {\n    output {\n    display MyDisplay type: java2D {\n        species macro_species aspect: base;\n        species micro_species aspect: base;\n    }\n    }\n}\n")))}g.isMDXComponent=!0},27029:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/multilevel_model-a634d6afb3da87f2f2176854d95b7c55.png"}}]);