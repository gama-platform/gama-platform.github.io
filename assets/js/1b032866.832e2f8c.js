"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1479],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>f});var r=a(67294);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,s=function(e,t){if(null==e)return{};var a,r,s={},n=Object.keys(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var o=r.createContext({}),p=function(e){var t=r.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=p(e.components);return r.createElement(o.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var a=e.components,s=e.mdxType,n=e.originalType,o=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=p(a),g=s,f=u["".concat(o,".").concat(g)]||u[g]||c[g]||n;return a?r.createElement(f,l(l({ref:t},m),{},{components:a})):r.createElement(f,l({ref:t},m))}));function f(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var n=a.length,l=new Array(n);l[0]=g;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[u]="string"==typeof e?e:s,l[1]=i;for(var p=2;p<n;p++)l[p]=a[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}g.displayName="MDXCreateElement"},28850:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>o,default:()=>f,frontMatter:()=>i,metadata:()=>p,toc:()=>u});var r=a(87462),s=a(63366),n=(a(67294),a(3905)),l=["components"],i={title:"Using FIPA ACL"},o=void 0,p={unversionedId:"UsingFIPAACL",id:"version-1.8.1/UsingFIPAACL",title:"Using FIPA ACL",description:"[//]: # (keyword|concept_fipa)",source:"@site/versioned_docs/version-1.8.1/UsingFIPAACL.md",sourceDirName:".",slug:"/UsingFIPAACL",permalink:"/wiki/1.8.1/UsingFIPAACL",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/UsingFIPAACL/_edit",tags:[],version:"1.8.1",frontMatter:{title:"Using FIPA ACL"},sidebar:"side",previous:{title:"Calling R",permalink:"/wiki/1.8.1/CallingR"},next:{title:"Using GAMAnalyzer",permalink:"/wiki/1.8.1/GamAnalyzer"}},m={},u=[{value:"Variables",id:"variables",level:2},{value:"Actions",id:"actions",level:3},{value:"accept_proposal",id:"accept_proposal",level:4},{value:"agree",id:"agree",level:4},{value:"cancel",id:"cancel",level:4},{value:"cfp",id:"cfp",level:4},{value:"end_conversation",id:"end_conversation",level:4},{value:"failure",id:"failure",level:4},{value:"inform",id:"inform",level:4},{value:"propose",id:"propose",level:4},{value:"query",id:"query",level:4},{value:"refuse",id:"refuse",level:4},{value:"reject_proposal",id:"reject_proposal",level:4},{value:"reply",id:"reply",level:4},{value:"request",id:"request",level:4},{value:"send",id:"send",level:4},{value:"start_conversation",id:"start_conversation",level:4},{value:"subscribe",id:"subscribe",level:4}],c={toc:u},g="wrapper";function f(e){var t=e.components,a=(0,s.Z)(e,l);return(0,n.kt)(g,(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"The communicating skill offers some actions and built-in variables which enable agents to communicate with each other using the FIPA interaction protocol. This document describes the built-in variables and actions of this skill. Examples are found in the models library bundled with GAMA."),(0,n.kt)("h2",{id:"variables"},"Variables"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"accept_proposals (list)"),": A list of 'accept_proposal' performative messages of the agent's mailbox having ."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"agrees (list)"),": A list of 'accept_proposal' performative messages."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"cancels (list)"),": A list of 'cancel' performative messages."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"cfps (list)"),": A list of 'cfp' (call for proposal) performative messages."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"conversations (list)"),": A list containing the current conversations of agent. Ended conversations are automatically removed from this list."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"failures (list)"),": A list of 'failure' performative messages."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"informs (list)"),": A list of 'inform' performative messages."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"messages (list)"),": The mailbox of the agent, a list of messages of all types of performatives."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"proposes (list)"),": A list of 'propose' performative messages ."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"queries (list)"),": A list of 'query' performative messages."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"refuses (list)"),": A list of 'propose' performative messages."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"reject_proposals (list)"),": A list of 'reject_proposals' performative messages."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"requests (list)"),": A list of 'request' performative messages."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"requestWhens (list)"),": A list of 'request-when' performative messages."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"subscribes (list)"),": A list of 'subscribe' performative messages.")),(0,n.kt)("h3",{id:"actions"},"Actions"),(0,n.kt)("h4",{id:"accept_proposal"},"accept_proposal"),(0,n.kt)("p",null,"Replies a message with an 'accept_proposal' performative message"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"returns: unknown"),(0,n.kt)("li",{parentName:"ul"},"message (message): The message to be replied"),(0,n.kt)("li",{parentName:"ul"},"content (list): The content of the replying message")),(0,n.kt)("h4",{id:"agree"},"agree"),(0,n.kt)("p",null,"Replies a message with an 'agree' performative message."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"returns: unknown"),(0,n.kt)("li",{parentName:"ul"},"message (message): The message to be replied"),(0,n.kt)("li",{parentName:"ul"},"content (list): The content of the replying message")),(0,n.kt)("h4",{id:"cancel"},"cancel"),(0,n.kt)("p",null,"Replies a message with a 'cancel' peformative message."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"returns: unknown"),(0,n.kt)("li",{parentName:"ul"},"message (message): The message to be replied"),(0,n.kt)("li",{parentName:"ul"},"content (list): The content of the replying message")),(0,n.kt)("h4",{id:"cfp"},"cfp"),(0,n.kt)("p",null,"Replies a message with a 'cfp' performative message."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"returns: unknown"),(0,n.kt)("li",{parentName:"ul"},"message (message): The message to be replied"),(0,n.kt)("li",{parentName:"ul"},"content (list): The content of the replying message")),(0,n.kt)("h4",{id:"end_conversation"},"end_conversation"),(0,n.kt)("p",null,"Replies a message with an 'end_conversation' peprformative message. This message marks the end of a conversation. In a 'no-protocol' conversation, it is the responsible of the modeler to explicitly send this message to mark the end of a conversation/interaction protocol."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"returns: unknown"),(0,n.kt)("li",{parentName:"ul"},"message (message): The message to be replied"),(0,n.kt)("li",{parentName:"ul"},"content (list): The content of the replying message")),(0,n.kt)("h4",{id:"failure"},"failure"),(0,n.kt)("p",null,"Replies a message with a 'failure' performative message."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"returns: unknown"),(0,n.kt)("li",{parentName:"ul"},"message (message): The message to be replied"),(0,n.kt)("li",{parentName:"ul"},"content (list): The content of the replying message")),(0,n.kt)("h4",{id:"inform"},"inform"),(0,n.kt)("p",null,"Replies a message with an 'inform' performative message."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"returns: unknown"),(0,n.kt)("li",{parentName:"ul"},"message (message): The message to be replied"),(0,n.kt)("li",{parentName:"ul"},"content (list): The content of the replying message")),(0,n.kt)("h4",{id:"propose"},"propose"),(0,n.kt)("p",null,"Replies a message with a 'propose' performative message."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"returns: unknown"),(0,n.kt)("li",{parentName:"ul"},"message (message): The message to be replied"),(0,n.kt)("li",{parentName:"ul"},"content (list): The content of the replying message")),(0,n.kt)("h4",{id:"query"},"query"),(0,n.kt)("p",null,"Replies a message with a 'query' performative message."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"returns: unknown"),(0,n.kt)("li",{parentName:"ul"},"message (message): The message to be replied"),(0,n.kt)("li",{parentName:"ul"},"content (list): The content of the replying message")),(0,n.kt)("h4",{id:"refuse"},"refuse"),(0,n.kt)("p",null,"Replies a message with a 'refuse' performative message."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"returns: unknown"),(0,n.kt)("li",{parentName:"ul"},"message (message): The message to be replied"),(0,n.kt)("li",{parentName:"ul"},"content (list): The content of the replying message")),(0,n.kt)("h4",{id:"reject_proposal"},"reject_proposal"),(0,n.kt)("p",null,"Replies a message with a 'reject_proposal' performative message."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"returns: unknown"),(0,n.kt)("li",{parentName:"ul"},"message (message): The message to be replied"),(0,n.kt)("li",{parentName:"ul"},"content (list): The content of the replying message")),(0,n.kt)("h4",{id:"reply"},"reply"),(0,n.kt)("p",null,"Replies a message. This action should be only used to reply a message in a 'no-protocol' conversation and with a 'user defined performative'. For performatives supported by GAMA (i.e., standard FIPA performatives), please use the 'action' with the same name of 'performative'. For example, to reply a message with a 'request' performative message, the modeller should use the 'request' action."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"returns: unknown"),(0,n.kt)("li",{parentName:"ul"},"message (message): The message to be replied"),(0,n.kt)("li",{parentName:"ul"},"performative (string): The performative of the replying message"),(0,n.kt)("li",{parentName:"ul"},"content (list): The content of the replying message")),(0,n.kt)("h4",{id:"request"},"request"),(0,n.kt)("p",null,"Replies a message with a 'request' performative message."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"returns: unknown"),(0,n.kt)("li",{parentName:"ul"},"message (message): The message to be replied"),(0,n.kt)("li",{parentName:"ul"},"content (list): The content of the replying message")),(0,n.kt)("h4",{id:"send"},"send"),(0,n.kt)("p",null,"Starts a conversation/interaction protocol."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"returns: msi.gaml.extensions.fipa.Message"),(0,n.kt)("li",{parentName:"ul"},"receivers (list): A list of receiver agents"),(0,n.kt)("li",{parentName:"ul"},"content (list): The content of the message. A list of any GAML type"),(0,n.kt)("li",{parentName:"ul"},"performative (string): A string, representing the message performative"),(0,n.kt)("li",{parentName:"ul"},"protocol (string): A string representing the name of interaction protocol")),(0,n.kt)("h4",{id:"start_conversation"},"start_conversation"),(0,n.kt)("p",null,"Starts a conversation/interaction protocol."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"returns: msi.gaml.extensions.fipa.Message"),(0,n.kt)("li",{parentName:"ul"},"receivers (list): A list of receiver agents"),(0,n.kt)("li",{parentName:"ul"},"content (list): The content of the message. A list of any GAML type"),(0,n.kt)("li",{parentName:"ul"},"performative (string): A string, representing the message performative"),(0,n.kt)("li",{parentName:"ul"},"protocol (string): A string representing the name of interaction protocol")),(0,n.kt)("h4",{id:"subscribe"},"subscribe"),(0,n.kt)("p",null,"Replies a message with a 'subscribe' performative message."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"returns: unknown"),(0,n.kt)("li",{parentName:"ul"},"message (message): The message to be replied"),(0,n.kt)("li",{parentName:"ul"},"content (list): The content of the replying message")))}f.isMDXComponent=!0}}]);