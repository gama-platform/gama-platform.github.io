"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4861],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var l=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,l,a=function(e,t){if(null==e)return{};var n,l,a={},r=Object.keys(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=l.createContext({}),s=function(e){var t=l.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return l.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},c=l.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=s(n),u=a,f=c["".concat(p,".").concat(u)]||c[u]||m[u]||r;return n?l.createElement(f,i(i({ref:t},d),{},{components:n})):l.createElement(f,i({ref:t},d))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var s=2;s<r;s++)i[s]=n[s];return l.createElement.apply(null,i)}return l.createElement.apply(null,n)}c.displayName="MDXCreateElement"},80418:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>p,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>m});var l=n(87462),a=n(63366),r=(n(67294),n(3905)),i=["components"],o={title:"1. Basic Model"},p=void 0,s={unversionedId:"ThreeD_step1",id:"version-1.8.2-RC2/ThreeD_step1",title:"1. Basic Model",description:"In this first step, we will see how to define a 3D environment and populate it.",source:"@site/versioned_docs/version-1.8.2-RC2/ThreeD_step1.md",sourceDirName:".",slug:"/ThreeD_step1",permalink:"/wiki/ThreeD_step1",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/ThreeD_step1/_edit",tags:[],version:"1.8.2-RC2",frontMatter:{title:"1. Basic Model"},sidebar:"tuto",previous:{title:"3D Tutorial",permalink:"/wiki/ThreeD"},next:{title:"2. Moving Cells",permalink:"/wiki/ThreeD_step2"}},d={},m=[{value:"Formulation",id:"formulation",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"Global Section",id:"global-section",level:3},{value:"Global variables",id:"global-variables",level:4},{value:"Model initialization",id:"model-initialization",level:4},{value:"Experiment",id:"experiment",level:3},{value:"Input",id:"input",level:4},{value:"Output",id:"output",level:4},{value:"Complete Model",id:"complete-model",level:2}],c={toc:m};function u(e){var t=e.components,o=(0,a.Z)(e,i);return(0,r.kt)("wrapper",(0,l.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In this first step, we will see how to define a 3D environment and populate it."),(0,r.kt)("h2",{id:"formulation"},"Formulation"),(0,r.kt)("p",null,"Initialize a 3D world with a population of cells placed randomly in a 3D 100x100x100 cube."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Definition of the ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"cell"))," species."),(0,r.kt)("li",{parentName:"ul"},"Definition of the ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"nb_cells"))," parameter."),(0,r.kt)("li",{parentName:"ul"},"Creation of ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"nb_cells"))," ",(0,r.kt)("strong",{parentName:"li"},"cell")," agents randomly located in the 3D environment, that is defined as a cub of dimensions: 100x100x100.")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"images/3D_model_LQ.png",src:n(22713).Z,width:"250",height:"250"})),(0,r.kt)("h2",{id:"model-definition"},"Model Definition"),(0,r.kt)("p",null,"In this model, we define one species of agent: the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"cell"))," species. The agents will be just displayed as a blue sphere of radius 1."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"species cell {                      \n    aspect default {\n        draw sphere(1) color: #blue;   \n    }\n}\n")),(0,r.kt)("h3",{id:"global-section"},"Global Section"),(0,r.kt)("h4",{id:"global-variables"},"Global variables"),(0,r.kt)("p",null,"Definition of a global variable ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"nb_cells"))," of type ",(0,r.kt)("inlineCode",{parentName:"p"},"int")," representing the number of ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"cell"))," agents."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"global {\n    int nb_cells <- 100;\n}\n")),(0,r.kt)("h4",{id:"model-initialization"},"Model initialization"),(0,r.kt)("p",null,"Definition of the ",(0,r.kt)("inlineCode",{parentName:"p"},"init")," block in order to create ",(0,r.kt)("inlineCode",{parentName:"p"},"nb_cells")," ",(0,r.kt)("inlineCode",{parentName:"p"},"cell")," agents. By default, an agent is created with a random location in x and y, and a z value equal to 0. In our case, we want to place the ",(0,r.kt)("inlineCode",{parentName:"p"},"cell")," agents randomly in the 3D environment so we set a random value for ",(0,r.kt)("inlineCode",{parentName:"p"},"x"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"y")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"z"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"create cell number: nb_cells {\n    location <- {rnd(100), rnd(100), rnd(100)};\n}\n")),(0,r.kt)("h3",{id:"experiment"},"Experiment"),(0,r.kt)("p",null,"In our model, we define a basic gui experiment called ",(0,r.kt)("em",{parentName:"p"},"Tuto3D")," :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"experiment Tuto3D type: gui {\n}\n")),(0,r.kt)("h4",{id:"input"},"Input"),(0,r.kt)("p",null,"Definition of a parameter from the global variable ",(0,r.kt)("inlineCode",{parentName:"p"},"nb_cells")," :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'experiment Tuto3D type: gui {\n    parameter "Initial number of cells: " var: nb_cells min: 1 max: 1000 category: "Cells"; \n}\n')),(0,r.kt)("h4",{id:"output"},"Output"),(0,r.kt)("p",null,"In our model, we define a display to draw the ",(0,r.kt)("inlineCode",{parentName:"p"},"cell")," agents in a 3D environment."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"output {\n    display View1 type:opengl {\n        species cell;\n    }\n}\n")),(0,r.kt)("h2",{id:"complete-model"},"Complete Model"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-gaml",metastring:"reference",reference:!0},"https://github.com/gama-platform/gama/blob/master/msi.gama.models/models/Tutorials/3D/models/Model%2001.gaml\n")))}u.isMDXComponent=!0},22713:(e,t,n)=>{n.d(t,{Z:()=>l});const l=n.p+"assets/images/3D_model_LQ-8daead6583d4ea06e25a6a9d1e3051f8.png"}}]);