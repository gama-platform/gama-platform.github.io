"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[52841],{4655:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var t=r(74848),i=r(28453);const o={title:"10. Charts"},a=void 0,s={id:"PredatorPrey_step10",title:"10. Charts",description:"This 10th step illustrates how to define charts.",source:"@site/versioned_docs/version-1.9.3/PredatorPrey_step10.md",sourceDirName:".",slug:"/PredatorPrey_step10",permalink:"/wiki/PredatorPrey_step10",draft:!1,unlisted:!1,editUrl:"https://github.com/gama-platform/gama/wiki/PredatorPrey_step10/_edit",tags:[],version:"1.9.3",frontMatter:{title:"10. Charts"},sidebar:"tuto",previous:{title:"9. Stopping condition",permalink:"/wiki/PredatorPrey_step9"},next:{title:"11. Writing Files",permalink:"/wiki/PredatorPrey_step11"}},l={},d=[{value:"Formulation",id:"formulation",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"output",id:"output",level:3},{value:"Complete Model",id:"complete-model",level:2}];function c(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"This 10th step illustrates how to define charts."}),"\n",(0,t.jsx)(n.h2,{id:"formulation",children:"Formulation"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Addition of a new display to visualize:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"One chart representing the evolution of the quantity of prey and predator agents over time."}),"\n",(0,t.jsx)(n.li,{children:"Two histograms representing the energy distribution of the prey and predator agents."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"model-definition",children:"Model Definition"}),"\n",(0,t.jsx)(n.h3,{id:"output",children:"output"}),"\n",(0,t.jsx)(n.p,{children:"GAMA can display various chart types:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Time series"}),"\n",(0,t.jsx)(n.li,{children:"Pie charts"}),"\n",(0,t.jsx)(n.li,{children:"Histograms"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"A chart must be defined in a display: it behaves exactly like any other layer."}),"\n",(0,t.jsx)(n.p,{children:"Definition of a chart:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"chart chart_name type: chart_type {\n    [data]\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The data to draw are defined inside the ",(0,t.jsx)(n.code,{children:"chart"})," block as follow, using the ",(0,t.jsx)(n.code,{children:"data"})," statement:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"data data_legend value: data_value\n"})}),"\n",(0,t.jsxs)(n.p,{children:["We add a new display called ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"Population_information"})})," that refreshes every 5 simulation steps.\nInside this display, we define 3 charts: one of type ",(0,t.jsx)(n.code,{children:"series"})," (i.e. time series chart), two of type ",(0,t.jsx)(n.code,{children:"histogram"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:'"Species evolution"; background: white; size: {1, 0.5}; position: {0, 0}'}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["data1: ",(0,t.jsx)(n.code,{children:"nb_preys"}),"; color : blue"]}),"\n",(0,t.jsxs)(n.li,{children:["data2: ",(0,t.jsx)(n.code,{children:"nb_predators"}),"; color : red"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:'"Prey Energy Distribution"; background: lightGray; size: {0.5, 0.5}; position: {0, 0.5}'}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'data "]0;0.25]": number of preys with (each.energy <= 0.25) ;'}),"\n",(0,t.jsx)(n.li,{children:'data "]0.25;0.5]": number of preys with ((each.energy > 0.25) and (each.energy <= 0.5)) ;'}),"\n",(0,t.jsx)(n.li,{children:'data "]0.5;0.75]": number of preys with ((each.energy > 0.5) and (each.energy <= 0.75)) ;'}),"\n",(0,t.jsx)(n.li,{children:'data "]0.75;1]": number of preys with  (each.energy > 0.75) ;'}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:'"Predator Energy Distribution"; background: lightGray; size: {0.5, 0.5}; position: {0.5, 0.5}'}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'data "]0;0.25]": number of predators with (each.energy <= 0.25) ;'}),"\n",(0,t.jsx)(n.li,{children:'data "]0.25;0.5]": number of predators with ((each.energy > 0.25) and (each.energy <= 0.5)) ;'}),"\n",(0,t.jsx)(n.li,{children:'data "]0.5;0.75]": number of predators with ((each.energy > 0.5) and (each.energy <= 0.75)) ;'}),"\n",(0,t.jsx)(n.li,{children:'data "]0.75;1]": number of predators with  (each.energy > 0.75) ;'}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["To evaluate the value of the data of the two histogram, we use the operator ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"list count condition"})})," that returns the number of elements of ",(0,t.jsx)(n.code,{children:"list"})," for which the condition is true."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'display Population_information refresh:every(5#cycles) {\n    chart "Species evolution" type: series size: {1,0.5} position: {0, 0} {\n\tdata "number_of_preys" value: nb_preys color: #blue ;\n\tdata "number_of_predator" value: nb_predators color: #red ;\n    }\n    chart "Prey Energy Distribution" type: histogram background: #lightgray size: {0.5,0.5} position: {0, 0.5} {\n\tdata "]0;0.25]" value: prey count (each.energy <= 0.25) color:#blue;\n\tdata "]0.25;0.5]" value: prey count ((each.energy > 0.25) and (each.energy <= 0.5)) color:#blue;\n\tdata "]0.5;0.75]" value: prey count ((each.energy > 0.5) and (each.energy <= 0.75)) color:#blue;\n\tdata "]0.75;1]" value: prey count (each.energy > 0.75) color:#blue;\n    }\n    chart "Predator Energy Distribution" type: histogram background: #lightgray size: {0.5,0.5} position: {0.5, 0.5} {\n\tdata "]0;0.25]" value: predator count (each.energy <= 0.25) color: #red ;\n\tdata "]0.25;0.5]" value: predator count ((each.energy > 0.25) and (each.energy <= 0.5)) color: #red ;\n\tdata "]0.5;0.75]" value: predator count ((each.energy > 0.5) and (each.energy <= 0.75)) color: #red ;\n\tdata "]0.75;1]" value: predator count (each.energy > 0.75) color: #red;\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"complete-model",children:"Complete Model"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-gaml",metastring:"reference",children:"https://github.com/gama-platform/gama.old/blob/GAMA_1.9.3/msi.gama.models/models/Tutorials/Predator%20Prey/models/Model%2010.gaml\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>s});var t=r(96540);const i={},o=t.createContext(i);function a(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);