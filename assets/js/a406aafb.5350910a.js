"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[13888],{37635:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>o,contentTitle:()=>c,default:()=>m,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var s=n(74848),t=n(28453);const r={title:"Multi-level architecture"},c=void 0,a={id:"MultiLevelArchitecture",title:"Multi-level architecture",description:"[//]: # (startConcept|multi_level)",source:"@site/versioned_docs/version-1.8.2-RC2/MultiLevelArchitecture.md",sourceDirName:".",slug:"/MultiLevelArchitecture",permalink:"/wiki/1.8.2-RC2/MultiLevelArchitecture",draft:!1,unlisted:!1,editUrl:"https://github.com/gama-platform/gama/wiki/MultiLevelArchitecture/_edit",tags:[],version:"1.8.2-RC2",frontMatter:{title:"Multi-level architecture"},sidebar:"main",previous:{title:"Mirror species",permalink:"/wiki/1.8.2-RC2/MirrorSpecies"},next:{title:"Defining GUI Experiment",permalink:"/wiki/1.8.2-RC2/DefiningGUIExperiment"}},o={},l=[{value:"Index",id:"index",level:2},{value:"Declaration of micro-species",id:"declaration-of-micro-species",level:2},{value:"Access to micro-agents, host agent",id:"access-to-micro-agents-host-agent",level:2},{value:"Representation of an entity as different types of agent",id:"representation-of-an-entity-as-different-types-of-agent",level:2},{value:"Dynamic migration of agents",id:"dynamic-migration-of-agents",level:2},{value:"Example:",id:"example",level:2}];function p(e){const i={a:"a",code:"code",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.p,{children:"The multi-level architecture offers the modeler the following possibilities: the declaration of a species as a micro-species of another species, the representation of an entity as different types of agent (i.e., GAML species), the dynamic migration of agents between populations."}),"\n",(0,s.jsx)(i.h2,{id:"index",children:"Index"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.a,{href:"#declaration-of-micro-species",children:"Declaration of micro-species"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.a,{href:"#access-to-micro-agents-host-agent",children:"Access to micro-agents / host agent"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.a,{href:"#representation-of-an-entity-as-different-types-of-agent",children:"Representation of an entity as different types of agent"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.a,{href:"#dynamic-migration-of-agents",children:"Dynamic migration of agents"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.a,{href:"#example",children:"Example"})}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"declaration-of-micro-species",children:"Declaration of micro-species"}),"\n",(0,s.jsxs)(i.p,{children:["A species can have other species as ",(0,s.jsx)(i.strong,{children:"micro-species"}),". The micro-species of a species is declared inside the species' declaration."]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{children:"species macro_species {\n      species micro_species_in_group {\n      }\n}\n"})}),"\n",(0,s.jsxs)(i.p,{children:["In the above example, ",(0,s.jsx)(i.code,{children:"micro_species_in_group"})," is a micro-species of ",(0,s.jsx)(i.code,{children:"macro_species"}),". An agent of ",(0,s.jsx)(i.code,{children:"macro_species"})," can have agents ",(0,s.jsx)(i.code,{children:"micro_species_in_group"})," as micro-agents. Agents of ",(0,s.jsx)(i.code,{children:"micro_species_in_group"})," have an agent of ",(0,s.jsx)(i.code,{children:"macro_species"})," as ",(0,s.jsx)(i.code,{children:"host"})," agent."]}),"\n",(0,s.jsxs)(i.p,{children:["As the species ",(0,s.jsx)(i.code,{children:"micro_species_in_group"})," is declared inside the species ",(0,s.jsx)(i.code,{children:"macro_species"}),", ",(0,s.jsx)(i.code,{children:"micro_species_in_group"})," will return a list of ",(0,s.jsx)(i.code,{children:"micro_species_in_group"})," agent inside the given ",(0,s.jsx)(i.code,{children:"macro_species"})," agent."]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{children:'global {\n    init {\n\tcreate macro_species number:5;\n    }\n}\n\nspecies macro_species  {\t\n    init {\n\tcreate micro_species_in_group number: rnd(10);\n\twrite "the macro species agent named "+name+" contains "+length(micro_species_in_group)+" agents of micro-species.";\n    }\n\n    species micro_species_in_group { }\n}\n\nexperiment my_experiment type: gui { }\n'})}),"\n",(0,s.jsxs)(i.p,{children:["In the above example, we create 5 macro-species agents, and each one creates a random number of inner micro-species agents. We can see that ",(0,s.jsx)(i.code,{children:"micro_species_in_group"})," refers to the list of micro-species agents inside the given macro-species agent."]}),"\n",(0,s.jsx)(i.h2,{id:"access-to-micro-agents-host-agent",children:"Access to micro-agents, host agent"}),"\n",(0,s.jsx)(i.p,{children:"To access micro-agents (from a macro-agent), and to host agent (from a micro-agents), you have to use two built-in attributes."}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"members"})," built-in attribute is used inside the macro-agent, to get the list of all its micro-agents."]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{children:'species macro_species  {\n    init {\n\tcreate first_micro_species number: 3;\n\tcreate second_micro_species number: 6;\n\twrite "the macro-agent named "+name+" contains "+length(members)+" micro-agents.";\n    }\n\t\n    species first_micro_species { }\n    \n    species second_micro_species { }\n}\n'})}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"host"})," built-in attribute is used inside a micro-agent to get its host macro-agent."]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{children:'species macro_species {\n\t\n    micro_species_in_group micro_agent;\n\t\n    init {\n\tcreate micro_species_in_group number: rnd(10);\n\twrite "the macro-agent named "+name+" contains "+length(members)+" micro-agents.";\n    }\n\t\n    species micro_species_in_group {\n    \tinit {\n    \t    write "the micro-agent named "+name+" is hosted by "+host;\n    \t}\n    }\n}\n'})}),"\n",(0,s.jsxs)(i.p,{children:["NB: We already said that the ",(0,s.jsx)(i.code,{children:"world"})," agent is a particular agent, instantiated just once. In fact, the world agent is the host of all the agents. You can try to get the host for a regular species agent, you will get the ",(0,s.jsx)(i.code,{children:"world"})," agent itself (named as you named your model). You can also try to get the members of your ",(0,s.jsx)(i.code,{children:"world"})," (from the global scope for example), and you will get the list of the agents presents in the world."]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{children:'global {\n    init {\n\tcreate macro_species number:5;\n\twrite "the world has "+length(members)+" members.";\n    }\n}\n\nspecies macro_species  {\t\n    init {\n\twrite "the macro agent named "+name+" is hosted by "+host;\n    }\n}\n'})}),"\n",(0,s.jsx)(i.h2,{id:"representation-of-an-entity-as-different-types-of-agent",children:"Representation of an entity as different types of agent"}),"\n",(0,s.jsx)(i.p,{children:'The multi-level architecture is often used in order to represent an entity through different types of agent. For example, an agent "bee" can have a behavior when it is alone, but when the agent is near from a lot of agents, he can changes his type to "bee_in_swarm", defined as a micro-species agent of a macro-species "swarm" agent. Another example: an agent "pedestrian" can have a certain behavior when walking on the street, and then change his type to "pedestrian_in_building" when he is in a macro-agent "building".'}),"\n",(0,s.jsx)(i.p,{children:"You have then to distinguish two different species to define your micro-species:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:'The first can be seen as a regular species (it is the "bee" or the "pedestrian" for instance). We will name this species as "micro_species".'}),"\n",(0,s.jsxs)(i.li,{children:['The second is the real micro-species, defined inside the macro-species (it is the "bee_in_swarm" or the "pedestrian_in_building" for instance). We will name this species as "micro_species_in_group". This species has to inherit from the "micro_species" in order to allow migrations between ',(0,s.jsx)(i.code,{children:"micro_species_in_group"})," and ",(0,s.jsx)(i.code,{children:"micro_species"}),"."]}),"\n"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{children:"species micro_species { }\n\nspecies macro_species  {\t\n    species micro_species_in_group parent: micro_species { }\n}\n"})}),"\n",(0,s.jsx)(i.h2,{id:"dynamic-migration-of-agents",children:"Dynamic migration of agents"}),"\n",(0,s.jsxs)(i.p,{children:['In our example about bees, a "swarm" entity is composed of nearby flying "bee" entities. When a "bee" entity approaches a "swarm" entity, this "bee" entity will become a member of the group. To represent this, the modeler lets the "bee" agent change its species to "bee_in_swarm" species. The "bee" agent hence becomes a "bee_in_swarm" agent. To change species of an agent, we can use one of the following statements: ',(0,s.jsx)(i.code,{children:"capture"}),", ",(0,s.jsx)(i.code,{children:"release"}),", ",(0,s.jsx)(i.code,{children:"migrate"}),"."]}),"\n",(0,s.jsxs)(i.p,{children:["The statement ",(0,s.jsx)(i.code,{children:"capture"}),' is used by the "macro_species" to capture one (or several) "micro_species" agent(s), and turn it (them) to a "micro_species_in_group". You can specify which agent (or list of agents) you want to capture by passing them as the first argument of the statement ',(0,s.jsx)(i.code,{children:"capture"}),". The facet ",(0,s.jsx)(i.code,{children:"as"}),' is used to cast the agent(s) from "micro_species" to the species "micro_species_in_group". You can use the facet ',(0,s.jsx)(i.code,{children:"returns"})," to get the newly captured agent(s)."]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{children:"capture agents_of_micro_species as: micro_species_in_group;\n"})}),"\n",(0,s.jsxs)(i.p,{children:["The statement ",(0,s.jsx)(i.code,{children:"release"}),' is used by a "macro_species" agent to release one (or several) "micro_species_in_group" agent(s), and turn it (them) to a "micro_species". You can specify which agent (or list of agents) you want to release by giving them as the first argument of the ',(0,s.jsx)(i.code,{children:"release"})," statement. The facet ",(0,s.jsx)(i.code,{children:"as"}),' is used to cast the agents from "micro_species_in_group" species to "micro_species" species. The facet ',(0,s.jsx)(i.code,{children:"in"}),' is used to specify the new host (by default, it is the host of the "macro_species"). You can use the facet ',(0,s.jsx)(i.code,{children:"returns"})," to get the newly released agent(s)."]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{children:"release agents_of_micro_species_in_group as: micro_species in: world;\n"})}),"\n",(0,s.jsxs)(i.p,{children:["The statement ",(0,s.jsx)(i.code,{children:"migrate"}),", less used, permits agents to migrate from one population/species to another population/species and stay in the same host after the migration. Read the GAML Reference to learn more about this statement."]}),"\n",(0,s.jsx)(i.h2,{id:"example",children:"Example:"}),"\n",(0,s.jsx)(i.p,{children:"Here is an example of micro_species that gather together in macro_species when they are close enough."}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.img,{alt:"Illustration of the multi-level architecture: agents are merged when they are close enough.",src:n(93082).A+"",width:"499",height:"499"})}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{children:"model multilevel\n\nglobal {\n    int release_time <- 20;\n    int capture_time <- 100;\n    int remaining_release_time <- 0;\n    int remaining_capture_time <- capture_time;\n    init {\n\tcreate micro_species number:200;\n    }\n    reflex reflex_timer {\n\tif (remaining_release_time=1) {\n\t    remaining_release_time <- 0;\n\t    remaining_capture_time <- capture_time;\n\t} else if (remaining_capture_time=1) {\n\t    remaining_capture_time <- 0;\n\t    remaining_release_time <- release_time;\n\t}\n\tremaining_release_time <- remaining_release_time - 1;\n\tremaining_capture_time <- remaining_capture_time - 1;\n    }\n    reflex capture_micro_species when:(remaining_capture_time>0 and flip(0.1)) {\n\task macro_species {\n\t    list<micro_species> micro_species_in_range <- micro_species at_distance 1;\n\t    if (micro_species_in_range != []) {\n\t\tdo capture_micro_species(micro_species_in_range);\n\t    }\n\t}\n\task micro_species {\n\t    list<micro_species> micro_species_list_to_be_captured <- micro_species at_distance 1;\n\t    if(micro_species_list_to_be_captured != []) {\n\t\tcreate macro_species {\n\t\t    location <- myself.location;\n\t\t    add myself to:micro_species_list_to_be_captured;\n\t\t    do capture_micro_species(micro_species_list_to_be_captured);\n\t\t}\n\t    }\n\t}\n    }\n}\n\nspecies micro_species skills:[moving] {\n    geometry shape <- circle(1);\n\n    reflex move{\n\tdo wander;\n    }\n\n    aspect base {\n\tdraw shape border: #black;\n    }\t\n}\n\nspecies macro_species {\n    geometry shape <- circle(1) update:circle(length(members));\n\t\n    species micro_species_in_group parent:micro_species { }\n\n    action capture_micro_species(list<micro_species> micro_list) {\n\tloop mic_sp over:micro_list {\n\t    capture mic_sp as:micro_species_in_group;\n\t}\n    }\n\t\n    reflex release_reflex when: (remaining_release_time>0 and flip(0.1)) {\n\trelease members as: micro_species in:world;\n\tdo die;\n    }\n\t\n    aspect base {\n\tdraw shape border: #black;\n\tdraw string(length(members)) color:#black size:4;\n    }\n}\n\nexperiment MyExperiment type: gui {\n    output {\n\tdisplay MyDisplay type: java2D {\n\t    species macro_species aspect: base;\n\t    species micro_species aspect: base;\n\t}\n    }\n}\n"})})]})}function m(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},93082:(e,i,n)=>{n.d(i,{A:()=>s});const s=n.p+"assets/images/multilevel_model-a634d6afb3da87f2f2176854d95b7c55.png"},28453:(e,i,n)=>{n.d(i,{R:()=>c,x:()=>a});var s=n(96540);const t={},r=s.createContext(t);function c(e){const i=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),s.createElement(r.Provider,{value:i},e.children)}}}]);