"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[49464],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>h});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),l=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},m=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,p=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),d=l(r),c=n,h=d["".concat(p,".").concat(c)]||d[c]||u[c]||o;return r?a.createElement(h,i(i({ref:t},m),{},{components:r})):a.createElement(h,i({ref:t},m))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=c;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[d]="string"==typeof e?e:n,i[1]=s;for(var l=2;l<o;l++)i[l]=r[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}c.displayName="MDXCreateElement"},78602:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>m,contentTitle:()=>p,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var a=r(87462),n=r(63366),o=(r(67294),r(3905)),i=["components"],s={"^title":"ODE LotkaVolterra"},p=void 0,l={unversionedId:"ODE_LotkaVolterra",id:"ODE_LotkaVolterra",title:"ODE_LotkaVolterra",description:"Path: Library models/Toy Models/Predator Prey/Lotka-Volterra (Influence of Integration Step).gaml",source:"@site/../docs/ODE_LotkaVolterra.md",sourceDirName:".",slug:"/ODE_LotkaVolterra",permalink:"/wiki/next/ODE_LotkaVolterra",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/ODE_LotkaVolterra/_edit",tags:[],version:"current",frontMatter:{"^title":"ODE LotkaVolterra"}},m={},d=[],u={toc:d},c="wrapper";function h(e){var t=e.components,r=(0,n.Z)(e,i);return(0,o.kt)(c,(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("img",{width:"960",alt:"Annotation 2023-04-16 043606_LotkaVolterraInfInteg",src:"https://user-images.githubusercontent.com/4437331/232263366-e863f598-9ede-4ac9-a66b-8368458598cf.png"}),(0,o.kt)("p",null,"Path: Library models/Toy Models/Predator Prey/Lotka-Volterra (Influence of Integration Step).gaml"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'\n/**\n* Name: ODE_LotkaVolterra\n* Author: Huynh Quang Nghi & Nathalie Corson\n*  Description: Lotka Volterra Predator Prey Model - ODE solved with Runge-Kutta 4 method with different integration time step\n* Tags: equation, math\n*/\n\nmodel ODE_LotkaVolterra_InfluenceTimeStep\n\nglobal {\n\n    float prey_birth_rate ;         // natural birth rate of preys\n    float predation_rate ;          // death rate of preys due to predators\n    float predator_death_rate ;     // natural death rate of predators\n    float predation_efficiency ;    // birth rate of predators due to prey consumption\n    \n    float nb_prey_init ;            // initial number of preys\n    float nb_predator_init  ;       // initial number of predators\n    \n    float integration_step ;    // integration time step of the Runge Kutta 4 method\n    float t;                    // simulation time : t = n * integration_time_step  where n is the number of already computed time step\n    \n    \n    float integration_time_step1  <- 1.0;  // first integration time step to compare \n    float integration_time_step2  <- 0.1;  // second integration time step to compare \n    float integration_time_step3  <- 0.01;  // third integration time step to compare \n    \n    list<LotkaVolterra_agent> LV_agents;\n    \n    init{\n        create LotkaVolterra_agent number: 1 with:[integration_time_step::integration_time_step1];  // creation of an agent containing the ODE model with an integration time step of value integration_time_step1\n        create LotkaVolterra_agent number: 1 with:[integration_time_step::integration_time_step2];  // creation of an agent containing the ODE model with an integration time step of value integration_time_step2\n        create LotkaVolterra_agent number: 1 with:[integration_time_step::integration_time_step3];  // creation of an agent containing the ODE model with an integration time step of value integration_time_step3\n        LV_agents <- list(LotkaVolterra_agent);\n    }\n}\n\nspecies LotkaVolterra_agent {\n    \n    float nb_prey <- nb_prey_init ;                 // number of preys initialized with the values given by the user\n    float nb_predator <- nb_predator_init ;         // number of predators initialized with the values given by the user\n    \n    float integration_time_step ;                   // integration time step used in the Runge Kutta 4 method\n  \n    equation lotka_volterra { \n        diff(nb_prey,t) =   nb_prey * (prey_birth_rate - predation_rate * nb_predator);                     // evolution of the number of preys duting an integration time step\n        diff(nb_predator,t) = - nb_predator * (predator_death_rate - predation_efficiency * nb_prey);       // evolution of the number of predator during an integration time step\n      }\n      reflex solving {        \n        solve lotka_volterra method: "rk4" step_size:integration_time_step;                                 // use of runge kutta 4 method with an integration time step of value integration_time_step\n       }\n}\n\n\nexperiment maths type: gui {\n        \n    parameter "Prey birth rate" var: prey_birth_rate <- 0.05 min: 0.0 max: 1.0 category: "Prey";                        // the user defines the value of parameter prey_birth_rate on the interface, the default value is 0.05 and this value must be between 0 and 1\n    parameter "Predation rate" var: predation_rate <- 0.001 min: 0.0 max: 1.0 category: "Prey";                         // the user defines the value of parameter prey_birth_rate on the interface, the default value is 0.001 and this value must be between 0 and 1\n    parameter "Predator death rate" var: predator_death_rate <- 0.03 min: 0.0 max: 1.0 category: "Predator";            // the user defines the value of parameter predator_death_rate on the interface, the default value is 0.03 and this value must be between 0 and 1\n    parameter "Predation efficiency" var: predation_efficiency <- 0.0002 min: 0.0 max: 1.0 category: "Predator";        // the user defines the value of parameter predation_efficiency on the interface, the default value is 0.0002 and this value must be between 0 and 1\n    \n    parameter "Initial number of prey" var: nb_prey_init <- 250.0 min: 1.0 category: "Prey";                            // the user defines the value of parameter predation_efficiency on the interface, the default value is 250, the minimum possible value is 1\n    parameter "Initial number of predator" var: nb_predator_init <- 45.0 min: 1.0 category: "Predator";                 // the user defines the value of parameter predation_efficiency on the interface, the default value is 45, the minimum possible value is 1\n    \n    parameter "Integration time step of the first chart " var:  integration_time_step1 <- 1.0  min: 0.0 max:1.0 category: "Integration time steps";     // the user defines the value of the first integration step he wants to compare, the default value is 1 and this value must be between 0 and 1\n    parameter "Integration time step of the second chart " var:  integration_time_step2 <- 0.1  min: 0.0 max: 1.0 category: "Integration time steps";   // the user defines the value of the second integration step he wants to compare, the default value is 0.1 and this value must be between 0 and 1\n    parameter "Integration time step of the third chart " var:  integration_time_step3 <- 0.01  min: 0.0 max: 1.0 category: "Integration time steps";   // the user defines the value of the third integration step he wants to compare, the default value is 0.01 and this value must be between 0 and 1\n        \n    output {        \n        display TimeSeries  type: 2d  { // creation of a display to show time series of the model, values are plotted at every step. Since there is more than one chart plotted in one display, every chart has a position and a size\n            chart "Lotka Volterra Time Series - Integration time step = 1 " type: series background: #white position: {0,0} size:{1,0.33} x_range: 1000 {       // one chart, of type \'serie\', is named Lotka Volterra Time Series - Integration time step = 1, it shows quantities according to time, and the background is white\n                data \'Number of preys\' value: first(LotkaVolterra_agent where (each.integration_time_step = 1.0)).nb_prey color: #green ;           // number of preys in the case where the integration time step is 1 is plotted in green     \n                data \'Number of predators\' value: first(LotkaVolterra_agent where (each.integration_time_step = 1.0)).nb_predator color: #red ;     // number of predators in the case where the integration time step is 1 is plotted in red   \n            }\n            chart "Lotka Volterra Time Series - Integration time step = 0.1 " type: series background: #white position: {0,0.33} size:{1,0.33} x_range: 1000{\n                data \'Number of preys\' value: first(LotkaVolterra_agent where (each.integration_time_step = 0.1)).nb_prey color: #green ;               \n                data \'Number of predators\' value: first(LotkaVolterra_agent where (each.integration_time_step = 0.1)).nb_predator color: #red ;\n            }\n            chart "Lotka Volterra Time Series - Integration time step = 0.01 " type: series background: #white position: {0,0.66} size:{1,0.33}x_range: 1000{\n                data \'Number of preys\' value: first(LotkaVolterra_agent where (each.integration_time_step = 0.01)).nb_prey color: #green ;              \n                data \'Number of predators\' value: first(LotkaVolterra_agent where (each.integration_time_step = 0.01)).nb_predator color: #red ;\n            }\n        }\n        display PhasePortrait  type: 2d {           \n            chart "Lotka Volterra Phase Portrait - Integration time step = 1" type: xy background: #white position: {0,0} size:{1,0.33} {       // creation of a display to show phase portrait of the model, values are plotted at every step. Since there is more than one chart plotted in one display, every chart has a position and a size\n            data \'Number of preys according to number of predators\' value:{LV_agents[0].nb_prey, LV_agents[0].nb_predator} color: #black ;  // number of predators are plotted in black according to the number of preys in the case where the integration time step is 1       \n            }\n            chart "Lotka Volterra Phase Portrait - Integration time step = 0.1" type: xy background: #white position: {0,0.33} size:{1,0.33}{\n            data \'Number of preys according to number of predators\' value:{LV_agents[1].nb_prey, LV_agents[1].nb_predator} color: #black ;              \n            }\n            chart "Lotka Volterra Phase Portrait - Integration time step = 0.01" type: xy background: #white position: {0,0.66} size:{1,0.33} {\n            data \'Number of preys according to number of predators\' value:{LV_agents[1].nb_prey, LV_agents[1].nb_predator} color: #black ;              \n            }\n        }\n    }\n}\n\n')))}h.isMDXComponent=!0}}]);