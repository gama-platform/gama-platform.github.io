"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[24615],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(n),d=i,h=m["".concat(p,".").concat(d)]||m[d]||u[d]||r;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},30855:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>m});var a=n(87462),i=n(63366),r=(n(67294),n(3905)),o=["components"],l={title:"Defining Batch Experiments"},p=void 0,s={unversionedId:"BatchExperiments",id:"version-1.8.1/BatchExperiments",title:"Defining Batch Experiments",description:"Batch experiments allow to execute numerous successive simulation runs. They are used to explore the parameter space of a model or to optimize a set of model parameters. Exploration methods are detailed in this page.",source:"@site/versioned_docs/version-1.8.1/BatchExperiments.md",sourceDirName:".",slug:"/BatchExperiments",permalink:"/wiki/1.8.1/BatchExperiments",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/BatchExperiments/_edit",tags:[],version:"1.8.1",frontMatter:{title:"Defining Batch Experiments"},sidebar:"side",previous:{title:"Run Several Simulations",permalink:"/wiki/1.8.1/RunSeveralSimulations"},next:{title:"Exploration Methods",permalink:"/wiki/1.8.1/ExplorationMethods"}},c={},m=[{value:"Table of contents",id:"table-of-contents",level:2},{value:"The batch experiment facets",id:"the-batch-experiment-facets",level:2},{value:"Action <code>_step_</code> and reflexes",id:"action-_step_-and-reflexes",level:2},{value:"Permanent",id:"permanent",level:2}],u={toc:m};function d(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Batch experiments allow to execute numerous successive simulation runs. They are used to explore the parameter space of a model or to optimize a set of model parameters. ",(0,r.kt)("a",{parentName:"p",href:"ExplorationMethods"},"Exploration methods are detailed in this page.")),(0,r.kt)("p",null,"A Batch experiment is defined by:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"experiment exp_title type: batch until: condition {\n   [parameter to explore]\n   [exploration method]\n   [reflex]\n   [permanent]\n}\n")),(0,r.kt)("h2",{id:"table-of-contents"},"Table of contents"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#the-batch-experiment-facets"},"The batch experiment facets")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#action-_step_-and-reflexes"},"Action ",(0,r.kt)("inlineCode",{parentName:"a"},"_step_")," and reflexes")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#permanent"},"Permanent"))),(0,r.kt)("h2",{id:"the-batch-experiment-facets"},"The batch experiment facets"),(0,r.kt)("p",null,"Batch experiments have the following three facets:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"until"),": (expression) Specifies when to stop each simulation. Its value is a condition on variables defined in the model. The run will stop when the condition is evaluated to true. If omitted, the first simulation run will go forever, preventing any subsequent run to take place (unless a halt command is used in the model itself)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"repeat"),": (integer) A parameter configuration corresponds to a set of values assigned to each parameter. The attribute repeat specifies the number of times each configuration will be repeated, meaning that as many simulations will be run with the same parameter values. Different random seeds are given to the pseudo-random number generator. This allows to get some statistical power from the experiments conducted. The default value is 1."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"keep_seed"),": (boolean) If true, the same series of random seeds will be used from one parameter configuration to another. The default value is false.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"experiment my_batch_experiment type: batch repeat: 5 keep_seed: true until: (cycle = 300) {\n   [parameter to explore]\n   [exploration method]\n}\n")),(0,r.kt)("h2",{id:"action-_step_-and-reflexes"},"Action ",(0,r.kt)("inlineCode",{parentName:"h2"},"_step_")," and reflexes"),(0,r.kt)("p",null,"As for any species, ",(0,r.kt)("inlineCode",{parentName:"p"},"experiment")," can define as many ",(0,r.kt)("inlineCode",{parentName:"p"},"reflex")," as needed. In a ",(0,r.kt)("inlineCode",{parentName:"p"},"batch")," experiment, they will be executed at the end of each bunch of simulations (set of replications) for a given parameters configuration. Note that at the experiment level, you have access to all the species and all the global variables and to all the simulations (variable ",(0,r.kt)("inlineCode",{parentName:"p"},"simulations"),")."),(0,r.kt)("p",null,"To be complete, in fact, each experiment (as any agent) will call at each step (i.e. the end of the replications set) the ",(0,r.kt)("inlineCode",{parentName:"p"},"_step_")," action: this action is in charge of executing the behavior of the experiment agent, that is by default the execution of each of its ",(0,r.kt)("inlineCode",{parentName:"p"},"reflex"),". So it is also possible to redefine the action ",(0,r.kt)("inlineCode",{parentName:"p"},"_step_"),", but it will inhibit the reflexes."),(0,r.kt)("p",null,"For instance, the following experiment runs the simulation 5 times, and, at the end of the 5 simulations, saves the people agents in a shapefile."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'experiment \'Run 5 simulations\' type: batch repeat: 5 keep_seed: true until: ( time > 1000 ) {\n    int cpt <- 0;\n\n    reflex save_people {\n    save people type:"shp" to:"people_shape" + cpt + ".shp" with: [is_infected::"INFECTED", is_immune::"IMMUNE"];\n    cpt <- cpt + 1;\n    }\n}\n')),(0,r.kt)("p",null,"The same can be done using the ",(0,r.kt)("inlineCode",{parentName:"p"},"action _step_ {")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"reflex save_people {"),"."),(0,r.kt)("p",null,"But if now we want to save information from the 5 simulations as save 1 shapefile per replication or save aggregated values over the five simulations, we need to use the built-in attribute ",(0,r.kt)("inlineCode",{parentName:"p"},"simulations"),"."),(0,r.kt)("p",null,"To save 1 shapefile per simulation run, we thus need to write:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'experiment \'Run 5 simulations\' type: batch repeat: 5 keep_seed: true until: ( time > 1000 ) {\n    reflex end_of_runs {\n    int cpt <- 0;\n    ask simulations {\n        save people type: "shp" to: "result/people_shape" + cpt + ".shp" with: [is_infected::"INFECTED", is_immune::"IMMUNE"];\n        cpt <- cpt + 1;\n    }\n    }\n}\n')),(0,r.kt)("p",null,"If now we want to save in a file the average number of infected people over the five simulations."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'experiment \'Run 5 simulations\' type: batch repeat: 5 keep_seed: true until: ( cycle > 1000 ) {\n    reflex t {\n        save [cycle, simulations mean_of each.nb_infected] to: "result.txt" type: "csv";\n    }\n}\n')),(0,r.kt)("h2",{id:"permanent"},"Permanent"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"permanent")," statement allows the modeler to define an output block that will not be re-initialized at the beginning of each simulation but will be filled at the end of each simulation.\nFor instance, this ",(0,r.kt)("inlineCode",{parentName:"p"},"permanent")," section will plot for each simulation the end value of the ",(0,r.kt)("inlineCode",{parentName:"p"},"food_gathered")," variable (defined as a global variable in the model)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'permanent {\n    display Ants background: #white refresh: every(1#cycle) {\n    chart "Food Gathered" type: series {\n        data "Food" value: food_gathered;\n    }\n    }\n}\n')))}d.isMDXComponent=!0}}]);