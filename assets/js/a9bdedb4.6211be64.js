"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[71361],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),g=s(t),m=a,f=g["".concat(p,".").concat(m)]||g[m]||u[m]||o;return t?r.createElement(f,l(l({ref:n},c),{},{components:t})):r.createElement(f,l({ref:n},c))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=m;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[g]="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=t[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},29712:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>p,default:()=>f,frontMatter:()=>i,metadata:()=>s,toc:()=>g});var r=t(87462),a=t(63366),o=(t(67294),t(3905)),l=["components"],i={"^title":"Segregation Agents"},p=void 0,s={unversionedId:"Segregation_Agents",id:"Segregation_Agents",title:"Segregation_Agents",description:"Path: Library models/Toy Models/Segregation (Schelling)/models/Segregation (Agents).gaml",source:"@site/../docs/Segregation_Agents.md",sourceDirName:".",slug:"/Segregation_Agents",permalink:"/wiki/next/Segregation_Agents",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/Segregation_Agents/_edit",tags:[],version:"current",frontMatter:{"^title":"Segregation Agents"}},c={},g=[],u={toc:g},m="wrapper";function f(e){var n=e.components,t=(0,a.Z)(e,l);return(0,o.kt)(m,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("img",{width:"960",alt:"Annotation 2023-04-15 122128_SchellingAgents",src:"https://user-images.githubusercontent.com/4437331/232208772-3b0100af-bc7e-4e1d-af8a-605b2adc44ab.png"}),(0,o.kt)("p",null,"Path: Library models/Toy Models/Segregation (Schelling)/models/Segregation (Agents).gaml"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'\n/**\n* Name: segregationAgents\n* Author: \n* Description: A model showing the segregation of the people just by putting a similarity wanted parameter using agents \n*   to represent the individuals\n* Tags: grid\n*/\n\nmodel segregation\n\n//import the Common Schelling Segregation model\nimport "../include/Common Schelling Segregation.gaml"\n\nglobal {\n    //List of all the free places\n    list<space> free_places ;\n    //List of all the places\n    list<space> all_places ;\n    //Shape of the world\n    geometry shape <- square(dimensions);\n    \n    //Action to initialize the people agents\n    action initialize_people { \n        create people number: number_of_people; \n        all_people <- people as list ;  \n    } \n    //Action to initialize the places\n    action initialize_places { \n        all_places <- shuffle (space);\n        free_places <- all_places;  \n    } \n}\n//Grid to discretize space, each cell representing a free space for the people agents\ngrid space width: dimensions height: dimensions neighbors: 8 use_regular_agents: false frequency: 0{\n    rgb color  <- #black;\n}\n\n//Species representing the people agents\nspecies people parent: base  {\n    //Color of the people agent\n    rgb color <- colors at (rnd (number_of_groups - 1));\n    //List of all the neighbours of the agent\n    list<people> my_neighbours -> people at_distance neighbours_distance ;\n    //Cell representing the place of the agent\n    space my_place;\n    init {\n        //The agent will be located on one of the free places\n        my_place <- one_of(free_places);\n        location <- my_place.location; \n        //As one agent is in the place, the place is removed from the free places\n        free_places >> my_place;\n    } \n    //Reflex to migrate the people agent when it is not happy \n    reflex migrate when: !is_happy {\n        //Add the place to the free places as it will move to another place\n        free_places << my_place;\n        //Change the place of the agent\n        my_place <- one_of(free_places);\n        location <- my_place.location; \n        //Remove the new place from the free places\n        free_places >> my_place;\n    }\n    \n    aspect default{ \n        draw circle (0.5) color: color; \n    }\n}\n\n\n\nexperiment schelling type: gui {    \n    output {\n        display Segregation {\n            species people;\n        }   \n        display Charts  type: 2d {\n            chart "Proportion of happiness" type: pie background: #gray style: exploded position: {0,0} size: {1.0,0.5}{\n                data "Unhappy" value: number_of_people - sum_happy_people color: #green;\n                data "Happy" value: sum_happy_people color: #yellow;\n            }\n            chart "Global happiness and similarity" type: series background: #gray axes: #white position: {0,0.5} size: {1.0,0.5} {\n                data "happy" color: #blue value:  (sum_happy_people / number_of_people) * 100 style: spline ;\n                data "similarity" color: #red value:  (sum_similar_neighbours / sum_total_neighbours) * 100 style: step ;\n            }\n        }\n    }\n}\n\n')))}f.isMDXComponent=!0}}]);