"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[34720],{81728:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var i=t(17624),o=t(4552);const s={title:"4. Emotions and Personality"},a=void 0,l={id:"BDIAgents_step4",title:"4. Emotions and Personality",description:"This fourth step consists of adding emotions that will impact the gold miner agent behavior and defining the personality of the agents.",source:"@site/versioned_docs/version-1.8.1/BDIAgents_step4.md",sourceDirName:".",slug:"/BDIAgents_step4",permalink:"/wiki/1.8.1/BDIAgents_step4",draft:!1,unlisted:!1,editUrl:"https://github.com/gama-platform/gama/wiki/BDIAgents_step4/_edit",tags:[],version:"1.8.1",frontMatter:{title:"4. Emotions and Personality"},sidebar:"tuto",previous:{title:"3. Social relation",permalink:"/wiki/1.8.1/BDIAgents_step3"},next:{title:"5. Norms, obligation, and enforcement",permalink:"/wiki/1.8.1/BDIAgents_step5"}},r={},d=[{value:"Formulation",id:"formulation",level:2},{value:"Emotions",id:"emotions",level:2},{value:"Personality",id:"personality",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"Emotions",id:"emotions-1",level:3},{value:"Emotions and personality",id:"emotions-and-personality",level:3},{value:"Complete Model",id:"complete-model",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"This fourth step consists of adding emotions that will impact the gold miner agent behavior and defining the personality of the agents."}),"\n",(0,i.jsx)(n.h2,{id:"formulation",children:"Formulation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Definition of global emotions"}),"\n",(0,i.jsx)(n.li,{children:"Modification of the miner species to integrate emotions and personality"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"emotions",children:"Emotions"}),"\n",(0,i.jsx)(n.p,{children:"The BDI architecture of GAMA gives the possibility to generate emotions and to use them in the cognition. The definition of emotions in GAMA is based on the OCC theory of emotions. According to this theory, an emotion is a valued answer to the appraisal of a situation. In GAMA an emotion is represented by a set of 5 elements:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"E"}),": the name of the emotion felt by agent i."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"P"}),": the predicate that represents the fact about which the emotion is expressed."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"A"}),": the agent causing the emotion."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"I"}),": the intensity of the emotion."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"D"}),": the decay of the emotion's intensity."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The BDI architecture of GAMA integrates a dynamic creation of emotions process that will create emotions according to the mental states of the agent. More precisely, twenty emotions can be created: eight emotions related to events, four emotions related to other agents and eight emotions related to actions."}),"\n",(0,i.jsxs)(n.p,{children:["The complete description of these emotions and their creation rules can be found in ",(0,i.jsx)(n.a,{href:"https://hal.archives-ouvertes.fr/hal-01573384/document",children:"(Bourgais et al., 2017)"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"personality",children:"Personality"}),"\n",(0,i.jsx)(n.p,{children:"In order to facilitate the parametrization of the BDI agents, we add the possibility to define all the parameters related to the BDI architecture through the OCEAN model, which proposes to represent the personality of a person according to five factors (corresponding to the 5 variables of the BDI agents):"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"O"}),": represents the openness of someone (open-minded/narrow-minded)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"C"}),": represents the consciousness of someone (act with preparations/impulsive)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"E"}),": represents the extroversion of someone (extrovert/shy)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"A"}),": represents the agreeableness of someone (friendly/hostile)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"N"}),": represent the degree of control someone has on its emotions (calm/neurotic)"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Each of these variables has a value between 0 and 1. 0.5 represents the neutral value, below 0.5, the value is considered negatively and above 0.5, it is considered positively. For example, someone with a value of 1 for ",(0,i.jsx)(n.em,{children:"N"})," is considered as calm and someone with a value of 0 for ",(0,i.jsx)(n.em,{children:"A"})," is considered as hostile."]}),"\n",(0,i.jsx)(n.h2,{id:"model-definition",children:"Model Definition"}),"\n",(0,i.jsx)(n.h3,{id:"emotions-1",children:"Emotions"}),"\n",(0,i.jsxs)(n.p,{children:["We add a new global emotion called ",(0,i.jsx)(n.code,{children:"joy"})," that represents the joy emotion."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'global {\n    ...\n    emotion joy <- new_emotion("joy");\n    ...\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"emotions-and-personality",children:"Emotions and personality"}),"\n",(0,i.jsxs)(n.p,{children:["To use emotions (and to activate the automatic emotion generation process), we just have to set the value of the built-in variable ",(0,i.jsx)(n.code,{children:"use_emotions_architecture"})," to true (false by default). In our case, one of the possible desires concerns the predicate ",(0,i.jsx)(n.code,{children:"has_gold"}),", and when an agent fulfill this desire and find a gold nugget (plan ",(0,i.jsx)(n.code,{children:"get_gold"}),"), it gets the belief ",(0,i.jsx)(n.code,{children:"has_gold"}),", and the emotion engine automatically creates a ",(0,i.jsx)(n.code,{children:"joy"})," emotion."]}),"\n",(0,i.jsxs)(n.p,{children:["To be able to define the parameter of a BDI agent through the OCEAN model, we have to set the value of the built-in variable ",(0,i.jsx)(n.code,{children:"use_personality"})," to true (false by default). In this model, we chose to use the default value of the ",(0,i.jsx)(n.em,{children:"O"}),", ",(0,i.jsx)(n.em,{children:"C"}),", ",(0,i.jsx)(n.em,{children:"E"}),", ",(0,i.jsx)(n.em,{children:"A"})," and ",(0,i.jsx)(n.em,{children:"N"})," variables (default value: 0.5). The interest of using the personality in our case is to allow the emotion engine to give a lifetime to the created emotions (otherwise, the emotions would have an infinite lifetime)."]}),"\n",(0,i.jsx)(n.p,{children:"In this model, we only use the emotions to define if the miner agents are going to share or not its knowledge about the gold mines. We consider that the miner only shares information if it has a joy emotion (and the agent tells that it is joyfous)."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'species miner skills: [moving] control: simple_bdi {\n    ...\n    bool use_emotions_architecture <- true;\n    bool use_personality <- true;\n\t\t\n    perceive target: gold_mine where (each.quantity > 0) in: view_dist {\n\tfocus mine_at_location var:location;\n\task myself {\n\t    if (has_emotion(joy)) { \n                write self.name + " is joyous";\n                do add_desire(predicate:share_information, strength: 5.0);\n            }\n\t    do remove_intention(find_gold, false);\n\t}\n    }\n    ...\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"complete-model",children:"Complete Model"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'model BDItutorial4\n\nglobal {\n    int nb_mines <- 10; \n    int nb_miners <- 5;\n    market the_market;\n    \n    string mine_at_location <- "mine_at_location";\n    string empty_mine_location <- "empty_mine_location";\n    \n    float step <- 10#mn;\n    \n    //possible predicates concerning miners\n    predicate mine_location <- new_predicate(mine_at_location) ;\n    predicate choose_gold_mine <- new_predicate("choose a gold mine");\n    predicate has_gold <- new_predicate("extract gold");\n    predicate find_gold <- new_predicate("find gold") ;\n    predicate sell_gold <- new_predicate("sell gold") ;\n    predicate share_information <- new_predicate("share information") ;\n    \n    \n    emotion joy <- new_emotion("joy");\n    \n    float inequality <- 0.0 update:standard_deviation(miner collect each.gold_sold);\n    \n    geometry shape <- square(20 #km);\n    init\n    {\n        create market {\n            the_market <- self;    \n        }\n        create gold_mine number: nb_mines;\n        create miner number: nb_miners;\n    }\n    \n    reflex display_social_links{\n\t\tloop tempMiner over: miner{\n\t\t\t\tloop tempDestination over: tempMiner.social_link_base{\n\t\t\t\t\tif (tempDestination !=nil){\n\t\t\t\t\t\tbool exists<-false;\n\t\t\t\t\t\tloop tempLink over: socialLinkRepresentation{\n\t\t\t\t\t\t\tif((tempLink.origin=tempMiner) and (tempLink.destination=tempDestination.agent)){\n\t\t\t\t\t\t\t\texists<-true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(not exists){\n\t\t\t\t\t\t\tcreate socialLinkRepresentation number: 1{\n\t\t\t\t\t\t\t\torigin <- tempMiner;\n\t\t\t\t\t\t\t\tdestination <- tempDestination.agent;\n\t\t\t\t\t\t\t\tif(get_liking(tempDestination)>0){\n\t\t\t\t\t\t\t\t\tmy_color <- #green;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tmy_color <- #red;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t}\n\n    reflex end_simulation when: sum(gold_mine collect each.quantity) = 0 and empty(miner where each.has_belief(has_gold)){\n        do pause;\n    }\n}\n\nspecies gold_mine {\n    int quantity <- rnd(1,20);\n    aspect default {\n        draw triangle(200 + quantity * 50) color: (quantity > 0) ? #yellow : #gray border: #black;    \n    }\n}\n\nspecies market {\n    int golds;\n    aspect default {\n        draw square(1000) color: #black ;\n    }\n}\n\nspecies miner skills: [moving] control:simple_bdi {\n    \n    float view_dist<-1000.0;\n    float speed <- 2#km/#h;\n    rgb my_color<-rnd_color(255);\n    point target;\n    int gold_sold;\n    \n    bool use_social_architecture <- true;\n    bool use_emotions_architecture <- true;\n    bool use_personality <- true;\n    \n    init {\n        do add_desire(find_gold);\n    }\n    \n    perceive target:miner in:view_dist {\n        socialize liking: 1 -  point(my_color.red, my_color.green, my_color.blue) distance_to point(myself.my_color.red, myself.my_color.green, myself.my_color.blue) / ( 255);\n    }\n        \n    perceive target: gold_mine where (each.quantity > 0) in: view_dist {\n        focus id: mine_at_location var: location;\n        ask myself {\n            if (has_emotion(joy)) {\n                write self.name + " is joyous";\n                do add_desire(predicate:share_information, strength: 5.0);\n            }\n            do remove_intention(find_gold, false);\n        }\n    }\n    \n    rule belief: mine_location new_desire: has_gold strength: 2.0;\n    rule belief: has_gold new_desire: sell_gold strength: 3.0;\n    \n    plan lets_wander intention:find_gold {\n        do wander;\n    }\n    \n    plan get_gold intention:has_gold  {\n        if (target = nil) {\n            do add_subintention(get_current_intention(),choose_gold_mine, true);\n            do current_intention_on_hold();\n        } else {\n            do goto target: target ;\n            if (target = location)  {\n                gold_mine current_mine<- gold_mine first_with (target = each.location);\n                if current_mine.quantity > 0 {\n                     do add_belief(has_gold);\n                    ask current_mine {quantity <- quantity - 1;}    \n                } else {\n                    do add_belief(new_predicate(empty_mine_location, ["location_value"::target]));\n                }\n                target <- nil;\n            }\n        }    \n    }\n    \n    plan choose_closest_gold_mine intention: choose_gold_mine instantaneous: true{\n        list<point> possible_mines <- get_beliefs_with_name(mine_at_location) collect (point(get_predicate(mental_state (each)).values["location_value"]));\n        list<point> empty_mines <- get_beliefs_with_name(empty_mine_location) collect (point(get_predicate(mental_state (each)).values["location_value"]));\n        possible_mines <- possible_mines - empty_mines;\n        if (empty(possible_mines)) {\n            do remove_intention(has_gold, true); \n        } else {\n            target <- (possible_mines with_min_of (each distance_to self)).location;\n        }\n        do remove_intention(choose_gold_mine, true); \n    }\n    \n    plan return_to_base intention: sell_gold {\n        do goto target: the_market ;\n        if (the_market.location = location)  {\n            do remove_belief(has_gold);\n            do remove_intention(sell_gold, true);\n            gold_sold <- gold_sold + 1;\n        }\n    }\n    plan share_information_to_friends intention: share_information instantaneous: true{\n        list<miner> my_friends <- list<miner>((social_link_base where (each.liking > 0)) collect each.agent);\n        loop known_gold_mine over: get_beliefs_with_name(mine_at_location) {\n            ask my_friends {\n                do add_belief(known_gold_mine);\n            }\n        }\n        loop known_empty_gold_mine over: get_beliefs_with_name(empty_mine_location) {\n            ask my_friends {\n                do add_belief(known_empty_gold_mine);\n            }\n        }\n        \n        do remove_intention(share_information, true); \n    }\n\n    aspect default {\n        draw circle(200) color: my_color border: #black depth: gold_sold;\n    }\n}\n\nspecies socialLinkRepresentation{\n\tminer origin;\n\tagent destination;\n\trgb my_color;\n\t\n\taspect base{\n\t\tdraw line([origin,destination],50.0) color: my_color;\n\t}\n}\n\nexperiment GoldBdi type: gui {\n    output {\n        display map type: opengl\n        {\n            species market ;\n            species gold_mine ;\n            species miner;\n        }\n\n        display socialLinks type: opengl{\n\t\tspecies socialLinkRepresentation aspect: base;\n\t}\n\n        display chart {\n\t    chart "Money" type: series {\n\t\tdatalist legend: miner accumulate each.name value: miner accumulate each.gold_sold color: miner accumulate each.my_color;\n\t\t}\n\t}\n\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"BDIAgents",children:"Back to the start of the tutorial"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"BDIAgents_step1",children:"Creation of the basic model: gold mines and market"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"BDIAgents_step2",children:"Definition of the BDI miners"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"BDIAgents_step3",children:"Definition of social relations between miners"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"BDIAgents_step5",children:"Adding norms, obligations and enforcement"})}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,o.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},4552:(e,n,t)=>{t.d(n,{I:()=>l,M:()=>a});var i=t(11504);const o={},s=i.createContext(o);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);