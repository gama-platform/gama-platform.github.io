"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[88758],{3905:(e,r,n)=>{n.d(r,{Zo:()=>c,kt:()=>d});var t=n(67294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function p(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=t.createContext({}),s=function(e){var r=t.useContext(l),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},c=function(e){var r=s(e.components);return t.createElement(l.Provider,{value:r},e.children)},_="mdxType",y={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},f=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),_=s(n),f=o,d=_["".concat(l,".").concat(f)]||_[f]||y[f]||a;return n?t.createElement(d,i(i({ref:r},c),{},{components:n})):t.createElement(d,i({ref:r},c))}));function d(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=f;var p={};for(var l in r)hasOwnProperty.call(r,l)&&(p[l]=r[l]);p.originalType=e,p[_]="string"==typeof e?e:o,i[1]=p;for(var s=2;s<a;s++)i[s]=n[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}f.displayName="MDXCreateElement"},57259:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>p,metadata:()=>s,toc:()=>_});var t=n(87462),o=n(63366),a=(n(67294),n(3905)),i=["components"],p={title:"9. Stopping condition"},l=void 0,s={unversionedId:"PredatorPrey_step9",id:"version-1.8.1/PredatorPrey_step9",title:"9. Stopping condition",description:"This 9th step illustrates how to use the pause action to stop a simulation.",source:"@site/versioned_docs/version-1.8.1/PredatorPrey_step9.md",sourceDirName:".",slug:"/PredatorPrey_step9",permalink:"/wiki/1.8.1/PredatorPrey_step9",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/PredatorPrey_step9/_edit",tags:[],version:"1.8.1",frontMatter:{title:"9. Stopping condition"},sidebar:"tuto",previous:{title:"8. Complex Behavior",permalink:"/wiki/1.8.1/PredatorPrey_step8"},next:{title:"10. Charts",permalink:"/wiki/1.8.1/PredatorPrey_step10"}},c={},_=[{value:"Formulation",id:"formulation",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"Complete Model",id:"complete-model",level:2}],y={toc:_},f="wrapper";function d(e){var r=e.components,n=(0,o.Z)(e,i);return(0,a.kt)(f,(0,t.Z)({},y,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This 9th step illustrates how to use the ",(0,a.kt)("inlineCode",{parentName:"p"},"pause")," action to stop a simulation."),(0,a.kt)("h2",{id:"formulation"},"Formulation"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Addition of a stopping condition for the simulation: when there is no more prey or predator agents, the simulation stops")),(0,a.kt)("h2",{id:"model-definition"},"Model Definition"),(0,a.kt)("p",null,"We add a new reflex that stops the simulation if the number of preys or the number of predators is zero."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"global {\n    ...\n    reflex stop_simulation when: (nb_preys = 0) or (nb_predators = 0) {\n        do pause ;\n    } \n}\n")),(0,a.kt)("h2",{id:"complete-model"},"Complete Model"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'model prey_predator\n\nglobal {\n    int nb_preys_init <- 200;\n    int nb_predators_init <- 20;\n    float prey_max_energy <- 1.0;\n    float prey_max_transfert <- 0.1;\n    float prey_energy_consum <- 0.05;\n    float predator_max_energy <- 1.0;\n    float predator_energy_transfert <- 0.5;\n    float predator_energy_consum <- 0.02;\n    float prey_proba_reproduce <- 0.01;\n    int prey_nb_max_offsprings <- 5;\n    float prey_energy_reproduce <- 0.5;\n    float predator_proba_reproduce <- 0.01;\n    int predator_nb_max_offsprings <- 3;\n    float predator_energy_reproduce <- 0.5;\n    int nb_preys -> {length(prey)};\n    int nb_predators -> {length(predator)};\n\n    init {\n        create prey number: nb_preys_init;\n        create predator number: nb_predators_init;\n    }\n    \n    reflex stop_simulation when: (nb_preys = 0) or (nb_predators = 0) {\n        do pause;\n    } \n}\n\nspecies generic_species {\n    float size <- 1.0;\n    rgb color;\n    float max_energy;\n    float max_transfert;\n    float energy_consum;\n    float proba_reproduce;\n    int nb_max_offsprings;\n    float energy_reproduce;\n    image_file my_icon;\n    vegetation_cell my_cell <- one_of(vegetation_cell);\n    float energy <- rnd(max_energy) update: energy - energy_consum max: max_energy;\n\n    init {\n        location <- my_cell.location;\n    }\n\n    reflex basic_move {\n        my_cell <- choose_cell();\n        location <- my_cell.location;\n    }\n\n    reflex eat {\n        energy <- energy + energy_from_eat();        \n    }\n\n    reflex die when: energy <= 0 {\n        do die;\n    }\n\n    reflex reproduce when: (energy >= energy_reproduce) and (flip(proba_reproduce)) {\n        int nb_offsprings <- rnd(1, nb_max_offsprings);\n        create species(self) number: nb_offsprings {\n            my_cell <- myself.my_cell;\n            location <- my_cell.location;\n            energy <- myself.energy / nb_offsprings;\n        }\n\n        energy <- energy / nb_offsprings;\n    }\n\n    float energy_from_eat {\n        return 0.0;\n    }\n\n    vegetation_cell choose_cell {\n        return nil;\n    }\n\n    aspect base {\n        draw circle(size) color: color;\n    }\n\n    aspect icon {\n        draw my_icon size: 2 * size;\n    }\n\n    aspect info {\n        draw square(size) color: color;\n        draw string(energy with_precision 2) size: 3 color: #black;\n    }\n}\n\nspecies prey parent: generic_species {\n    rgb color <- #blue;\n    float max_energy <- prey_max_energy;\n    float max_transfert <- prey_max_transfert;\n    float energy_consum <- prey_energy_consum;\n    float proba_reproduce <- prey_proba_reproduce;\n    int nb_max_offsprings <- prey_nb_max_offsprings;\n    float energy_reproduce <- prey_energy_reproduce;\n    image_file my_icon <- image_file("../includes/data/sheep.png");\n\n    float energy_from_eat {\n        float energy_transfert <- 0.0;\n        if(my_cell.food > 0) {\n            energy_transfert <- min([max_transfert, my_cell.food]);\n            my_cell.food <- my_cell.food - energy_transfert;\n        }             \n        return energy_transfert;\n    }\n\n    vegetation_cell choose_cell {\n        return (my_cell.neighbors2) with_max_of (each.food);\n    }\n}\n\nspecies predator parent: generic_species {\n    rgb color <- #red;\n    float max_energy <- predator_max_energy;\n    float energy_transfert <- predator_energy_transfert;\n    float energy_consum <- predator_energy_consum;\n    float proba_reproduce <- predator_proba_reproduce;\n    int nb_max_offsprings <- predator_nb_max_offsprings;\n    float energy_reproduce <- predator_energy_reproduce;\n    image_file my_icon <- image_file("../includes/data/wolf.png");\n\n    float energy_from_eat {\n        list<prey> reachable_preys <- prey inside (my_cell);\n        if(! empty(reachable_preys)) {\n            ask one_of (reachable_preys) {\n                do die;\n            }\n            return energy_transfert;\n        }\n        return 0.0;\n    }\n\n    vegetation_cell choose_cell {\n        vegetation_cell my_cell_tmp <- shuffle(my_cell.neighbors2) first_with (!(empty(prey inside (each))));\n        if my_cell_tmp != nil {\n            return my_cell_tmp;\n        } else {\n            return one_of(my_cell.neighbors2);\n        }\n    }\n}\n\ngrid vegetation_cell width: 50 height: 50 neighbors: 4 {\n    float max_food <- 1.0;\n    float food_prod <- rnd(0.01);\n    float food <- rnd(1.0) max: max_food update: food + food_prod;\n    rgb color <- rgb(int(255 * (1 - food)), 255, int(255 * (1 - food))) update: rgb(int(255 * (1 - food)), 255, int(255 * (1 - food)));\n    list<vegetation_cell> neighbors2 <- (self neighbors_at 2);\n}\n\nexperiment prey_predator type: gui {\n    parameter "Initial number of preys: " var: nb_preys_init min: 0 max: 1000 category: "Prey";\n    parameter "Prey max energy: " var: prey_max_energy category: "Prey";\n    parameter "Prey max transfert: " var: prey_max_transfert category: "Prey";\n    parameter "Prey energy consumption: " var: prey_energy_consum category: "Prey";\n    parameter "Initial number of predators: " var: nb_predators_init min: 0 max: 200 category: "Predator";\n    parameter "Predator max energy: " var: predator_max_energy category: "Predator";\n    parameter "Predator energy transfert: " var: predator_energy_transfert category: "Predator";\n    parameter "Predator energy consumption: " var: predator_energy_consum category: "Predator";\n    parameter \'Prey probability reproduce: \' var: prey_proba_reproduce category: \'Prey\';\n    parameter \'Prey nb max offsprings: \' var: prey_nb_max_offsprings category: \'Prey\';\n    parameter \'Prey energy reproduce: \' var: prey_energy_reproduce category: \'Prey\';\n    parameter \'Predator probability reproduce: \' var: predator_proba_reproduce category: \'Predator\';\n    parameter \'Predator nb max offsprings: \' var: predator_nb_max_offsprings category: \'Predator\';\n    parameter \'Predator energy reproduce: \' var: predator_energy_reproduce category: \'Predator\';\n\n    output {\n        display main_display {\n            grid vegetation_cell lines: #black;\n            species prey aspect: icon;\n            species predator aspect: icon;\n        }\n\n        display info_display {\n            grid vegetation_cell lines: #black;\n            species prey aspect: info;\n            species predator aspect: info;\n        }\n\n        monitor "Number of preys" value: nb_preys;\n        monitor "Number of predators" value: nb_predators;\n    }\n}\n')))}d.isMDXComponent=!0}}]);