"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[71337],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>h});var n=a(67294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,i=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=p(a),u=l,h=d["".concat(s,".").concat(u)]||d[u]||k[u]||i;return a?n.createElement(h,r(r({ref:t},m),{},{components:a})):n.createElement(h,r({ref:t},m))}));function h(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=a.length,r=new Array(i);r[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:l,r[1]=o;for(var p=2;p<i;p++)r[p]=a[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},3030:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>p,toc:()=>d});var n=a(87462),l=a(63366),i=(a(67294),a(3905)),r=["components"],o={title:"Operators (D to H)"},s=void 0,p={unversionedId:"OperatorsDH",id:"version-1.8.1/OperatorsDH",title:"Operators (D to H)",description:"----",source:"@site/versioned_docs/version-1.8.1/OperatorsDH.md",sourceDirName:".",slug:"/OperatorsDH",permalink:"/wiki/1.8.1/OperatorsDH",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/OperatorsDH/_edit",tags:[],version:"1.8.1",frontMatter:{title:"Operators (D to H)"},sidebar:"main",previous:{title:"Operators (B to C)",permalink:"/wiki/1.8.1/OperatorsBC"},next:{title:"Operators (I to M)",permalink:"/wiki/1.8.1/OperatorsIM"}},m={},d=[{value:"Definition",id:"definition",level:2},{value:"Priority between operators",id:"priority-between-operators",level:2},{value:"Using actions as operators",id:"using-actions-as-operators",level:2},{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Operators by categories",id:"operators-by-categories",level:2},{value:"3D",id:"3d",level:3},{value:"Arithmetic operators",id:"arithmetic-operators",level:3},{value:"BDI",id:"bdi",level:3},{value:"Casting operators",id:"casting-operators",level:3},{value:"Color-related operators",id:"color-related-operators",level:3},{value:"Comparison operators",id:"comparison-operators",level:3},{value:"Containers-related operators",id:"containers-related-operators",level:3},{value:"Date-related operators",id:"date-related-operators",level:3},{value:"Dates",id:"dates",level:3},{value:"Displays",id:"displays",level:3},{value:"Driving operators",id:"driving-operators",level:3},{value:"edge",id:"edge",level:3},{value:"EDP-related operators",id:"edp-related-operators",level:3},{value:"Files-related operators",id:"files-related-operators",level:3},{value:"FIPA-related operators",id:"fipa-related-operators",level:3},{value:"GamaMetaType",id:"gamametatype",level:3},{value:"Graphs-related operators",id:"graphs-related-operators",level:3},{value:"Grid-related operators",id:"grid-related-operators",level:3},{value:"Iterator operators",id:"iterator-operators",level:3},{value:"List-related operators",id:"list-related-operators",level:3},{value:"Logical operators",id:"logical-operators",level:3},{value:"Map comparaison operators",id:"map-comparaison-operators",level:3},{value:"Map-related operators",id:"map-related-operators",level:3},{value:"Material",id:"material",level:3},{value:"Matrix-related operators",id:"matrix-related-operators",level:3},{value:"multicriteria operators",id:"multicriteria-operators",level:3},{value:"Path-related operators",id:"path-related-operators",level:3},{value:"Points-related operators",id:"points-related-operators",level:3},{value:"Random operators",id:"random-operators",level:3},{value:"ReverseOperators",id:"reverseoperators",level:3},{value:"Shape",id:"shape",level:3},{value:"Spatial operators",id:"spatial-operators",level:3},{value:"Spatial properties operators",id:"spatial-properties-operators",level:3},{value:"Spatial queries operators",id:"spatial-queries-operators",level:3},{value:"Spatial relations operators",id:"spatial-relations-operators",level:3},{value:"Spatial statistical operators",id:"spatial-statistical-operators",level:3},{value:"Spatial transformations operators",id:"spatial-transformations-operators",level:3},{value:"Species-related operators",id:"species-related-operators",level:3},{value:"Statistical operators",id:"statistical-operators",level:3},{value:"Strings-related operators",id:"strings-related-operators",level:3},{value:"SubModel",id:"submodel",level:3},{value:"System",id:"system",level:3},{value:"Time-related operators",id:"time-related-operators",level:3},{value:"Types-related operators",id:"types-related-operators",level:3},{value:"User control operators",id:"user-control-operators",level:3},{value:"Operators",id:"operators",level:2},{value:"<code>date</code>",id:"date",level:3},{value:"Possible use:",id:"possible-use",level:4},{value:"Result:",id:"result",level:4},{value:"Examples:",id:"examples",level:4},{value:"<code>dbscan</code>",id:"dbscan",level:3},{value:"Possible use:",id:"possible-use-1",level:4},{value:"Result:",id:"result-1",level:4},{value:"Special cases:",id:"special-cases",level:4},{value:"Examples:",id:"examples-1",level:4},{value:"<code>dead</code>",id:"dead",level:3},{value:"Possible use:",id:"possible-use-2",level:4},{value:"Result:",id:"result-2",level:4},{value:"Examples:",id:"examples-2",level:4},{value:"<code>degree_of</code>",id:"degree_of",level:3},{value:"Possible use:",id:"possible-use-3",level:4},{value:"Result:",id:"result-3",level:4},{value:"Examples:",id:"examples-3",level:4},{value:"See also:",id:"see-also",level:4},{value:"<code>dem</code>",id:"dem",level:3},{value:"Possible use:",id:"possible-use-4",level:4},{value:"Result:",id:"result-4",level:4},{value:"Examples:",id:"examples-4",level:4},{value:"<code>det</code>",id:"det",level:3},{value:"<code>determinant</code>",id:"determinant",level:3},{value:"Possible use:",id:"possible-use-5",level:4},{value:"Result:",id:"result-5",level:4},{value:"Examples:",id:"examples-5",level:4},{value:"<code>diff</code>",id:"diff",level:3},{value:"Possible use:",id:"possible-use-6",level:4},{value:"Result:",id:"result-6",level:4},{value:"<code>diff2</code>",id:"diff2",level:3},{value:"Possible use:",id:"possible-use-7",level:4},{value:"Result:",id:"result-7",level:4},{value:"<code>directed</code>",id:"directed",level:3},{value:"Possible use:",id:"possible-use-8",level:4},{value:"Result:",id:"result-8",level:4},{value:"Comment:",id:"comment",level:4},{value:"See also:",id:"see-also-1",level:4},{value:"<code>direction_between</code>",id:"direction_between",level:3},{value:"Possible use:",id:"possible-use-9",level:4},{value:"Result:",id:"result-9",level:4},{value:"Examples:",id:"examples-6",level:4},{value:"See also:",id:"see-also-2",level:4},{value:"<code>direction_to</code>",id:"direction_to",level:3},{value:"<code>disjoint_from</code>",id:"disjoint_from",level:3},{value:"Possible use:",id:"possible-use-10",level:4},{value:"Result:",id:"result-10",level:4},{value:"Special cases:",id:"special-cases-1",level:4},{value:"Examples:",id:"examples-7",level:4},{value:"See also:",id:"see-also-3",level:4},{value:"<code>distance_between</code>",id:"distance_between",level:3},{value:"Possible use:",id:"possible-use-11",level:4},{value:"Result:",id:"result-11",level:4},{value:"Examples:",id:"examples-8",level:4},{value:"See also:",id:"see-also-4",level:4},{value:"<code>distance_to</code>",id:"distance_to",level:3},{value:"Possible use:",id:"possible-use-12",level:4},{value:"Result:",id:"result-12",level:4},{value:"Examples:",id:"examples-9",level:4},{value:"See also:",id:"see-also-5",level:4},{value:"<code>distinct</code>",id:"distinct",level:3},{value:"Possible use:",id:"possible-use-13",level:4},{value:"Result:",id:"result-13",level:4},{value:"Special cases:",id:"special-cases-2",level:4},{value:"Examples:",id:"examples-10",level:4},{value:"<code>distribution_of</code>",id:"distribution_of",level:3},{value:"Possible use:",id:"possible-use-14",level:4},{value:"Result:",id:"result-14",level:4},{value:"Examples:",id:"examples-11",level:4},{value:"See also:",id:"see-also-6",level:4},{value:"<code>distribution2d_of</code>",id:"distribution2d_of",level:3},{value:"Possible use:",id:"possible-use-15",level:4},{value:"Result:",id:"result-15",level:4},{value:"Examples:",id:"examples-12",level:4},{value:"See also:",id:"see-also-7",level:4},{value:"<code>div</code>",id:"div",level:3},{value:"Possible use:",id:"possible-use-16",level:4},{value:"Result:",id:"result-16",level:4},{value:"Special cases:",id:"special-cases-3",level:4},{value:"Examples:",id:"examples-13",level:4},{value:"See also:",id:"see-also-8",level:4},{value:"<code>dnorm</code>",id:"dnorm",level:3},{value:"<code>dtw</code>",id:"dtw",level:3},{value:"Possible use:",id:"possible-use-17",level:4},{value:"Result:",id:"result-17",level:4},{value:"Examples:",id:"examples-14",level:4},{value:"<code>durbin_watson</code>",id:"durbin_watson",level:3},{value:"Possible use:",id:"possible-use-18",level:4},{value:"Result:",id:"result-18",level:4},{value:"Examples:",id:"examples-15",level:4},{value:"<code>dxf_file</code>",id:"dxf_file",level:3},{value:"Possible use:",id:"possible-use-19",level:4},{value:"Result:",id:"result-19",level:4},{value:"Special cases:",id:"special-cases-4",level:4},{value:"See also:",id:"see-also-9",level:4},{value:"<code>edge</code>",id:"edge-1",level:3},{value:"Possible use:",id:"possible-use-20",level:4},{value:"<code>edge_between</code>",id:"edge_between",level:3},{value:"Possible use:",id:"possible-use-21",level:4},{value:"Result:",id:"result-20",level:4},{value:"Examples:",id:"examples-16",level:4},{value:"See also:",id:"see-also-10",level:4},{value:"<code>edge_betweenness</code>",id:"edge_betweenness",level:3},{value:"Possible use:",id:"possible-use-22",level:4},{value:"Result:",id:"result-21",level:4},{value:"Examples:",id:"examples-17",level:4},{value:"<code>edges</code>",id:"edges",level:3},{value:"Possible use:",id:"possible-use-23",level:4},{value:"<code>eigenvalues</code>",id:"eigenvalues",level:3},{value:"Possible use:",id:"possible-use-24",level:4},{value:"Result:",id:"result-22",level:4},{value:"Examples:",id:"examples-18",level:4},{value:"<code>electre_DM</code>",id:"electre_dm",level:3},{value:"Possible use:",id:"possible-use-25",level:4},{value:"Result:",id:"result-23",level:4},{value:"Special cases:",id:"special-cases-5",level:4},{value:"Examples:",id:"examples-19",level:4},{value:"See also:",id:"see-also-11",level:4},{value:"<code>ellipse</code>",id:"ellipse",level:3},{value:"Possible use:",id:"possible-use-26",level:4},{value:"Result:",id:"result-24",level:4},{value:"Comment:",id:"comment-1",level:4},{value:"Special cases:",id:"special-cases-6",level:4},{value:"Examples:",id:"examples-20",level:4},{value:"See also:",id:"see-also-12",level:4},{value:"<code>elliptical_arc</code>",id:"elliptical_arc",level:3},{value:"Possible use:",id:"possible-use-27",level:4},{value:"Result:",id:"result-25",level:4},{value:"Examples:",id:"examples-21",level:4},{value:"See also:",id:"see-also-13",level:4},{value:"<code>emotion</code>",id:"emotion",level:3},{value:"Possible use:",id:"possible-use-28",level:4},{value:"Result:",id:"result-26",level:4},{value:"<code>empty</code>",id:"empty",level:3},{value:"Possible use:",id:"possible-use-29",level:4},{value:"Result:",id:"result-27",level:4},{value:"Comment:",id:"comment-2",level:4},{value:"Special cases:",id:"special-cases-7",level:4},{value:"<code>enlarged_by</code>",id:"enlarged_by",level:3},{value:"<code>enter</code>",id:"enter",level:3},{value:"Possible use:",id:"possible-use-30",level:4},{value:"Result:",id:"result-28",level:4},{value:"<code>envelope</code>",id:"envelope",level:3},{value:"Possible use:",id:"possible-use-31",level:4},{value:"Result:",id:"result-29",level:4},{value:"Special cases:",id:"special-cases-8",level:4},{value:"Examples:",id:"examples-22",level:4},{value:"<code>eval_gaml</code>",id:"eval_gaml",level:3},{value:"Possible use:",id:"possible-use-32",level:4},{value:"Result:",id:"result-30",level:4},{value:"Examples:",id:"examples-23",level:4},{value:"<code>eval_when</code>",id:"eval_when",level:3},{value:"Possible use:",id:"possible-use-33",level:4},{value:"Result:",id:"result-31",level:4},{value:"Examples:",id:"examples-24",level:4},{value:"<code>evaluate_sub_model</code>",id:"evaluate_sub_model",level:3},{value:"Possible use:",id:"possible-use-34",level:4},{value:"Result:",id:"result-32",level:4},{value:"Comment:",id:"comment-3",level:4},{value:"<code>even</code>",id:"even",level:3},{value:"Possible use:",id:"possible-use-35",level:4},{value:"Result:",id:"result-33",level:4},{value:"Special cases:",id:"special-cases-9",level:4},{value:"Examples:",id:"examples-25",level:4},{value:"<code>every</code>",id:"every",level:3},{value:"Possible use:",id:"possible-use-36",level:4},{value:"Result:",id:"result-34",level:4},{value:"Comment:",id:"comment-4",level:4},{value:"Examples:",id:"examples-26",level:4},{value:"See also:",id:"see-also-14",level:4},{value:"<code>every_cycle</code>",id:"every_cycle",level:3},{value:"<code>evidence_theory_DM</code>",id:"evidence_theory_dm",level:3},{value:"Possible use:",id:"possible-use-37",level:4},{value:"Result:",id:"result-35",level:4},{value:"Special cases:",id:"special-cases-10",level:4},{value:"Examples:",id:"examples-27",level:4},{value:"See also:",id:"see-also-15",level:4},{value:"<code>exp</code>",id:"exp",level:3},{value:"Possible use:",id:"possible-use-38",level:4},{value:"Result:",id:"result-36",level:4},{value:"Special cases:",id:"special-cases-11",level:4},{value:"Examples:",id:"examples-28",level:4},{value:"See also:",id:"see-also-16",level:4},{value:"<code>fact</code>",id:"fact",level:3},{value:"Possible use:",id:"possible-use-39",level:4},{value:"Result:",id:"result-37",level:4},{value:"Special cases:",id:"special-cases-12",level:4},{value:"Examples:",id:"examples-29",level:4},{value:"<code>farthest_point_to</code>",id:"farthest_point_to",level:3},{value:"Possible use:",id:"possible-use-40",level:4},{value:"Result:",id:"result-38",level:4},{value:"Examples:",id:"examples-30",level:4},{value:"See also:",id:"see-also-17",level:4},{value:"<code>farthest_to</code>",id:"farthest_to",level:3},{value:"Possible use:",id:"possible-use-41",level:4},{value:"Result:",id:"result-39",level:4},{value:"Comment:",id:"comment-5",level:4},{value:"Examples:",id:"examples-31",level:4},{value:"See also:",id:"see-also-18",level:4},{value:"<code>file</code>",id:"file",level:3},{value:"Possible use:",id:"possible-use-42",level:4},{value:"<code>file_exists</code>",id:"file_exists",level:3},{value:"Possible use:",id:"possible-use-43",level:4},{value:"Result:",id:"result-40",level:4},{value:"Examples:",id:"examples-32",level:4},{value:"<code>first</code>",id:"first",level:3},{value:"Possible use:",id:"possible-use-44",level:4},{value:"Result:",id:"result-41",level:4},{value:"Comment:",id:"comment-6",level:4},{value:"Special cases:",id:"special-cases-13",level:4},{value:"See also:",id:"see-also-19",level:4},{value:"<code>first_of</code>",id:"first_of",level:3},{value:"<code>first_with</code>",id:"first_with",level:3},{value:"Possible use:",id:"possible-use-45",level:4},{value:"Result:",id:"result-42",level:4},{value:"Comment:",id:"comment-7",level:4},{value:"Special cases:",id:"special-cases-14",level:4},{value:"Examples:",id:"examples-33",level:4},{value:"See also:",id:"see-also-20",level:4},{value:"<code>flip</code>",id:"flip",level:3},{value:"Possible use:",id:"possible-use-46",level:4},{value:"Result:",id:"result-43",level:4},{value:"Special cases:",id:"special-cases-15",level:4},{value:"Examples:",id:"examples-34",level:4},{value:"See also:",id:"see-also-21",level:4},{value:"<code>float</code>",id:"float",level:3},{value:"Possible use:",id:"possible-use-47",level:4},{value:"<code>floor</code>",id:"floor",level:3},{value:"Possible use:",id:"possible-use-48",level:4},{value:"Result:",id:"result-44",level:4},{value:"Examples:",id:"examples-35",level:4},{value:"See also:",id:"see-also-22",level:4},{value:"<code>folder</code>",id:"folder",level:3},{value:"Possible use:",id:"possible-use-49",level:4},{value:"Result:",id:"result-45",level:4},{value:"Special cases:",id:"special-cases-16",level:4},{value:"Examples:",id:"examples-36",level:4},{value:"See also:",id:"see-also-23",level:4},{value:"<code>folder_exists</code>",id:"folder_exists",level:3},{value:"Possible use:",id:"possible-use-50",level:4},{value:"Result:",id:"result-46",level:4},{value:"Examples:",id:"examples-37",level:4},{value:"<code>font</code>",id:"font",level:3},{value:"Possible use:",id:"possible-use-51",level:4},{value:"Result:",id:"result-47",level:4},{value:"Examples:",id:"examples-38",level:4},{value:"<code>frequency_of</code>",id:"frequency_of",level:3},{value:"Possible use:",id:"possible-use-52",level:4},{value:"Result:",id:"result-48",level:4},{value:"Examples:",id:"examples-39",level:4},{value:"<code>from</code>",id:"from",level:3},{value:"<code>fuzzy_choquet_DM</code>",id:"fuzzy_choquet_dm",level:3},{value:"Possible use:",id:"possible-use-53",level:4},{value:"Result:",id:"result-49",level:4},{value:"Special cases:",id:"special-cases-17",level:4},{value:"Examples:",id:"examples-40",level:4},{value:"See also:",id:"see-also-24",level:4},{value:"<code>fuzzy_kappa</code>",id:"fuzzy_kappa",level:3},{value:"Possible use:",id:"possible-use-54",level:4},{value:"Result:",id:"result-50",level:4},{value:"Examples:",id:"examples-41",level:4},{value:"<code>fuzzy_kappa_sim</code>",id:"fuzzy_kappa_sim",level:3},{value:"Possible use:",id:"possible-use-55",level:4},{value:"Result:",id:"result-51",level:4},{value:"Examples:",id:"examples-42",level:4},{value:"<code>gaml_file</code>",id:"gaml_file",level:3},{value:"Possible use:",id:"possible-use-56",level:4},{value:"Result:",id:"result-52",level:4},{value:"Special cases:",id:"special-cases-18",level:4},{value:"See also:",id:"see-also-25",level:4},{value:"<code>gaml_type</code>",id:"gaml_type",level:3},{value:"Possible use:",id:"possible-use-57",level:4},{value:"<code>gamma</code>",id:"gamma",level:3},{value:"Possible use:",id:"possible-use-58",level:4},{value:"Result:",id:"result-53",level:4},{value:"Examples:",id:"examples-43",level:4},{value:"<code>gamma_density</code>",id:"gamma_density",level:3},{value:"Possible use:",id:"possible-use-59",level:4},{value:"Result:",id:"result-54",level:4},{value:"Examples:",id:"examples-44",level:4},{value:"See also:",id:"see-also-26",level:4},{value:"<code>gamma_distribution</code>",id:"gamma_distribution",level:3},{value:"Possible use:",id:"possible-use-60",level:4},{value:"Result:",id:"result-55",level:4},{value:"Comment:",id:"comment-8",level:4},{value:"Examples:",id:"examples-45",level:4},{value:"<code>gamma_distribution_complemented</code>",id:"gamma_distribution_complemented",level:3},{value:"Possible use:",id:"possible-use-61",level:4},{value:"Result:",id:"result-56",level:4},{value:"Examples:",id:"examples-46",level:4},{value:"<code>gamma_index</code>",id:"gamma_index",level:3},{value:"Possible use:",id:"possible-use-62",level:4},{value:"Result:",id:"result-57",level:4},{value:"Examples:",id:"examples-47",level:4},{value:"See also:",id:"see-also-27",level:4},{value:"<code>gamma_rnd</code>",id:"gamma_rnd",level:3},{value:"Possible use:",id:"possible-use-63",level:4},{value:"Result:",id:"result-58",level:4},{value:"Examples:",id:"examples-48",level:4},{value:"See also:",id:"see-also-28",level:4},{value:"<code>gamma_trunc_rnd</code>",id:"gamma_trunc_rnd",level:3},{value:"Possible use:",id:"possible-use-64",level:4},{value:"Result:",id:"result-59",level:4},{value:"Special cases:",id:"special-cases-19",level:4},{value:"See also:",id:"see-also-29",level:4},{value:"<code>gauss</code>",id:"gauss",level:3},{value:"Possible use:",id:"possible-use-65",level:4},{value:"Result:",id:"result-60",level:4},{value:"Special cases:",id:"special-cases-20",level:4},{value:"Examples:",id:"examples-49",level:4},{value:"See also:",id:"see-also-30",level:4},{value:"<code>gauss_rnd</code>",id:"gauss_rnd",level:3},{value:"<code>generate_barabasi_albert</code>",id:"generate_barabasi_albert",level:3},{value:"Possible use:",id:"possible-use-66",level:4},{value:"Result:",id:"result-61",level:4},{value:"Comment:",id:"comment-9",level:4},{value:"Special cases:",id:"special-cases-21",level:4},{value:"Examples:",id:"examples-50",level:4},{value:"See also:",id:"see-also-31",level:4},{value:"<code>generate_complete_graph</code>",id:"generate_complete_graph",level:3},{value:"Possible use:",id:"possible-use-67",level:4},{value:"Result:",id:"result-62",level:4},{value:"Comment:",id:"comment-10",level:4},{value:"Special cases:",id:"special-cases-22",level:4},{value:"Examples:",id:"examples-51",level:4},{value:"See also:",id:"see-also-32",level:4},{value:"<code>generate_watts_strogatz</code>",id:"generate_watts_strogatz",level:3},{value:"Possible use:",id:"possible-use-68",level:4},{value:"Result:",id:"result-63",level:4},{value:"Comment:",id:"comment-11",level:4},{value:"Special cases:",id:"special-cases-23",level:4},{value:"Examples:",id:"examples-52",level:4},{value:"See also:",id:"see-also-33",level:4},{value:"<code>geojson_file</code>",id:"geojson_file",level:3},{value:"Possible use:",id:"possible-use-69",level:4},{value:"Result:",id:"result-64",level:4},{value:"Special cases:",id:"special-cases-24",level:4},{value:"See also:",id:"see-also-34",level:4},{value:"<code>geometric_mean</code>",id:"geometric_mean",level:3},{value:"Possible use:",id:"possible-use-70",level:4},{value:"Result:",id:"result-65",level:4},{value:"Comment:",id:"comment-12",level:4},{value:"Examples:",id:"examples-53",level:4},{value:"See also:",id:"see-also-35",level:4},{value:"<code>geometry</code>",id:"geometry",level:3},{value:"Possible use:",id:"possible-use-71",level:4},{value:"<code>geometry_collection</code>",id:"geometry_collection",level:3},{value:"Possible use:",id:"possible-use-72",level:4},{value:"Result:",id:"result-66",level:4},{value:"Special cases:",id:"special-cases-25",level:4},{value:"Examples:",id:"examples-54",level:4},{value:"See also:",id:"see-also-36",level:4},{value:"<code>get</code>",id:"get",level:3},{value:"Possible use:",id:"possible-use-73",level:4},{value:"Result:",id:"result-67",level:4},{value:"Special cases:",id:"special-cases-26",level:4},{value:"<code>get_about</code>",id:"get_about",level:3},{value:"Possible use:",id:"possible-use-74",level:4},{value:"Result:",id:"result-68",level:4},{value:"Examples:",id:"examples-55",level:4},{value:"<code>get_agent</code>",id:"get_agent",level:3},{value:"Possible use:",id:"possible-use-75",level:4},{value:"Result:",id:"result-69",level:4},{value:"Examples:",id:"examples-56",level:4},{value:"<code>get_agent_cause</code>",id:"get_agent_cause",level:3},{value:"Possible use:",id:"possible-use-76",level:4},{value:"Result:",id:"result-70",level:4},{value:"Examples:",id:"examples-57",level:4},{value:"<code>get_belief_op</code>",id:"get_belief_op",level:3},{value:"Possible use:",id:"possible-use-77",level:4},{value:"Result:",id:"result-71",level:4},{value:"Examples:",id:"examples-58",level:4},{value:"<code>get_belief_with_name_op</code>",id:"get_belief_with_name_op",level:3},{value:"Possible use:",id:"possible-use-78",level:4},{value:"Result:",id:"result-72",level:4},{value:"Examples:",id:"examples-59",level:4},{value:"<code>get_beliefs_op</code>",id:"get_beliefs_op",level:3},{value:"Possible use:",id:"possible-use-79",level:4},{value:"Result:",id:"result-73",level:4},{value:"Examples:",id:"examples-60",level:4},{value:"<code>get_beliefs_with_name_op</code>",id:"get_beliefs_with_name_op",level:3},{value:"Possible use:",id:"possible-use-80",level:4},{value:"Result:",id:"result-74",level:4},{value:"Examples:",id:"examples-61",level:4},{value:"<code>get_current_intention_op</code>",id:"get_current_intention_op",level:3},{value:"Possible use:",id:"possible-use-81",level:4},{value:"Result:",id:"result-75",level:4},{value:"Examples:",id:"examples-62",level:4},{value:"<code>get_decay</code>",id:"get_decay",level:3},{value:"Possible use:",id:"possible-use-82",level:4},{value:"Result:",id:"result-76",level:4},{value:"Examples:",id:"examples-63",level:4},{value:"<code>get_desire_op</code>",id:"get_desire_op",level:3},{value:"Possible use:",id:"possible-use-83",level:4},{value:"Result:",id:"result-77",level:4},{value:"Examples:",id:"examples-64",level:4},{value:"<code>get_desire_with_name_op</code>",id:"get_desire_with_name_op",level:3},{value:"Possible use:",id:"possible-use-84",level:4},{value:"Result:",id:"result-78",level:4},{value:"Examples:",id:"examples-65",level:4},{value:"<code>get_desires_op</code>",id:"get_desires_op",level:3},{value:"Possible use:",id:"possible-use-85",level:4},{value:"Result:",id:"result-79",level:4},{value:"Examples:",id:"examples-66",level:4},{value:"<code>get_desires_with_name_op</code>",id:"get_desires_with_name_op",level:3},{value:"Possible use:",id:"possible-use-86",level:4},{value:"Result:",id:"result-80",level:4},{value:"Examples:",id:"examples-67",level:4},{value:"<code>get_dominance</code>",id:"get_dominance",level:3},{value:"Possible use:",id:"possible-use-87",level:4},{value:"Result:",id:"result-81",level:4},{value:"Examples:",id:"examples-68",level:4},{value:"<code>get_familiarity</code>",id:"get_familiarity",level:3},{value:"Possible use:",id:"possible-use-88",level:4},{value:"Result:",id:"result-82",level:4},{value:"Examples:",id:"examples-69",level:4},{value:"<code>get_ideal_op</code>",id:"get_ideal_op",level:3},{value:"Possible use:",id:"possible-use-89",level:4},{value:"Result:",id:"result-83",level:4},{value:"Examples:",id:"examples-70",level:4},{value:"<code>get_ideal_with_name_op</code>",id:"get_ideal_with_name_op",level:3},{value:"Possible use:",id:"possible-use-90",level:4},{value:"Result:",id:"result-84",level:4},{value:"Examples:",id:"examples-71",level:4},{value:"<code>get_ideals_op</code>",id:"get_ideals_op",level:3},{value:"Possible use:",id:"possible-use-91",level:4},{value:"Result:",id:"result-85",level:4},{value:"Examples:",id:"examples-72",level:4},{value:"<code>get_ideals_with_name_op</code>",id:"get_ideals_with_name_op",level:3},{value:"Possible use:",id:"possible-use-92",level:4},{value:"Result:",id:"result-86",level:4},{value:"Examples:",id:"examples-73",level:4},{value:"<code>get_intensity</code>",id:"get_intensity",level:3},{value:"Possible use:",id:"possible-use-93",level:4},{value:"Result:",id:"result-87",level:4},{value:"Examples:",id:"examples-74",level:4},{value:"<code>get_intention_op</code>",id:"get_intention_op",level:3},{value:"Possible use:",id:"possible-use-94",level:4},{value:"Result:",id:"result-88",level:4},{value:"Examples:",id:"examples-75",level:4},{value:"<code>get_intention_with_name_op</code>",id:"get_intention_with_name_op",level:3},{value:"Possible use:",id:"possible-use-95",level:4},{value:"Result:",id:"result-89",level:4},{value:"Examples:",id:"examples-76",level:4},{value:"<code>get_intentions_op</code>",id:"get_intentions_op",level:3},{value:"Possible use:",id:"possible-use-96",level:4},{value:"Result:",id:"result-90",level:4},{value:"Examples:",id:"examples-77",level:4},{value:"<code>get_intentions_with_name_op</code>",id:"get_intentions_with_name_op",level:3},{value:"Possible use:",id:"possible-use-97",level:4},{value:"Result:",id:"result-91",level:4},{value:"Examples:",id:"examples-78",level:4},{value:"<code>get_lifetime</code>",id:"get_lifetime",level:3},{value:"Possible use:",id:"possible-use-98",level:4},{value:"Result:",id:"result-92",level:4},{value:"Examples:",id:"examples-79",level:4},{value:"<code>get_liking</code>",id:"get_liking",level:3},{value:"Possible use:",id:"possible-use-99",level:4},{value:"Result:",id:"result-93",level:4},{value:"Examples:",id:"examples-80",level:4},{value:"<code>get_modality</code>",id:"get_modality",level:3},{value:"Possible use:",id:"possible-use-100",level:4},{value:"Result:",id:"result-94",level:4},{value:"Examples:",id:"examples-81",level:4},{value:"<code>get_obligation_op</code>",id:"get_obligation_op",level:3},{value:"Possible use:",id:"possible-use-101",level:4},{value:"Result:",id:"result-95",level:4},{value:"Examples:",id:"examples-82",level:4},{value:"<code>get_obligation_with_name_op</code>",id:"get_obligation_with_name_op",level:3},{value:"Possible use:",id:"possible-use-102",level:4},{value:"Result:",id:"result-96",level:4},{value:"Examples:",id:"examples-83",level:4},{value:"<code>get_obligations_op</code>",id:"get_obligations_op",level:3},{value:"Possible use:",id:"possible-use-103",level:4},{value:"Result:",id:"result-97",level:4},{value:"Examples:",id:"examples-84",level:4},{value:"<code>get_obligations_with_name_op</code>",id:"get_obligations_with_name_op",level:3},{value:"Possible use:",id:"possible-use-104",level:4},{value:"Result:",id:"result-98",level:4},{value:"Examples:",id:"examples-85",level:4},{value:"<code>get_plan_name</code>",id:"get_plan_name",level:3},{value:"Possible use:",id:"possible-use-105",level:4},{value:"Result:",id:"result-99",level:4},{value:"Examples:",id:"examples-86",level:4},{value:"<code>get_predicate</code>",id:"get_predicate",level:3},{value:"Possible use:",id:"possible-use-106",level:4},{value:"Result:",id:"result-100",level:4},{value:"Examples:",id:"examples-87",level:4},{value:"<code>get_solidarity</code>",id:"get_solidarity",level:3},{value:"Possible use:",id:"possible-use-107",level:4},{value:"Result:",id:"result-101",level:4},{value:"Examples:",id:"examples-88",level:4},{value:"<code>get_strength</code>",id:"get_strength",level:3},{value:"Possible use:",id:"possible-use-108",level:4},{value:"Result:",id:"result-102",level:4},{value:"Examples:",id:"examples-89",level:4},{value:"<code>get_super_intention</code>",id:"get_super_intention",level:3},{value:"Possible use:",id:"possible-use-109",level:4},{value:"Result:",id:"result-103",level:4},{value:"Examples:",id:"examples-90",level:4},{value:"<code>get_trust</code>",id:"get_trust",level:3},{value:"Possible use:",id:"possible-use-110",level:4},{value:"Result:",id:"result-104",level:4},{value:"Examples:",id:"examples-91",level:4},{value:"<code>get_truth</code>",id:"get_truth",level:3},{value:"Possible use:",id:"possible-use-111",level:4},{value:"Result:",id:"result-105",level:4},{value:"Examples:",id:"examples-92",level:4},{value:"<code>get_uncertainties_op</code>",id:"get_uncertainties_op",level:3},{value:"Possible use:",id:"possible-use-112",level:4},{value:"Result:",id:"result-106",level:4},{value:"Examples:",id:"examples-93",level:4},{value:"<code>get_uncertainties_with_name_op</code>",id:"get_uncertainties_with_name_op",level:3},{value:"Possible use:",id:"possible-use-113",level:4},{value:"Result:",id:"result-107",level:4},{value:"Examples:",id:"examples-94",level:4},{value:"<code>get_uncertainty_op</code>",id:"get_uncertainty_op",level:3},{value:"Possible use:",id:"possible-use-114",level:4},{value:"Result:",id:"result-108",level:4},{value:"Examples:",id:"examples-95",level:4},{value:"<code>get_uncertainty_with_name_op</code>",id:"get_uncertainty_with_name_op",level:3},{value:"Possible use:",id:"possible-use-115",level:4},{value:"Result:",id:"result-109",level:4},{value:"Examples:",id:"examples-96",level:4},{value:"<code>get_values</code>",id:"get_values",level:3},{value:"Possible use:",id:"possible-use-116",level:4},{value:"Result:",id:"result-110",level:4},{value:"Examples:",id:"examples-97",level:4},{value:"<code>gif_file</code>",id:"gif_file",level:3},{value:"Possible use:",id:"possible-use-117",level:4},{value:"Result:",id:"result-111",level:4},{value:"Special cases:",id:"special-cases-27",level:4},{value:"See also:",id:"see-also-37",level:4},{value:"<code>gini</code>",id:"gini",level:3},{value:"Possible use:",id:"possible-use-118",level:4},{value:"Special cases:",id:"special-cases-28",level:4},{value:"<code>gml_file</code>",id:"gml_file",level:3},{value:"Possible use:",id:"possible-use-119",level:4},{value:"Result:",id:"result-112",level:4},{value:"Special cases:",id:"special-cases-29",level:4},{value:"See also:",id:"see-also-38",level:4},{value:"<code>graph</code>",id:"graph",level:3},{value:"Possible use:",id:"possible-use-120",level:4},{value:"<code>grayscale</code>",id:"grayscale",level:3},{value:"Possible use:",id:"possible-use-121",level:4},{value:"Result:",id:"result-113",level:4},{value:"Comment:",id:"comment-13",level:4},{value:"Examples:",id:"examples-98",level:4},{value:"See also:",id:"see-also-39",level:4},{value:"<code>grid_at</code>",id:"grid_at",level:3},{value:"Possible use:",id:"possible-use-122",level:4},{value:"Result:",id:"result-114",level:4},{value:"Comment:",id:"comment-14",level:4},{value:"Special cases:",id:"special-cases-30",level:4},{value:"Examples:",id:"examples-99",level:4},{value:"<code>grid_cells_to_graph</code>",id:"grid_cells_to_graph",level:3},{value:"Possible use:",id:"possible-use-123",level:4},{value:"Result:",id:"result-115",level:4},{value:"Examples:",id:"examples-100",level:4},{value:"See also:",id:"see-also-40",level:4},{value:"<code>grid_file</code>",id:"grid_file",level:3},{value:"Possible use:",id:"possible-use-124",level:4},{value:"Result:",id:"result-116",level:4},{value:"Special cases:",id:"special-cases-31",level:4},{value:"See also:",id:"see-also-41",level:4},{value:"<code>group_by</code>",id:"group_by",level:3},{value:"Possible use:",id:"possible-use-125",level:4},{value:"Result:",id:"result-117",level:4},{value:"Comment:",id:"comment-15",level:4},{value:"Special cases:",id:"special-cases-32",level:4},{value:"Examples:",id:"examples-101",level:4},{value:"See also:",id:"see-also-42",level:4},{value:"<code>harmonic_mean</code>",id:"harmonic_mean",level:3},{value:"Possible use:",id:"possible-use-126",level:4},{value:"Result:",id:"result-118",level:4},{value:"Comment:",id:"comment-16",level:4},{value:"Examples:",id:"examples-102",level:4},{value:"See also:",id:"see-also-43",level:4},{value:"<code>has_belief_op</code>",id:"has_belief_op",level:3},{value:"Possible use:",id:"possible-use-127",level:4},{value:"Result:",id:"result-119",level:4},{value:"Examples:",id:"examples-103",level:4},{value:"<code>has_belief_with_name_op</code>",id:"has_belief_with_name_op",level:3},{value:"Possible use:",id:"possible-use-128",level:4},{value:"Result:",id:"result-120",level:4},{value:"Examples:",id:"examples-104",level:4},{value:"<code>has_desire_op</code>",id:"has_desire_op",level:3},{value:"Possible use:",id:"possible-use-129",level:4},{value:"Result:",id:"result-121",level:4},{value:"Examples:",id:"examples-105",level:4},{value:"<code>has_desire_with_name_op</code>",id:"has_desire_with_name_op",level:3},{value:"Possible use:",id:"possible-use-130",level:4},{value:"Result:",id:"result-122",level:4},{value:"Examples:",id:"examples-106",level:4},{value:"<code>has_ideal_op</code>",id:"has_ideal_op",level:3},{value:"Possible use:",id:"possible-use-131",level:4},{value:"Result:",id:"result-123",level:4},{value:"Examples:",id:"examples-107",level:4},{value:"<code>has_ideal_with_name_op</code>",id:"has_ideal_with_name_op",level:3},{value:"Possible use:",id:"possible-use-132",level:4},{value:"Result:",id:"result-124",level:4},{value:"Examples:",id:"examples-108",level:4},{value:"<code>has_intention_op</code>",id:"has_intention_op",level:3},{value:"Possible use:",id:"possible-use-133",level:4},{value:"Result:",id:"result-125",level:4},{value:"Examples:",id:"examples-109",level:4},{value:"<code>has_intention_with_name_op</code>",id:"has_intention_with_name_op",level:3},{value:"Possible use:",id:"possible-use-134",level:4},{value:"Result:",id:"result-126",level:4},{value:"Examples:",id:"examples-110",level:4},{value:"<code>has_obligation_op</code>",id:"has_obligation_op",level:3},{value:"Possible use:",id:"possible-use-135",level:4},{value:"Result:",id:"result-127",level:4},{value:"Examples:",id:"examples-111",level:4},{value:"<code>has_obligation_with_name_op</code>",id:"has_obligation_with_name_op",level:3},{value:"Possible use:",id:"possible-use-136",level:4},{value:"Result:",id:"result-128",level:4},{value:"Examples:",id:"examples-112",level:4},{value:"<code>has_uncertainty_op</code>",id:"has_uncertainty_op",level:3},{value:"Possible use:",id:"possible-use-137",level:4},{value:"Result:",id:"result-129",level:4},{value:"Examples:",id:"examples-113",level:4},{value:"<code>has_uncertainty_with_name_op</code>",id:"has_uncertainty_with_name_op",level:3},{value:"Possible use:",id:"possible-use-138",level:4},{value:"Result:",id:"result-130",level:4},{value:"Examples:",id:"examples-114",level:4},{value:"<code>hexagon</code>",id:"hexagon",level:3},{value:"Possible use:",id:"possible-use-139",level:4},{value:"Result:",id:"result-131",level:4},{value:"Comment:",id:"comment-17",level:4},{value:"Special cases:",id:"special-cases-33",level:4},{value:"Examples:",id:"examples-115",level:4},{value:"See also:",id:"see-also-44",level:4},{value:"<code>hierarchical_clustering</code>",id:"hierarchical_clustering",level:3},{value:"Possible use:",id:"possible-use-140",level:4},{value:"Result:",id:"result-132",level:4},{value:"Comment:",id:"comment-18",level:4},{value:"Examples:",id:"examples-116",level:4},{value:"See also:",id:"see-also-45",level:4},{value:"<code>horizontal</code>",id:"horizontal",level:3},{value:"Possible use:",id:"possible-use-141",level:4},{value:"<code>hsb</code>",id:"hsb",level:3},{value:"Possible use:",id:"possible-use-142",level:4},{value:"Result:",id:"result-133",level:4},{value:"Comment:",id:"comment-19",level:4},{value:"Examples:",id:"examples-117",level:4},{value:"See also:",id:"see-also-46",level:4},{value:"<code>hypot</code>",id:"hypot",level:3},{value:"Possible use:",id:"possible-use-143",level:4},{value:"Result:",id:"result-134",level:4},{value:"Special cases:",id:"special-cases-34",level:4},{value:"Examples:",id:"examples-118",level:4}],k={toc:d},u="wrapper";function h(e){var t=e.components,a=(0,l.Z)(e,r);return(0,i.kt)(u,(0,n.Z)({},k,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"This file is automatically generated from java files. Do Not Edit It.")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"definition"},"Definition"),(0,i.kt)("p",null,"Operators in the GAML language are used to compose complex expressions. An operator performs a function on one, two, or n operands (which are other expressions and thus may be themselves composed of operators) and returns the result of this function. "),(0,i.kt)("p",null,"Most of them use a classical prefixed functional syntax (i.e. ",(0,i.kt)("inlineCode",{parentName:"p"},"operator_name(operand1, operand2, operand3)"),", see below), with the exception of arithmetic (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"+"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"/"),"), logical (",(0,i.kt)("inlineCode",{parentName:"p"},"and"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"or"),"), comparison (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},">"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"<"),"), access (",(0,i.kt)("inlineCode",{parentName:"p"},"."),", ",(0,i.kt)("inlineCode",{parentName:"p"},"[..]"),") and pair (",(0,i.kt)("inlineCode",{parentName:"p"},"::"),") operators, which require an infixed notation (i.e. ",(0,i.kt)("inlineCode",{parentName:"p"},"operand1 operator_symbol operand1"),"). "),(0,i.kt)("p",null,"The ternary functional if-else operator, ",(0,i.kt)("inlineCode",{parentName:"p"},"? :"),", uses a special infixed syntax composed with two symbols (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"operand1 ? operand2 : operand3"),"). Two unary operators (",(0,i.kt)("inlineCode",{parentName:"p"},"-")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"!"),") use a traditional prefixed syntax that does not require parentheses unless the operand is itself a complex expression (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"}," - 10"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"! (operand1 or operand2)"),"). "),(0,i.kt)("p",null,"Finally, special constructor operators (",(0,i.kt)("inlineCode",{parentName:"p"},"{...}")," for constructing points, ",(0,i.kt)("inlineCode",{parentName:"p"},"[...]")," for constructing lists and maps) will require their operands to be placed between their two symbols (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"{1,2,3}"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"[operand1, operand2, ..., operandn]")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"[key1::value1, key2::value2... keyn::valuen]"),")."),(0,i.kt)("p",null,"With the exception of these special cases above, the following rules apply to the syntax of operators:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"if they only have one operand, the functional prefixed syntax is mandatory (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"operator_name(operand1)"),")"),(0,i.kt)("li",{parentName:"ul"},"if they have two arguments, either the functional prefixed syntax (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"operator_name(operand1, operand2)"),") or the infixed syntax (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"operand1 operator_name operand2"),") can be used."),(0,i.kt)("li",{parentName:"ul"},"if they have more than two arguments, either the functional prefixed syntax (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"operator_name(operand1, operand2, ..., operand)"),") or a special infixed syntax with the first operand on the left-hand side of the operator name (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"operand1 operator_name(operand2, ..., operand)"),") can be used.")),(0,i.kt)("p",null,"All of these alternative syntaxes are completely equivalent."),(0,i.kt)("p",null,"Operators in GAML are purely functional, i.e. they are guaranteed to not have any side effects on their operands. For instance, the ",(0,i.kt)("inlineCode",{parentName:"p"},"shuffle")," operator, which randomizes the positions of elements in a list, does not modify its list operand but returns a new shuffled list."),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"priority-between-operators"},"Priority between operators"),(0,i.kt)("p",null,"The priority of operators determines, in the case of complex expressions composed of several operators, which one(s) will be evaluated first."),(0,i.kt)("p",null,"GAML follows in general the traditional priorities attributed to arithmetic, boolean, comparison operators, with some twists. Namely:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the constructor operators, like ",(0,i.kt)("inlineCode",{parentName:"li"},"::"),", used to compose pairs of operands, have the lowest priority of all operators (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"a > b :: b > c")," will return a pair of boolean values, which means that the two comparisons are evaluated before the operator applies. Similarly, ",(0,i.kt)("inlineCode",{parentName:"li"},"[a > 10, b > 5]")," will return a list of boolean values."),(0,i.kt)("li",{parentName:"ul"},"it is followed by the ",(0,i.kt)("inlineCode",{parentName:"li"},"?:")," operator, the functional if-else (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"}," a > b ? a + 10 : a - 10")," will return the result of the if-else)."),(0,i.kt)("li",{parentName:"ul"},"next are the logical operators, ",(0,i.kt)("inlineCode",{parentName:"li"},"and")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"or")," (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"a > b or b > c")," will return the value of the test)"),(0,i.kt)("li",{parentName:"ul"},"next are the comparison operators (i.e. ",(0,i.kt)("inlineCode",{parentName:"li"},">"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"<"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"<="),", ",(0,i.kt)("inlineCode",{parentName:"li"},">="),", ",(0,i.kt)("inlineCode",{parentName:"li"},"="),", ",(0,i.kt)("inlineCode",{parentName:"li"},"!="),")"),(0,i.kt)("li",{parentName:"ul"},"next the arithmetic operators in their logical order (multiplicative operators have a higher priority than additive operators)"),(0,i.kt)("li",{parentName:"ul"},"next the unary operators ",(0,i.kt)("inlineCode",{parentName:"li"},"-")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"!")),(0,i.kt)("li",{parentName:"ul"},"next the access operators ",(0,i.kt)("inlineCode",{parentName:"li"},".")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"[]")," (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"{1,2,3}.x > 20 + {4,5,6}.y")," will return the result of the comparison between the x and y ordinates of the two points)"),(0,i.kt)("li",{parentName:"ul"},"and finally the functional operators, which have the highest priority of all.")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"using-actions-as-operators"},"Using actions as operators"),(0,i.kt)("p",null,"Actions defined in species can be used as operators, provided they are called on the correct agent. The syntax is that of normal functional operators, but the agent that will perform the action must be added as the first operand."),(0,i.kt)("p",null,"For instance, if the following species is defined:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"species spec1 {\n        int min(int x, int y) {\n                return x > y ? x : y;\n        }\n}\n")),(0,i.kt)("p",null,"Any agent instance of spec1 can use ",(0,i.kt)("inlineCode",{parentName:"p"},"min")," as an operator (if the action conflicts with an existing operator, a warning will be emitted). For instance, in the same model, the following line is perfectly acceptable:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"global {\n        init {\n                create spec1;\n                spec1 my_agent <- spec1[0];\n                int the_min <- my_agent min(10,20); // or min(my_agent, 10, 20);\n        }\n}\n")),(0,i.kt)("p",null,"If the action doesn't have any operands, the syntax to use is ",(0,i.kt)("inlineCode",{parentName:"p"},"my_agent the_action()"),". Finally, if it does not return a value, it might still be used but is considering as returning a value of type ",(0,i.kt)("inlineCode",{parentName:"p"},"unknown")," (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"unknown result <- my_agent the_action(op1, op2);"),")."),(0,i.kt)("p",null,"Note that due to the fact that actions are written by modelers, the general functional contract is not respected in that case: actions might perfectly have side effects on their operands (including the agent)."),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"table-of-contents"},"Table of Contents"),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"operators-by-categories"},"Operators by categories"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"3d"},"3D"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#box"},"box"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#cone3d"},"cone3D"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#cube"},"cube"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#cylinder"},"cylinder"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#dem"},"dem"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#hexagon"},"hexagon"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#pyramid"},"pyramid"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#set_z"},"set_z"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#sphere"},"sphere"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#teapot"},"teapot"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"arithmetic-operators"},"Arithmetic operators"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#-"},"-"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#/"},"/"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#%5E"},"^"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#*"},"*"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#+"},"+"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#abs"},"abs"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#acos"},"acos"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#asin"},"asin"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#atan"},"atan"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#atan2"},"atan2"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#ceil"},"ceil"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#cos"},"cos"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#cos_rad"},"cos_rad"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#div"},"div"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#even"},"even"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#exp"},"exp"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#fact"},"fact"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#floor"},"floor"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#hypot"},"hypot"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#is_finite"},"is_finite"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#is_number"},"is_number"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#ln"},"ln"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#log"},"log"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#mod"},"mod"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#round"},"round"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#signum"},"signum"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#sin"},"sin"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#sin_rad"},"sin_rad"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#sqrt"},"sqrt"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#tan"},"tan"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#tan_rad"},"tan_rad"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#tanh"},"tanh"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#with_precision"},"with_precision"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"bdi"},"BDI"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#add_values"},"add_values"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#and"},"and"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#eval_when"},"eval_when"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_about"},"get_about"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_agent"},"get_agent"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_agent_cause"},"get_agent_cause"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_belief_op"},"get_belief_op"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_belief_with_name_op"},"get_belief_with_name_op"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_beliefs_op"},"get_beliefs_op"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_beliefs_with_name_op"},"get_beliefs_with_name_op"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_current_intention_op"},"get_current_intention_op"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_decay"},"get_decay"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_desire_op"},"get_desire_op"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_desire_with_name_op"},"get_desire_with_name_op"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_desires_op"},"get_desires_op"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_desires_with_name_op"},"get_desires_with_name_op"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_dominance"},"get_dominance"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_familiarity"},"get_familiarity"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_ideal_op"},"get_ideal_op"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_ideal_with_name_op"},"get_ideal_with_name_op"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_ideals_op"},"get_ideals_op"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_ideals_with_name_op"},"get_ideals_with_name_op"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_intensity"},"get_intensity"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_intention_op"},"get_intention_op"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_intention_with_name_op"},"get_intention_with_name_op"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_intentions_op"},"get_intentions_op"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_intentions_with_name_op"},"get_intentions_with_name_op"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_lifetime"},"get_lifetime"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_liking"},"get_liking"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_modality"},"get_modality"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_obligation_op"},"get_obligation_op"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_obligation_with_name_op"},"get_obligation_with_name_op"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_obligations_op"},"get_obligations_op"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_obligations_with_name_op"},"get_obligations_with_name_op"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_plan_name"},"get_plan_name"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_predicate"},"get_predicate"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_solidarity"},"get_solidarity"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_strength"},"get_strength"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_super_intention"},"get_super_intention"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_trust"},"get_trust"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_truth"},"get_truth"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_uncertainties_op"},"get_uncertainties_op"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_uncertainties_with_name_op"},"get_uncertainties_with_name_op"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_uncertainty_op"},"get_uncertainty_op"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_uncertainty_with_name_op"},"get_uncertainty_with_name_op"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get_values"},"get_values"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#has_belief_op"},"has_belief_op"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#has_belief_with_name_op"},"has_belief_with_name_op"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#has_desire_op"},"has_desire_op"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#has_desire_with_name_op"},"has_desire_with_name_op"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#has_ideal_op"},"has_ideal_op"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#has_ideal_with_name_op"},"has_ideal_with_name_op"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#has_intention_op"},"has_intention_op"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#has_intention_with_name_op"},"has_intention_with_name_op"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#has_obligation_op"},"has_obligation_op"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#has_obligation_with_name_op"},"has_obligation_with_name_op"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#has_uncertainty_op"},"has_uncertainty_op"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#has_uncertainty_with_name_op"},"has_uncertainty_with_name_op"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#new_emotion"},"new_emotion"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#new_mental_state"},"new_mental_state"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#new_predicate"},"new_predicate"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#new_social_link"},"new_social_link"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#not"},"not"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#or"},"or"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#set_about"},"set_about"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#set_agent"},"set_agent"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#set_agent_cause"},"set_agent_cause"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#set_decay"},"set_decay"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#set_dominance"},"set_dominance"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#set_familiarity"},"set_familiarity"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#set_intensity"},"set_intensity"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#set_lifetime"},"set_lifetime"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#set_liking"},"set_liking"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#set_modality"},"set_modality"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#set_predicate"},"set_predicate"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#set_solidarity"},"set_solidarity"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#set_strength"},"set_strength"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#set_trust"},"set_trust"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#set_truth"},"set_truth"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#with_values"},"with_values"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"casting-operators"},"Casting operators"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#as"},"as"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#as_int"},"as_int"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#as_matrix"},"as_matrix"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#font"},"font"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#is"},"is"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#is_skill"},"is_skill"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#list_with"},"list_with"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#matrix_with"},"matrix_with"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#species"},"species"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#to_gaml"},"to_gaml"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#topology"},"topology"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"color-related-operators"},"Color-related operators"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#-"},"-"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#/"},"/"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#*"},"*"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#+"},"+"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#blend"},"blend"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#brewer_colors"},"brewer_colors"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#brewer_palettes"},"brewer_palettes"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#grayscale"},"grayscale"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#hsb"},"hsb"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#mean"},"mean"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#median"},"median"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#rgb"},"rgb"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#rnd_color"},"rnd_color"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#sum"},"sum"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"comparison-operators"},"Comparison operators"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#!="},"!="),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#%3C"},"<"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#%3C="},"<="),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#="},"="),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#%3E"},">"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#%3E="},">="),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#between"},"between"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"containers-related-operators"},"Containers-related operators"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#-"},"-"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#::"},"::"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#+"},"+"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#accumulate"},"accumulate"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#all_match"},"all_match"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#among"},"among"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#at"},"at"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#collect"},"collect"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#contains"},"contains"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#contains_all"},"contains_all"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#contains_any"},"contains_any"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#contains_key"},"contains_key"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#count"},"count"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#distinct"},"distinct"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#empty"},"empty"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#every"},"every"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#first"},"first"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#first_with"},"first_with"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get"},"get"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#group_by"},"group_by"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#in"},"in"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#index_by"},"index_by"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#inter"},"inter"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#interleave"},"interleave"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#internal_at"},"internal_at"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#internal_integrated_value"},"internal_integrated_value"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#last"},"last"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#last_with"},"last_with"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#length"},"length"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#max"},"max"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#max_of"},"max_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#mean"},"mean"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#mean_of"},"mean_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#median"},"median"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#min"},"min"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#min_of"},"min_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#mul"},"mul"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#none_matches"},"none_matches"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#one_matches"},"one_matches"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#one_of"},"one_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#product_of"},"product_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#range"},"range"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#reverse"},"reverse"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#shuffle"},"shuffle"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#sort_by"},"sort_by"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#split"},"split"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#split_in"},"split_in"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#split_using"},"split_using"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#sum"},"sum"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#sum_of"},"sum_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#union"},"union"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#variance_of"},"variance_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#where"},"where"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#with_max_of"},"with_max_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#with_min_of"},"with_min_of"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"date-related-operators"},"Date-related operators"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#-"},"-"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#!="},"!="),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#+"},"+"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#%3C"},"<"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#%3C="},"<="),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#="},"="),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#%3E"},">"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#%3E="},">="),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#after"},"after"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#before"},"before"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#between"},"between"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#every"},"every"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#milliseconds_between"},"milliseconds_between"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#minus_days"},"minus_days"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#minus_hours"},"minus_hours"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#minus_minutes"},"minus_minutes"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#minus_months"},"minus_months"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#minus_ms"},"minus_ms"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#minus_weeks"},"minus_weeks"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#minus_years"},"minus_years"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#months_between"},"months_between"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#plus_days"},"plus_days"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#plus_hours"},"plus_hours"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#plus_minutes"},"plus_minutes"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#plus_months"},"plus_months"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#plus_ms"},"plus_ms"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#plus_weeks"},"plus_weeks"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#plus_years"},"plus_years"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#since"},"since"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#to"},"to"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#until"},"until"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#years_between"},"years_between"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"dates"},"Dates"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"displays"},"Displays"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#horizontal"},"horizontal"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#stack"},"stack"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#vertical"},"vertical"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"driving-operators"},"Driving operators"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#as_driving_graph"},"as_driving_graph"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"edge"},"edge"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#edge_between"},"edge_between"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#strahler"},"strahler"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"edp-related-operators"},"EDP-related operators"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#diff"},"diff"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#diff2"},"diff2"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"files-related-operators"},"Files-related operators"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#crs"},"crs"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#csv_file"},"csv_file"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#dxf_file"},"dxf_file"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#evaluate_sub_model"},"evaluate_sub_model"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#file_exists"},"file_exists"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#folder"},"folder"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#folder_exists"},"folder_exists"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#gaml_file"},"gaml_file"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#geojson_file"},"geojson_file"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#get"},"get"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#gif_file"},"gif_file"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#gml_file"},"gml_file"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#grid_file"},"grid_file"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#image_file"},"image_file"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#is_csv"},"is_csv"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#is_dxf"},"is_dxf"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#is_gaml"},"is_gaml"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#is_geojson"},"is_geojson"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#is_gif"},"is_gif"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#is_gml"},"is_gml"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#is_grid"},"is_grid"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#is_image"},"is_image"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#is_json"},"is_json"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#is_obj"},"is_obj"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#is_osm"},"is_osm"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#is_pgm"},"is_pgm"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#is_property"},"is_property"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#is_r"},"is_R"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#is_saved_simulation"},"is_saved_simulation"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#is_shape"},"is_shape"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#is_svg"},"is_svg"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#is_text"},"is_text"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#is_threeds"},"is_threeds"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#is_xml"},"is_xml"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#json_file"},"json_file"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#new_folder"},"new_folder"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#obj_file"},"obj_file"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#osm_file"},"osm_file"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#pgm_file"},"pgm_file"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#property_file"},"property_file"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#r_file"},"R_file"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#read"},"read"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#saved_simulation_file"},"saved_simulation_file"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#shape_file"},"shape_file"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#step_sub_model"},"step_sub_model"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#svg_file"},"svg_file"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#text_file"},"text_file"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#threeds_file"},"threeds_file"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#writable"},"writable"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#xml_file"},"xml_file"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"fipa-related-operators"},"FIPA-related operators"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#conversation"},"conversation"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#message"},"message"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"gamametatype"},"GamaMetaType"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#type_of"},"type_of"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"graphs-related-operators"},"Graphs-related operators"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#add_edge"},"add_edge"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#add_node"},"add_node"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#adjacency"},"adjacency"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#agent_from_geometry"},"agent_from_geometry"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#all_pairs_shortest_path"},"all_pairs_shortest_path"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#alpha_index"},"alpha_index"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#as_distance_graph"},"as_distance_graph"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#as_edge_graph"},"as_edge_graph"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#as_intersection_graph"},"as_intersection_graph"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#as_path"},"as_path"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#beta_index"},"beta_index"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#betweenness_centrality"},"betweenness_centrality"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#biggest_cliques_of"},"biggest_cliques_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#connected_components_of"},"connected_components_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#connectivity_index"},"connectivity_index"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#contains_edge"},"contains_edge"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#contains_vertex"},"contains_vertex"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#degree_of"},"degree_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#directed"},"directed"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#edge"},"edge"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#edge_between"},"edge_between"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#edge_betweenness"},"edge_betweenness"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#edges"},"edges"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#gamma_index"},"gamma_index"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#generate_barabasi_albert"},"generate_barabasi_albert"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#generate_complete_graph"},"generate_complete_graph"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#generate_watts_strogatz"},"generate_watts_strogatz"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#grid_cells_to_graph"},"grid_cells_to_graph"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#in_degree_of"},"in_degree_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#in_edges_of"},"in_edges_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#layout_circle"},"layout_circle"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#layout_force"},"layout_force"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#layout_grid"},"layout_grid"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#load_graph_from_file"},"load_graph_from_file"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#load_shortest_paths"},"load_shortest_paths"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#main_connected_component"},"main_connected_component"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#max_flow_between"},"max_flow_between"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#maximal_cliques_of"},"maximal_cliques_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#nb_cycles"},"nb_cycles"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#neighbors_of"},"neighbors_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#node"},"node"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#nodes"},"nodes"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#out_degree_of"},"out_degree_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#out_edges_of"},"out_edges_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#path_between"},"path_between"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#paths_between"},"paths_between"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#predecessors_of"},"predecessors_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#remove_node_from"},"remove_node_from"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#rewire_n"},"rewire_n"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#source_of"},"source_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#spatial_graph"},"spatial_graph"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#strahler"},"strahler"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#successors_of"},"successors_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#sum"},"sum"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#target_of"},"target_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#undirected"},"undirected"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#use_cache"},"use_cache"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#weight_of"},"weight_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#with_optimizer_type"},"with_optimizer_type"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#with_weights"},"with_weights"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"grid-related-operators"},"Grid-related operators"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#as_4_grid"},"as_4_grid"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#as_grid"},"as_grid"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#as_hexagonal_grid"},"as_hexagonal_grid"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#grid_at"},"grid_at"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#path_between"},"path_between"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"iterator-operators"},"Iterator operators"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#accumulate"},"accumulate"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#all_match"},"all_match"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#as_map"},"as_map"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#collect"},"collect"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#count"},"count"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#create_map"},"create_map"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#first_with"},"first_with"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#frequency_of"},"frequency_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#group_by"},"group_by"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#index_by"},"index_by"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#last_with"},"last_with"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#max_of"},"max_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#mean_of"},"mean_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#min_of"},"min_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#none_matches"},"none_matches"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#one_matches"},"one_matches"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#product_of"},"product_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#sort_by"},"sort_by"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#sum_of"},"sum_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#variance_of"},"variance_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#where"},"where"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#with_max_of"},"with_max_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#with_min_of"},"with_min_of"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"list-related-operators"},"List-related operators"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#all_indexes_of"},"all_indexes_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#copy_between"},"copy_between"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#index_of"},"index_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#last_index_of"},"last_index_of"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"logical-operators"},"Logical operators"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#:"},":"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#!"},"!"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#?"},"?"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#add_3dmodel"},"add_3Dmodel"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#add_geometry"},"add_geometry"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#add_icon"},"add_icon"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#and"},"and"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#or"},"or"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#xor"},"xor"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"map-comparaison-operators"},"Map comparaison operators"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#fuzzy_kappa"},"fuzzy_kappa"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#fuzzy_kappa_sim"},"fuzzy_kappa_sim"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#kappa"},"kappa"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#kappa_sim"},"kappa_sim"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#percent_absolute_deviation"},"percent_absolute_deviation"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"map-related-operators"},"Map-related operators"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#as_map"},"as_map"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#create_map"},"create_map"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#index_of"},"index_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#last_index_of"},"last_index_of"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"material"},"Material"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#material"},"material"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"matrix-related-operators"},"Matrix-related operators"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#-"},"-"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#/"},"/"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#."},"."),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#*"},"*"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#+"},"+"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#append_horizontally"},"append_horizontally"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#append_vertically"},"append_vertically"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#column_at"},"column_at"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#columns_list"},"columns_list"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#determinant"},"determinant"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#eigenvalues"},"eigenvalues"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#index_of"},"index_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#inverse"},"inverse"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#last_index_of"},"last_index_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#row_at"},"row_at"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#rows_list"},"rows_list"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#shuffle"},"shuffle"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#trace"},"trace"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#transpose"},"transpose"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"multicriteria-operators"},"multicriteria operators"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#electre_dm"},"electre_DM"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#evidence_theory_dm"},"evidence_theory_DM"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#fuzzy_choquet_dm"},"fuzzy_choquet_DM"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#promethee_dm"},"promethee_DM"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#weighted_means_dm"},"weighted_means_DM"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"path-related-operators"},"Path-related operators"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#agent_from_geometry"},"agent_from_geometry"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#all_pairs_shortest_path"},"all_pairs_shortest_path"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#as_path"},"as_path"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#load_shortest_paths"},"load_shortest_paths"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#max_flow_between"},"max_flow_between"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#path_between"},"path_between"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#path_to"},"path_to"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#paths_between"},"paths_between"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#use_cache"},"use_cache"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"points-related-operators"},"Points-related operators"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#-"},"-"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#/"},"/"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#*"},"*"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#+"},"+"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#%3C"},"<"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#%3C="},"<="),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#%3E"},">"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#%3E="},">="),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#add_point"},"add_point"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#angle_between"},"angle_between"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#any_location_in"},"any_location_in"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#centroid"},"centroid"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#closest_points_with"},"closest_points_with"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#farthest_point_to"},"farthest_point_to"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#grid_at"},"grid_at"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#norm"},"norm"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#points_along"},"points_along"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#points_at"},"points_at"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#points_on"},"points_on"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"random-operators"},"Random operators"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#binomial"},"binomial"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#flip"},"flip"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#gamma_density"},"gamma_density"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#gamma_rnd"},"gamma_rnd"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#gamma_trunc_rnd"},"gamma_trunc_rnd"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#gauss"},"gauss"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#lognormal_density"},"lognormal_density"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#lognormal_rnd"},"lognormal_rnd"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#lognormal_trunc_rnd"},"lognormal_trunc_rnd"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#open_simplex_generator"},"open_simplex_generator"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#poisson"},"poisson"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#rnd"},"rnd"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#rnd_choice"},"rnd_choice"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#sample"},"sample"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#shuffle"},"shuffle"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#simplex_generator"},"simplex_generator"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#skew_gauss"},"skew_gauss"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#truncated_gauss"},"truncated_gauss"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#weibull_density"},"weibull_density"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#weibull_rnd"},"weibull_rnd"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#weibull_trunc_rnd"},"weibull_trunc_rnd"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"reverseoperators"},"ReverseOperators"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#restore_simulation"},"restore_simulation"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#restore_simulation_from_file"},"restore_simulation_from_file"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#save_agent"},"save_agent"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#save_simulation"},"save_simulation"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#serialize"},"serialize"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#serialize_agent"},"serialize_agent"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"shape"},"Shape"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#arc"},"arc"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#box"},"box"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#circle"},"circle"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#cone"},"cone"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#cone3d"},"cone3D"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#cross"},"cross"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#cube"},"cube"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#curve"},"curve"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#cylinder"},"cylinder"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#ellipse"},"ellipse"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#elliptical_arc"},"elliptical_arc"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#envelope"},"envelope"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#geometry_collection"},"geometry_collection"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#hexagon"},"hexagon"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#line"},"line"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#link"},"link"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#plan"},"plan"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#polygon"},"polygon"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#polyhedron"},"polyhedron"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#pyramid"},"pyramid"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#rectangle"},"rectangle"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#sphere"},"sphere"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#square"},"square"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#squircle"},"squircle"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#teapot"},"teapot"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#triangle"},"triangle"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"spatial-operators"},"Spatial operators"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#-"},"-"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#*"},"*"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#+"},"+"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#add_point"},"add_point"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#agent_closest_to"},"agent_closest_to"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#agent_farthest_to"},"agent_farthest_to"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#agents_at_distance"},"agents_at_distance"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#agents_inside"},"agents_inside"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#agents_overlapping"},"agents_overlapping"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#angle_between"},"angle_between"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#any_location_in"},"any_location_in"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#arc"},"arc"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#around"},"around"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#as_4_grid"},"as_4_grid"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#as_grid"},"as_grid"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#as_hexagonal_grid"},"as_hexagonal_grid"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#at_distance"},"at_distance"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#at_location"},"at_location"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#box"},"box"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#centroid"},"centroid"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#circle"},"circle"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#clean"},"clean"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#clean_network"},"clean_network"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#closest_points_with"},"closest_points_with"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#closest_to"},"closest_to"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#cone"},"cone"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#cone3d"},"cone3D"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#convex_hull"},"convex_hull"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#covers"},"covers"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#cross"},"cross"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#crosses"},"crosses"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#crs"},"crs"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#crs_transform"},"CRS_transform"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#cube"},"cube"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#curve"},"curve"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#cylinder"},"cylinder"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#dem"},"dem"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#direction_between"},"direction_between"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#disjoint_from"},"disjoint_from"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#distance_between"},"distance_between"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#distance_to"},"distance_to"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#ellipse"},"ellipse"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#elliptical_arc"},"elliptical_arc"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#envelope"},"envelope"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#farthest_point_to"},"farthest_point_to"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#farthest_to"},"farthest_to"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#geometry_collection"},"geometry_collection"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#gini"},"gini"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#hexagon"},"hexagon"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#hierarchical_clustering"},"hierarchical_clustering"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#idw"},"IDW"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#inside"},"inside"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#inter"},"inter"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#intersects"},"intersects"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#inverse_rotation"},"inverse_rotation"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#line"},"line"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#link"},"link"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#masked_by"},"masked_by"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#moran"},"moran"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#neighbors_at"},"neighbors_at"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#neighbors_of"},"neighbors_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#normalized_rotation"},"normalized_rotation"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#overlapping"},"overlapping"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#overlaps"},"overlaps"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#partially_overlaps"},"partially_overlaps"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#path_between"},"path_between"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#path_to"},"path_to"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#plan"},"plan"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#points_along"},"points_along"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#points_at"},"points_at"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#points_on"},"points_on"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#polygon"},"polygon"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#polyhedron"},"polyhedron"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#pyramid"},"pyramid"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#rectangle"},"rectangle"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#rotated_by"},"rotated_by"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#rotation_composition"},"rotation_composition"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#round"},"round"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#scaled_to"},"scaled_to"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#set_z"},"set_z"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#simple_clustering_by_distance"},"simple_clustering_by_distance"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#simplification"},"simplification"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#skeletonize"},"skeletonize"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#smooth"},"smooth"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#sphere"},"sphere"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#split_at"},"split_at"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#split_geometry"},"split_geometry"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#split_lines"},"split_lines"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#square"},"square"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#squircle"},"squircle"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#teapot"},"teapot"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#to_gama_crs"},"to_GAMA_CRS"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#to_rectangles"},"to_rectangles"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#to_segments"},"to_segments"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#to_squares"},"to_squares"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#to_sub_geometries"},"to_sub_geometries"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#touches"},"touches"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#towards"},"towards"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#transformed_by"},"transformed_by"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#translated_by"},"translated_by"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#triangle"},"triangle"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#triangulate"},"triangulate"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#union"},"union"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#using"},"using"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#voronoi"},"voronoi"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#with_precision"},"with_precision"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#without_holes"},"without_holes"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"spatial-properties-operators"},"Spatial properties operators"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#covers"},"covers"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#crosses"},"crosses"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#intersects"},"intersects"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#partially_overlaps"},"partially_overlaps"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#touches"},"touches"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"spatial-queries-operators"},"Spatial queries operators"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#agent_closest_to"},"agent_closest_to"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#agent_farthest_to"},"agent_farthest_to"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#agents_at_distance"},"agents_at_distance"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#agents_inside"},"agents_inside"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#agents_overlapping"},"agents_overlapping"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#at_distance"},"at_distance"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#closest_to"},"closest_to"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#farthest_to"},"farthest_to"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#inside"},"inside"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#neighbors_at"},"neighbors_at"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#neighbors_of"},"neighbors_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#overlapping"},"overlapping"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"spatial-relations-operators"},"Spatial relations operators"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#direction_between"},"direction_between"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#distance_between"},"distance_between"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#distance_to"},"distance_to"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#path_between"},"path_between"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#path_to"},"path_to"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#towards"},"towards"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"spatial-statistical-operators"},"Spatial statistical operators"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#hierarchical_clustering"},"hierarchical_clustering"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#simple_clustering_by_distance"},"simple_clustering_by_distance"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"spatial-transformations-operators"},"Spatial transformations operators"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#-"},"-"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#*"},"*"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#+"},"+"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#as_4_grid"},"as_4_grid"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#as_grid"},"as_grid"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#as_hexagonal_grid"},"as_hexagonal_grid"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#at_location"},"at_location"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#clean"},"clean"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#clean_network"},"clean_network"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#convex_hull"},"convex_hull"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#crs_transform"},"CRS_transform"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#inverse_rotation"},"inverse_rotation"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#normalized_rotation"},"normalized_rotation"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#rotated_by"},"rotated_by"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#rotation_composition"},"rotation_composition"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#scaled_to"},"scaled_to"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#simplification"},"simplification"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#skeletonize"},"skeletonize"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#smooth"},"smooth"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#split_geometry"},"split_geometry"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#split_lines"},"split_lines"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#to_gama_crs"},"to_GAMA_CRS"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#to_rectangles"},"to_rectangles"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#to_segments"},"to_segments"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#to_squares"},"to_squares"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#to_sub_geometries"},"to_sub_geometries"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#transformed_by"},"transformed_by"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#translated_by"},"translated_by"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#triangulate"},"triangulate"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#voronoi"},"voronoi"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#with_precision"},"with_precision"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#without_holes"},"without_holes"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"species-related-operators"},"Species-related operators"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#index_of"},"index_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#last_index_of"},"last_index_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#of_generic_species"},"of_generic_species"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#of_species"},"of_species"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"statistical-operators"},"Statistical operators"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#auto_correlation"},"auto_correlation"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#beta"},"beta"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#binomial_coeff"},"binomial_coeff"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#binomial_complemented"},"binomial_complemented"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#binomial_sum"},"binomial_sum"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#build"},"build"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#chi_square"},"chi_square"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#chi_square_complemented"},"chi_square_complemented"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#corr"},"corR"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#correlation"},"correlation"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#covariance"},"covariance"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#dbscan"},"dbscan"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#distribution_of"},"distribution_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#distribution2d_of"},"distribution2d_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#dtw"},"dtw"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#durbin_watson"},"durbin_watson"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#frequency_of"},"frequency_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#gamma"},"gamma"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#gamma_distribution"},"gamma_distribution"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#gamma_distribution_complemented"},"gamma_distribution_complemented"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#geometric_mean"},"geometric_mean"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#gini"},"gini"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#harmonic_mean"},"harmonic_mean"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#hierarchical_clustering"},"hierarchical_clustering"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#incomplete_beta"},"incomplete_beta"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#incomplete_gamma"},"incomplete_gamma"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#incomplete_gamma_complement"},"incomplete_gamma_complement"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#kmeans"},"kmeans"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#kurtosis"},"kurtosis"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#kurtosis"},"kurtosis"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#log_gamma"},"log_gamma"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#max"},"max"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#mean"},"mean"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#mean_deviation"},"mean_deviation"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#meanr"},"meanR"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#median"},"median"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#min"},"min"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#moment"},"moment"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#moran"},"moran"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#mul"},"mul"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#normal_area"},"normal_area"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#normal_density"},"normal_density"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#normal_inverse"},"normal_inverse"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#predict"},"predict"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#pvalue_for_fstat"},"pValue_for_fStat"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#pvalue_for_tstat"},"pValue_for_tStat"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#quantile"},"quantile"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#quantile_inverse"},"quantile_inverse"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#rank_interpolated"},"rank_interpolated"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#rms"},"rms"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#simple_clustering_by_distance"},"simple_clustering_by_distance"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#skew"},"skew"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#skewness"},"skewness"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#split"},"split"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#split_in"},"split_in"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#split_using"},"split_using"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#standard_deviation"},"standard_deviation"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#student_area"},"student_area"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#student_t_inverse"},"student_t_inverse"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#sum"},"sum"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#variance"},"variance"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#variance"},"variance"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"strings-related-operators"},"Strings-related operators"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#+"},"+"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#%3C"},"<"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#%3C="},"<="),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#%3E"},">"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#%3E="},">="),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#at"},"at"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#char"},"char"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#contains"},"contains"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#contains_all"},"contains_all"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#contains_any"},"contains_any"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#copy_between"},"copy_between"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#date"},"date"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#empty"},"empty"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#first"},"first"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#in"},"in"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#indented_by"},"indented_by"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#index_of"},"index_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#is_number"},"is_number"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#last"},"last"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#last_index_of"},"last_index_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#length"},"length"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#lower_case"},"lower_case"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#replace"},"replace"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#replace_regex"},"replace_regex"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#reverse"},"reverse"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#sample"},"sample"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#shuffle"},"shuffle"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#split_with"},"split_with"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#string"},"string"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#upper_case"},"upper_case"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"submodel"},"SubModel"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#load_sub_model"},"load_sub_model"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"system"},"System"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#."},"."),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#choose"},"choose"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#command"},"command"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#copy"},"copy"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#copy_to_clipboard"},"copy_to_clipboard"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#dead"},"dead"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#enter"},"enter"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#eval_gaml"},"eval_gaml"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#every"},"every"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#is_error"},"is_error"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#is_warning"},"is_warning"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#user_input"},"user_input"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"time-related-operators"},"Time-related operators"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#date"},"date"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#string"},"string"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"types-related-operators"},"Types-related operators"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#action"},"action"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#agent"},"agent"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#attributes"},"attributes"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#bdiplan"},"BDIPlan"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#bool"},"bool"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#container"},"container"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#emotion"},"emotion"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#file"},"file"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#float"},"float"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#gaml_type"},"gaml_type"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#geometry"},"geometry"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#graph"},"graph"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#int"},"int"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#kml"},"kml"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#list"},"list"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#map"},"map"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#material"},"material"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#matrix"},"matrix"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#mental_state"},"mental_state"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#norm"},"Norm"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#pair"},"pair"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#path"},"path"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#point"},"point"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#predicate"},"predicate"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#regression"},"regression"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#rgb"},"rgb"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#sanction"},"Sanction"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#skill"},"skill"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#social_link"},"social_link"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#topology"},"topology"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#unknown"},"unknown"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"user-control-operators"},"User control operators"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#choose"},"choose"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#enter"},"enter"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#user_input"},"user_input"),", "),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"operators"},"Operators"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"date"},(0,i.kt)("inlineCode",{parentName:"h3"},"date")),(0,i.kt)("h4",{id:"possible-use"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"string")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"date"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"string")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"date")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"date"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"date")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"date"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"date")," ")),(0,i.kt)("h4",{id:"result"},"Result:"),(0,i.kt)("p",null,"converts a string to a date following a custom pattern. The pattern can use \"%Y %M %N %D %E %h %m %s %z\" for outputting years, months, name of month, days, name of days, hours, minutes, seconds and the time-zone. A null or empty pattern will parse the date using one of the ISO date & time formats (similar to date('...') in that case). The pattern can also follow the pattern definition found here, which gives much more control over what will be parsed: ",(0,i.kt)("a",{parentName:"p",href:"https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#patterns"},"https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#patterns"),". Different patterns are available by default as constant: #iso_local, #iso_simple, #iso_offset, #iso_zoned and #custom, which can be changed in the preferences\nconverts a string to a date following a custom pattern and a specific locale (e.g. 'fr', 'en'...). The pattern can use \"%Y %M %N %D %E %h %m %s %z\" for parsing years, months, name of month, days, name of days, hours, minutes, seconds and the time-zone. A null or empty pattern will parse the date using one of the ISO date & time formats (similar to date('...') in that case). The pattern can also follow the pattern definition found here, which gives much more control over what will be parsed: ",(0,i.kt)("a",{parentName:"p",href:"https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#patterns"},"https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#patterns"),". Different patterns are available by default as constant: #iso_local, #iso_simple, #iso_offset, #iso_zoned and #custom, which can be changed in the preferences"),(0,i.kt)("h4",{id:"examples"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \ndate den <- date(\"1999-12-30\", 'yyyy-MM-dd'); \ndate d <- date(\"1999-january-30\", 'yyyy-MMMM-dd', 'en');\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"dbscan"},(0,i.kt)("inlineCode",{parentName:"h3"},"dbscan")),(0,i.kt)("h4",{id:"possible-use-1"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"dbscan"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"list"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"list<list>")," ")),(0,i.kt)("h4",{id:"result-1"},"Result:"),(0,i.kt)("p",null,"returns the list of clusters (list of instance indices) computed with the dbscan (density-based spatial clustering of applications with noise) algorithm from the first operand data according to the maximum radius of the neighborhood to be considered (eps) and the minimum number of points needed for a cluster (minPts). Usage: dbscan(data,eps,minPoints)"),(0,i.kt)("h4",{id:"special-cases"},"Special cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"if the lengths of two vectors in the right-hand aren't equal, returns 0")),(0,i.kt)("h4",{id:"examples-1"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nlist<list> var0 <- dbscan ([[2,4,5], [3,8,2], [1,1,3], [4,3,4]],10,2); // var0 equals [[0,1,2,3]]\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"dead"},(0,i.kt)("inlineCode",{parentName:"h3"},"dead")),(0,i.kt)("h4",{id:"possible-use-2"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"dead"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")," ")),(0,i.kt)("h4",{id:"result-2"},"Result:"),(0,i.kt)("p",null,"true if the agent is dead (or null), false otherwise."),(0,i.kt)("h4",{id:"examples-2"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nbool var0 <- dead(agent_A); // var0 equals true or false\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"degree_of"},(0,i.kt)("inlineCode",{parentName:"h3"},"degree_of")),(0,i.kt)("h4",{id:"possible-use-3"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"graph")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"degree_of"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"int")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"degree_of"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"graph")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"int")," ")),(0,i.kt)("h4",{id:"result-3"},"Result:"),(0,i.kt)("p",null,"returns the degree (in+out) of a vertex (right-hand operand) in the graph given as left-hand operand."),(0,i.kt)("h4",{id:"examples-3"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nint var1 <- graphFromMap degree_of (node(3)); // var1 equals 3\n\n")),(0,i.kt)("h4",{id:"see-also"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#in_degree_of"},"in_degree_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#out_degree_of"},"out_degree_of"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"dem"},(0,i.kt)("inlineCode",{parentName:"h3"},"dem")),(0,i.kt)("h4",{id:"possible-use-4"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"dem"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"file"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"geometry")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"file")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"dem"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"file")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"geometry")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"dem"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"file")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"file"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"geometry")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"file")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"dem"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"geometry")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"dem"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"file")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"geometry")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"dem"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"file"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"file"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"geometry")," ")),(0,i.kt)("h4",{id:"result-4"},"Result:"),(0,i.kt)("p",null,"A polygon that is equivalent to the surface of the texture"),(0,i.kt)("h4",{id:"examples-4"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \ngeometry var0 <- dem(dem,texture); // var0 equals a geometry as a rectangle of weight and height equal to the texture. \ngeometry var1 <- dem(dem,texture,z_factor); // var1 equals a geometry as a rectangle of width and height equal to the texture. \ngeometry var2 <- dem(dem,z_factor); // var2 equals a geometry as a rectangle of weight and height equal to the texture. \ngeometry var3 <- dem(dem); // var3 equals returns a geometry as a rectangle of width and height equal to the texture.\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"det"},(0,i.kt)("inlineCode",{parentName:"h3"},"det")),(0,i.kt)("p",null,"   Same signification as ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#determinant"},"determinant")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"determinant"},(0,i.kt)("inlineCode",{parentName:"h3"},"determinant")),(0,i.kt)("h4",{id:"possible-use-5"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"determinant"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"matrix<unknown>"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,i.kt)("h4",{id:"result-5"},"Result:"),(0,i.kt)("p",null,"The determinant of the given matrix"),(0,i.kt)("h4",{id:"examples-5"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nfloat var0 <- determinant(matrix([[1,2],[3,4]])); // var0 equals -2\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"diff"},(0,i.kt)("inlineCode",{parentName:"h3"},"diff")),(0,i.kt)("h4",{id:"possible-use-6"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"float")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"diff"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"diff"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"float")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,i.kt)("h4",{id:"result-6"},"Result:"),(0,i.kt)("p",null,"A placeholder function for expressing equations"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"diff2"},(0,i.kt)("inlineCode",{parentName:"h3"},"diff2")),(0,i.kt)("h4",{id:"possible-use-7"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"float")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"diff2"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"diff2"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"float")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,i.kt)("h4",{id:"result-7"},"Result:"),(0,i.kt)("p",null,"A placeholder function for expressing equations"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"directed"},(0,i.kt)("inlineCode",{parentName:"h3"},"directed")),(0,i.kt)("h4",{id:"possible-use-8"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"directed"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"graph"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"graph")," ")),(0,i.kt)("h4",{id:"result-8"},"Result:"),(0,i.kt)("p",null,"the operand graph becomes a directed graph.  "),(0,i.kt)("h4",{id:"comment"},"Comment:"),(0,i.kt)("p",null,"WARNING / side effect: this operator modifies the operand and does not create a new graph.    "),(0,i.kt)("h4",{id:"see-also-1"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#undirected"},"undirected"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"direction_between"},(0,i.kt)("inlineCode",{parentName:"h3"},"direction_between")),(0,i.kt)("h4",{id:"possible-use-9"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"topology")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"direction_between"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"container<unknown,geometry>")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"direction_between"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"topology")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"container<unknown,geometry>"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,i.kt)("h4",{id:"result-9"},"Result:"),(0,i.kt)("p",null,"A direction (in degree) between a list of two geometries (geometries, agents, points) considering a topology."),(0,i.kt)("h4",{id:"examples-6"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nfloat var0 <- my_topology direction_between [ag1, ag2]; // var0 equals the direction between ag1 and ag2 considering the topology my_topology\n\n")),(0,i.kt)("h4",{id:"see-also-2"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#towards"},"towards"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#direction_to"},"direction_to"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#distance_to"},"distance_to"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#distance_between"},"distance_between"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#path_between"},"path_between"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#path_to"},"path_to"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"direction_to"},(0,i.kt)("inlineCode",{parentName:"h3"},"direction_to")),(0,i.kt)("p",null,"   Same signification as ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#towards"},"towards")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"disjoint_from"},(0,i.kt)("inlineCode",{parentName:"h3"},"disjoint_from")),(0,i.kt)("h4",{id:"possible-use-10"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"geometry")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"disjoint_from"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"geometry")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"disjoint_from"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"geometry")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"geometry"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")," ")),(0,i.kt)("h4",{id:"result-10"},"Result:"),(0,i.kt)("p",null,"A boolean, equal to true if the left-geometry (or agent/point) is disjoints from the right-geometry (or agent/point)."),(0,i.kt)("h4",{id:"special-cases-1"},"Special cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"if one of the operand is null, returns true.    "),(0,i.kt)("li",{parentName:"ul"},"if one operand is a point, returns false if the point is included in the geometry.")),(0,i.kt)("h4",{id:"examples-7"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nbool var0 <- polyline([{10,10},{20,20}]) disjoint_from polyline([{15,15},{25,25}]); // var0 equals false \nbool var1 <- polygon([{10,10},{10,20},{20,20},{20,10}]) disjoint_from polygon([{15,15},{15,25},{25,25},{25,15}]); // var1 equals false \nbool var2 <- polygon([{10,10},{10,20},{20,20},{20,10}]) disjoint_from {15,15}; // var2 equals false \nbool var3 <- polygon([{10,10},{10,20},{20,20},{20,10}]) disjoint_from {25,25}; // var3 equals true \nbool var4 <- polygon([{10,10},{10,20},{20,20},{20,10}]) disjoint_from polygon([{35,35},{35,45},{45,45},{45,35}]); // var4 equals true\n\n")),(0,i.kt)("h4",{id:"see-also-3"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#intersects"},"intersects"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#crosses"},"crosses"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#overlaps"},"overlaps"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#partially_overlaps"},"partially_overlaps"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#touches"},"touches"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"distance_between"},(0,i.kt)("inlineCode",{parentName:"h3"},"distance_between")),(0,i.kt)("h4",{id:"possible-use-11"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"topology")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"distance_between"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"container<unknown,geometry>")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"distance_between"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"topology")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"container<unknown,geometry>"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,i.kt)("h4",{id:"result-11"},"Result:"),(0,i.kt)("p",null,"A distance between a list of geometries (geometries, agents, points) considering a topology."),(0,i.kt)("h4",{id:"examples-8"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nfloat var0 <- my_topology distance_between [ag1, ag2, ag3]; // var0 equals the distance between ag1, ag2 and ag3 considering the topology my_topology\n\n")),(0,i.kt)("h4",{id:"see-also-4"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#towards"},"towards"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#direction_to"},"direction_to"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#distance_to"},"distance_to"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#direction_between"},"direction_between"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#path_between"},"path_between"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#path_to"},"path_to"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"distance_to"},(0,i.kt)("inlineCode",{parentName:"h3"},"distance_to")),(0,i.kt)("h4",{id:"possible-use-12"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"geometry")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"distance_to"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"geometry")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"distance_to"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"geometry")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"geometry"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"point")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"distance_to"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"point")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"distance_to"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"point")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"point"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,i.kt)("h4",{id:"result-12"},"Result:"),(0,i.kt)("p",null,"A distance between two geometries (geometries, agents or points) considering the topology of the agent applying the operator."),(0,i.kt)("h4",{id:"examples-9"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nfloat var0 <- ag1 distance_to ag2; // var0 equals the distance between ag1 and ag2 considering the topology of the agent applying the operator\n\n")),(0,i.kt)("h4",{id:"see-also-5"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#towards"},"towards"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#direction_to"},"direction_to"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#distance_between"},"distance_between"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#direction_between"},"direction_between"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#path_between"},"path_between"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#path_to"},"path_to"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"distinct"},(0,i.kt)("inlineCode",{parentName:"h3"},"distinct")),(0,i.kt)("h4",{id:"possible-use-13"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"distinct"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"container"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"list")," ")),(0,i.kt)("h4",{id:"result-13"},"Result:"),(0,i.kt)("p",null,"produces a set from the elements of the operand (i.e. a list without duplicated elements)"),(0,i.kt)("h4",{id:"special-cases-2"},"Special cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"if the operand is a graph, remove_duplicates returns the set of nodes    "),(0,i.kt)("li",{parentName:"ul"},"if the operand is nil, remove_duplicates returns nil ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nlist var1 <- remove_duplicates([]); // var1 equals []\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"if the operand is a map, remove_duplicates returns the set of values without duplicate ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nlist var2 <- remove_duplicates([1::3,2::4,3::3,5::7]); // var2 equals [3,4,7]\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"if the operand is a matrix, remove_duplicates returns a list containing all the elments with duplicated. ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nlist var3 <- remove_duplicates([["c11","c12","c13","c13"],["c21","c22","c23","c23"]]); // var3 equals [["c11","c12","c13","c21","c22","c23"]]\n')),(0,i.kt)("h4",{id:"examples-10"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nlist var0 <- remove_duplicates([3,2,5,1,2,3,5,5,5]); // var0 equals [3,2,5,1]\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"distribution_of"},(0,i.kt)("inlineCode",{parentName:"h3"},"distribution_of")),(0,i.kt)("h4",{id:"possible-use-14"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"distribution_of"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"container"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"map")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"container")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"distribution_of"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"int")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"map")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"distribution_of"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"container")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"map")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"distribution_of"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"container"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"map")," ")),(0,i.kt)("h4",{id:"result-14"},"Result:"),(0,i.kt)("p",null,"Discretize a list of values into n bins (computes the bins from a numerical variable into n (default 10) bins. Returns a distribution map with the values (values key), the interval legends (legend key), the distribution parameters (params keys, for cumulative charts). Parameters can be (list), (list, nbbins) or (list,nbbins,valmin,valmax)"),(0,i.kt)("h4",{id:"examples-11"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nmap var0 <- distribution_of([1,1,2,12.5],10); // var0 equals map(['values'::[2,1,0,0,0,0,1,0,0,0],'legend'::['[0.0:2.0]','[2.0:4.0]','[4.0:6.0]','[6.0:8.0]','[8.0:10.0]','[10.0:12.0]','[12.0:14.0]','[14.0:16.0]','[16.0:18.0]','[18.0:20.0]'],'parlist'::[1,0]]) \nmap var1 <- distribution_of([1,1,2,12.5]); // var1 equals map(['values'::[2,1,0,0,0,0,1,0,0,0],'legend'::['[0.0:2.0]','[2.0:4.0]','[4.0:6.0]','[6.0:8.0]','[8.0:10.0]','[10.0:12.0]','[12.0:14.0]','[14.0:16.0]','[16.0:18.0]','[18.0:20.0]'],'parlist'::[1,0]]) \nmap var2 <- distribution_of([1,1,2,12.5]); // var2 equals map(['values'::[2,1,0,0,0,0,1,0,0,0],'legend'::['[0.0:2.0]','[2.0:4.0]','[4.0:6.0]','[6.0:8.0]','[8.0:10.0]','[10.0:12.0]','[12.0:14.0]','[14.0:16.0]','[16.0:18.0]','[18.0:20.0]'],'parlist'::[1,0]])\n\n")),(0,i.kt)("h4",{id:"see-also-6"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#as_map"},"as_map"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"distribution2d_of"},(0,i.kt)("inlineCode",{parentName:"h3"},"distribution2d_of")),(0,i.kt)("h4",{id:"possible-use-15"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"container")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"distribution2d_of"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"container")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"map")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"distribution2d_of"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"container")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"container"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"map")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"distribution2d_of"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"container"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"container"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"map")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"distribution2d_of"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"container"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"container"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"map")," ")),(0,i.kt)("h4",{id:"result-15"},"Result:"),(0,i.kt)("p",null,"Discretize two lists of values into n bins (computes the bins from a numerical variable into n (default 10) bins. Returns a distribution map with the values (values key), the interval legends (legend key), the distribution parameters (params keys, for cumulative charts). Parameters can be (list), (list, nbbins) or (list,nbbins,valmin,valmax)"),(0,i.kt)("h4",{id:"examples-12"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nmap var0 <- distribution2d_of([1,1,2,12.5]); // var0 equals map(['values'::[2,1,0,0,0,0,1,0,0,0],'legend'::['[0.0:2.0]','[2.0:4.0]','[4.0:6.0]','[6.0:8.0]','[8.0:10.0]','[10.0:12.0]','[12.0:14.0]','[14.0:16.0]','[16.0:18.0]','[18.0:20.0]'],'parlist'::[1,0]]) \nmap var1 <- distribution2d_of([1,1,2,12.5],10); // var1 equals map(['values'::[2,1,0,0,0,0,1,0,0,0],'legend'::['[0.0:2.0]','[2.0:4.0]','[4.0:6.0]','[6.0:8.0]','[8.0:10.0]','[10.0:12.0]','[12.0:14.0]','[14.0:16.0]','[16.0:18.0]','[18.0:20.0]'],'parlist'::[1,0]]) \nmap var2 <- distribution2d_of([1,1,2,12.5],10); // var2 equals map(['values'::[2,1,0,0,0,0,1,0,0,0],'legend'::['[0.0:2.0]','[2.0:4.0]','[4.0:6.0]','[6.0:8.0]','[8.0:10.0]','[10.0:12.0]','[12.0:14.0]','[14.0:16.0]','[16.0:18.0]','[18.0:20.0]'],'parlist'::[1,0]])\n\n")),(0,i.kt)("h4",{id:"see-also-7"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#as_map"},"as_map"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"div"},(0,i.kt)("inlineCode",{parentName:"h3"},"div")),(0,i.kt)("h4",{id:"possible-use-16"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"int")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"div"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"int")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"div"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"int")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"int")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"float")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"div"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"int")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"div"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"float")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"int")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"int")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"div"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"int")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"int")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"div"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"int")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"int")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"float")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"div"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"int")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"int")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"div"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"float")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"int")," ")),(0,i.kt)("h4",{id:"result-16"},"Result:"),(0,i.kt)("p",null,"Returns the truncation of the division of the left-hand operand by the right-hand operand."),(0,i.kt)("h4",{id:"special-cases-3"},"Special cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"if the right-hand operand is equal to zero, raises an exception.    "),(0,i.kt)("li",{parentName:"ul"},"if the right-hand operand is equal to zero, raises an exception.    "),(0,i.kt)("li",{parentName:"ul"},"if the right-hand operand is equal to zero, raises an exception.")),(0,i.kt)("h4",{id:"examples-13"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nint var0 <- 40 div 4.1; // var0 equals 9 \nint var1 <- 40.1 div 4.5; // var1 equals 8 \nint var2 <- 40 div 3; // var2 equals 13 \nint var3 <- 40.5 div 3; // var3 equals 13\n\n")),(0,i.kt)("h4",{id:"see-also-8"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#mod"},"mod"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"dnorm"},(0,i.kt)("inlineCode",{parentName:"h3"},"dnorm")),(0,i.kt)("p",null,"   Same signification as ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#normal_density"},"normal_density")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"dtw"},(0,i.kt)("inlineCode",{parentName:"h3"},"dtw")),(0,i.kt)("h4",{id:"possible-use-17"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"list")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"dtw"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"list")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"dtw"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"list")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"list"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"dtw"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"list"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"list"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,i.kt)("h4",{id:"result-17"},"Result:"),(0,i.kt)("p",null,"returns the dynamic time warping between the two series of values (step pattern used: symetric1)\nreturns the dynamic time warping between the two series of values (step pattern used: symetric1) with Sakoe-Chiba band (radius: the window width of Sakoe-Chiba band)"),(0,i.kt)("h4",{id:"examples-14"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nfloat var0 <- dtw([32.0,5.0,1.0,3.0],[1.0,10.0,5.0,1.0]); // var0 equals 38.0 \nfloat var1 <- dtw([10.0,5.0,1.0, 3.0],[1.0,10.0,5.0,1.0], 2); // var1 equals 11.0\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"durbin_watson"},(0,i.kt)("inlineCode",{parentName:"h3"},"durbin_watson")),(0,i.kt)("h4",{id:"possible-use-18"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"durbin_watson"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"container"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,i.kt)("h4",{id:"result-18"},"Result:"),(0,i.kt)("p",null,"Durbin-Watson computation"),(0,i.kt)("h4",{id:"examples-15"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nfloat var0 <- durbin_watson([13,2,1,4,1,2]) with_precision(4); // var0 equals 0.7231\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"dxf_file"},(0,i.kt)("inlineCode",{parentName:"h3"},"dxf_file")),(0,i.kt)("h4",{id:"possible-use-19"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"dxf_file"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"file")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"string")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"dxf_file"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"file")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"dxf_file"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"file")," ")),(0,i.kt)("h4",{id:"result-19"},"Result:"),(0,i.kt)("p",null,"Constructs a file of type dxf. Allowed extensions are limited to dxf"),(0,i.kt)("h4",{id:"special-cases-4"},"Special cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"dxf_file(string): This file constructor allows to read a dxf (.dxf) file ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nfile f <- dxf_file("file.dxf");\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"dxf_file(string,float): This file constructor allows to read a dxf (.dxf) file and specify the unit (meter by default) ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nfile f <- dxf_file("file.dxf",#m);\n')),(0,i.kt)("h4",{id:"see-also-9"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#is_dxf"},"is_dxf"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"edge-1"},(0,i.kt)("inlineCode",{parentName:"h3"},"edge")),(0,i.kt)("h4",{id:"possible-use-20"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"edge"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"pair"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"edge"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"unknown"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pair")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"edge"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"edge"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"pair")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"unknown")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"edge"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"edge"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"unknown")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"unknown")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"edge"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"edge"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"unknown")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"unknown")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"edge"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"int")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"edge"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"unknown")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pair")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"edge"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"int")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"edge"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"pair")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"edge"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"unknown"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"edge"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"pair"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"edge"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"unknown"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"edge"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"pair"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"edge"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"unknown"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"edge"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"unknown"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"edge"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"unknown"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown"))),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"edge_between"},(0,i.kt)("inlineCode",{parentName:"h3"},"edge_between")),(0,i.kt)("h4",{id:"possible-use-21"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"graph")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"edge_between"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"pair")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"edge_between"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"graph")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"pair"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown")," ")),(0,i.kt)("h4",{id:"result-20"},"Result:"),(0,i.kt)("p",null,"returns the edge linking two nodes"),(0,i.kt)("h4",{id:"examples-16"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nunknown var0 <- graphFromMap edge_between node1::node2; // var0 equals edge1\n\n")),(0,i.kt)("h4",{id:"see-also-10"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#out_edges_of"},"out_edges_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#in_edges_of"},"in_edges_of"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"edge_betweenness"},(0,i.kt)("inlineCode",{parentName:"h3"},"edge_betweenness")),(0,i.kt)("h4",{id:"possible-use-22"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"edge_betweenness"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"graph"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"map")," ")),(0,i.kt)("h4",{id:"result-21"},"Result:"),(0,i.kt)("p",null,"returns a map containing for each edge (key), its betweenness centrality (value): number of shortest paths passing through each edge"),(0,i.kt)("h4",{id:"examples-17"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \ngraph graphEpidemio <- graph([]); \nmap var1 <- edge_betweenness(graphEpidemio); // var1 equals the edge betweenness index of the graph\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"edges"},(0,i.kt)("inlineCode",{parentName:"h3"},"edges")),(0,i.kt)("h4",{id:"possible-use-23"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"edges"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"container"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"container"))),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"eigenvalues"},(0,i.kt)("inlineCode",{parentName:"h3"},"eigenvalues")),(0,i.kt)("h4",{id:"possible-use-24"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"eigenvalues"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"matrix<unknown>"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"list<float>")," ")),(0,i.kt)("h4",{id:"result-22"},"Result:"),(0,i.kt)("p",null,"The eigen values (matrix) of the given matrix"),(0,i.kt)("h4",{id:"examples-18"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nlist<float> var0 <- eigenvalues(matrix([[5,-3],[6,-4]])); // var0 equals [2.0000000000000004,-0.9999999999999998]\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"electre_dm"},(0,i.kt)("inlineCode",{parentName:"h3"},"electre_DM")),(0,i.kt)("h4",{id:"possible-use-25"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"electre_DM"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"list<list>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"list<map<string,unknown>>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"int")," ")),(0,i.kt)("h4",{id:"result-23"},"Result:"),(0,i.kt)("p",null,"The index of the best candidate according to a method based on the ELECTRE methods. The principle of the ELECTRE methods is to compare the possible candidates by pair. These methods analyses the possible outranking relation existing between two candidates. An candidate outranks another if this one is at least as good as the other one. The ELECTRE methods are based on two concepts: the concordance and the discordance. The concordance characterizes the fact that, for an outranking relation to be validated, a sufficient majority of criteria should be in favor of this assertion. The discordance characterizes the fact that, for an outranking relation to be validated, none of the criteria in the minority should oppose too strongly this assertion. These two conditions must be true for validating the outranking assertion. More information about the ELECTRE methods can be found in ","[http://www.springerlink.com/content/g367r44322876223/\tFigueira,  J., Mousseau, V., Roy, B.: ELECTRE Methods. In: Figueira, J., Greco, S., and Ehrgott, M., (Eds.), Multiple Criteria Decision Analysis: State of the Art Surveys, Springer, New York, 133--162 (2005)]",". The first operand is the list of candidates (a candidate is a list of criterion values); the second operand the list of criterion: A criterion is a map that contains fives elements: a name, a weight, a preference value (p), an indifference value (q) and a veto value (v). The preference value represents the threshold from which the difference between two criterion values allows to prefer one vector of values over another. The indifference value represents the threshold from which the difference between two criterion values is considered significant. The veto value represents the threshold from which the difference between two criterion values disqualifies the candidate that obtained the smaller value; the last operand is the fuzzy cut."),(0,i.kt)("h4",{id:"special-cases-5"},"Special cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"returns -1 is the list of candidates is nil or empty")),(0,i.kt)("h4",{id:"examples-19"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nint var0 <- electre_DM([[1.0, 7.0],[4.0,2.0],[3.0, 3.0]], [["name"::"utility", "weight" :: 2.0,"p"::0.5, "q"::0.0, "s"::1.0, "maximize" :: true],["name"::"price", "weight" :: 1.0,"p"::0.5, "q"::0.0, "s"::1.0, "maximize" :: false]],0.7); // var0 equals 0\n\n')),(0,i.kt)("h4",{id:"see-also-11"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#weighted_means_dm"},"weighted_means_DM"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#promethee_dm"},"promethee_DM"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#evidence_theory_dm"},"evidence_theory_DM"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"ellipse"},(0,i.kt)("inlineCode",{parentName:"h3"},"ellipse")),(0,i.kt)("h4",{id:"possible-use-26"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"float")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"ellipse"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"geometry")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"ellipse"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"float")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"geometry")," ")),(0,i.kt)("h4",{id:"result-24"},"Result:"),(0,i.kt)("p",null,"An ellipse geometry which x-radius is equal to the first operand and y-radius is equal to the second operand  "),(0,i.kt)("h4",{id:"comment-1"},"Comment:"),(0,i.kt)("p",null,"the center of the ellipse is by default the location of the current agent in which has been called this operator."),(0,i.kt)("h4",{id:"special-cases-6"},"Special cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"returns a point if both operands are lower or equal to 0, a line if only one is.")),(0,i.kt)("h4",{id:"examples-20"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \ngeometry var0 <- ellipse(10, 10); // var0 equals a geometry as an ellipse of width 10 and height 10.\n\n")),(0,i.kt)("h4",{id:"see-also-12"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#around"},"around"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#cone"},"cone"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#line"},"line"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#link"},"link"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#norm"},"norm"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#point"},"point"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#polygon"},"polygon"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#polyline"},"polyline"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#rectangle"},"rectangle"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#square"},"square"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#circle"},"circle"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#squircle"},"squircle"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#triangle"},"triangle"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"elliptical_arc"},(0,i.kt)("inlineCode",{parentName:"h3"},"elliptical_arc")),(0,i.kt)("h4",{id:"possible-use-27"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"elliptical_arc"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"point"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"point"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"geometry")," ")),(0,i.kt)("h4",{id:"result-25"},"Result:"),(0,i.kt)("p",null,"An elliptical arc from the first operand (point) to the second operand (point), which radius is equal to the third operand, and a int giving the number of points to use as a last operand"),(0,i.kt)("h4",{id:"examples-21"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \ngeometry var0 <- elliptical_arc({0,0},{10,10},5.0, 20); // var0 equals a geometry from {0,0} to {10,10} considering a radius of 5.0 built using 20 points\n\n")),(0,i.kt)("h4",{id:"see-also-13"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#arc"},"arc"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#around"},"around"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#cone"},"cone"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#line"},"line"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#link"},"link"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#norm"},"norm"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#point"},"point"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#polygon"},"polygon"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#polyline"},"polyline"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#super_ellipse"},"super_ellipse"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#rectangle"},"rectangle"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#square"},"square"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#circle"},"circle"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#ellipse"},"ellipse"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#triangle"},"triangle"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"emotion"},(0,i.kt)("inlineCode",{parentName:"h3"},"emotion")),(0,i.kt)("h4",{id:"possible-use-28"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"emotion"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"any"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"emotion")," ")),(0,i.kt)("h4",{id:"result-26"},"Result:"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"empty"},(0,i.kt)("inlineCode",{parentName:"h3"},"empty")),(0,i.kt)("h4",{id:"possible-use-29"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"empty"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"container<KeyType,ValueType>"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"empty"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")," ")),(0,i.kt)("h4",{id:"result-27"},"Result:"),(0,i.kt)("p",null,"true if the operand is empty, false otherwise.  "),(0,i.kt)("h4",{id:"comment-2"},"Comment:"),(0,i.kt)("p",null,"the empty operator behavior depends on the nature of the operand"),(0,i.kt)("h4",{id:"special-cases-7"},"Special cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"if it is a map, empty returns true if the map contains no key-value mappings, and false otherwise    "),(0,i.kt)("li",{parentName:"ul"},"if it is a file, empty returns true if the content of the file (that is also a container) is empty, and false otherwise    "),(0,i.kt)("li",{parentName:"ul"},"if it is a population, empty returns true if there is no agent in the population, and false otherwise    "),(0,i.kt)("li",{parentName:"ul"},"if it is a graph, empty returns true if it contains no vertex and no edge, and false otherwise    "),(0,i.kt)("li",{parentName:"ul"},"if it is a matrix of int, float or object, it will return true if all elements are respectively 0, 0.0 or null, and false otherwise    "),(0,i.kt)("li",{parentName:"ul"},"if it is a matrix of geometry, it will return true if the matrix contains no cell, and false otherwise    "),(0,i.kt)("li",{parentName:"ul"},"if it is a list, empty returns true if there is no element in the list, and false otherwise ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nbool var0 <- empty([]); // var0 equals true\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"if it is a string, empty returns true if the string does not contain any character, and false otherwise ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nbool var1 <- empty ('abced'); // var1 equals false\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"enlarged_by"},(0,i.kt)("inlineCode",{parentName:"h3"},"enlarged_by")),(0,i.kt)("p",null,"   Same signification as ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#+"},"+")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"enter"},(0,i.kt)("inlineCode",{parentName:"h3"},"enter")),(0,i.kt)("h4",{id:"possible-use-30"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"string")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"enter"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"msi.gama.kernel.experiment.IParameter")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"enter"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"msi.gama.kernel.experiment.IParameter")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"string")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"enter"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"msi.gama.kernel.experiment.IParameter")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"enter"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"msi.gama.kernel.experiment.IParameter")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"string")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"enter"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"int")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"msi.gama.kernel.experiment.IParameter")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"enter"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"msi.gama.kernel.experiment.IParameter")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"string")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"enter"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"string")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"msi.gama.kernel.experiment.IParameter")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"enter"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"msi.gama.kernel.experiment.IParameter")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"string")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"enter"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"msi.gama.kernel.experiment.IParameter")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"enter"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"msi.gama.kernel.experiment.IParameter")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"string")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"enter"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"any GAML type")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"msi.gama.kernel.experiment.IParameter")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"enter"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"any GAML type"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"msi.gama.kernel.experiment.IParameter")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"enter"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"any GAML type"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"msi.gama.kernel.experiment.IParameter")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"enter"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"msi.gama.kernel.experiment.IParameter")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"enter"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"msi.gama.kernel.experiment.IParameter")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"enter"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"msi.gama.kernel.experiment.IParameter")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"enter"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"msi.gama.kernel.experiment.IParameter")," ")),(0,i.kt)("h4",{id:"result-28"},"Result:"),(0,i.kt)("p",null,"Allows the user to enter a boolean value by specifying a title and an initial value\nAllows the user to enter an int by specifying a title, an initial value, a min, a max and a step value\nAllows the user to enter a float by specifying a title, an initial value, a min, a max and a step value\nAllows the user to enter a float by specifying a title and an initial value\nAllows the user to enter an int by specifying a title, an initial value, a min and a max value\nAllows the user to enter an int by specifying a title and an initial value\nAllows the user to enter a string by specifying a title and an initial value\nAllows the user to enter a value by specifying a title and an initial value. The type will be deduced from the value\nAllows the user to enter a value by specifying a title, a type, and an initial value\nAllows the user to enter an int by specifying a title, an initial value, a min and a max value\nAllows the user to enter a value by specifying a title and a type"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"envelope"},(0,i.kt)("inlineCode",{parentName:"h3"},"envelope")),(0,i.kt)("h4",{id:"possible-use-31"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"envelope"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"unknown"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"geometry")," ")),(0,i.kt)("h4",{id:"result-29"},"Result:"),(0,i.kt)("p",null,"A 3D geometry that represents the box that surrounds the geometries or the surface described by the arguments. More general than geometry(arguments).envelope, as it allows to pass int, double, point, image files, shape files, asc files, or any list combining these arguments, in which case the envelope will be correctly expanded. If an envelope cannot be determined from the arguments, a default one of dimensions (0,100, 0, 100, 0, 100) is returned"),(0,i.kt)("h4",{id:"special-cases-8"},"Special cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"This operator is often used to define the environment of simulation")),(0,i.kt)("h4",{id:"examples-22"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nfile road_shapefile <- file("../includes/roads.shp"); \ngeometry shape <- envelope(road_shapefile); \n// shape is the system variable of  the environment \ngeometry var3 <- polygon([{0,0}, {20,0}, {10,10}, {10,0}]); // var3 equals create a polygon to get the envolpe \nfloat var4 <- envelope(polygon([{0,0}, {20,0}, {10,10}, {10,0}])).area; // var4 equals 200.0\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"eval_gaml"},(0,i.kt)("inlineCode",{parentName:"h3"},"eval_gaml")),(0,i.kt)("h4",{id:"possible-use-32"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"eval_gaml"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown")," ")),(0,i.kt)("h4",{id:"result-30"},"Result:"),(0,i.kt)("p",null,"evaluates the given GAML string."),(0,i.kt)("h4",{id:"examples-23"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nunknown var0 <- eval_gaml("2+3"); // var0 equals 5\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"eval_when"},(0,i.kt)("inlineCode",{parentName:"h3"},"eval_when")),(0,i.kt)("h4",{id:"possible-use-33"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"eval_when"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"BDIPlan"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")," ")),(0,i.kt)("h4",{id:"result-31"},"Result:"),(0,i.kt)("p",null,"evaluate the facet when of a given plan"),(0,i.kt)("h4",{id:"examples-24"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \neval_when(plan1)\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"evaluate_sub_model"},(0,i.kt)("inlineCode",{parentName:"h3"},"evaluate_sub_model")),(0,i.kt)("h4",{id:"possible-use-34"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"evaluate_sub_model"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"string")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"evaluate_sub_model"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown")," ")),(0,i.kt)("h4",{id:"result-32"},"Result:"),(0,i.kt)("p",null,"Load a submodel  "),(0,i.kt)("h4",{id:"comment-3"},"Comment:"),(0,i.kt)("p",null,"loaded submodel"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"even"},(0,i.kt)("inlineCode",{parentName:"h3"},"even")),(0,i.kt)("h4",{id:"possible-use-35"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"even"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")," ")),(0,i.kt)("h4",{id:"result-33"},"Result:"),(0,i.kt)("p",null,"Returns true if the operand is even and false if it is odd."),(0,i.kt)("h4",{id:"special-cases-9"},"Special cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"if the operand is equal to 0, it returns true.    "),(0,i.kt)("li",{parentName:"ul"},"if the operand is a float, it is truncated before")),(0,i.kt)("h4",{id:"examples-25"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nbool var0 <- even (3); // var0 equals false \nbool var1 <- even(-12); // var1 equals true\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"every"},(0,i.kt)("inlineCode",{parentName:"h3"},"every")),(0,i.kt)("h4",{id:"possible-use-36"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"every"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"any expression"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"every"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"list")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"every"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"int")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"list")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"every"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"list")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"list")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"list")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"every"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"any expression")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"list<date>")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"every"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"list")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"any expression"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"list<date>")," ")),(0,i.kt)("h4",{id:"result-34"},"Result:"),(0,i.kt)("p",null,"Retrieves elements from the first argument every ",(0,i.kt)("inlineCode",{parentName:"p"},"step")," (second argument) elements. Raises an error if the step is negative or equal to zero\nexpects a frequency (expressed in seconds of simulated time) as argument. Will return true every time the current_date matches with this frequency\ntrue every operand * cycle, false otherwise\napplies a step to an interval of dates defined by 'date1 to date2'  "),(0,i.kt)("h4",{id:"comment-4"},"Comment:"),(0,i.kt)("p",null,"Used to do something at regular intervals of time. Can be used in conjunction with 'since', 'after', 'before', 'until' or 'between', so that this computation only takes place in the temporal segment defined by these operators. In all cases, the starting_date of the model is used as a reference starting pointthe value of the every operator depends on the cycle. It can be used to do something every x cycle."),(0,i.kt)("h4",{id:"examples-26"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nreflex when: every(2#days) since date('2000-01-01') { .. } \nstate a { transition to: b when: every(2#mn);} state b { transition to: a when: every(30#s);} // This oscillatory behavior will use the starting_date of the model as its starting point in time \nif every(2#cycle) {write \"the cycle number is even\";} \n         else {write \"the cycle number is odd\";} \n(date('2000-01-01') to date('2010-01-01')) every (#month) // builds an interval between these two dates which contains all the monthly dates starting from the beginning of the interval\n\n")),(0,i.kt)("h4",{id:"see-also-14"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#since"},"since"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#after"},"after"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#to"},"to"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"every_cycle"},(0,i.kt)("inlineCode",{parentName:"h3"},"every_cycle")),(0,i.kt)("p",null,"   Same signification as ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#every"},"every")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"evidence_theory_dm"},(0,i.kt)("inlineCode",{parentName:"h3"},"evidence_theory_DM")),(0,i.kt)("h4",{id:"possible-use-37"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"list<list>")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"evidence_theory_DM"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"list<map<string,unknown>>")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"int")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"evidence_theory_DM"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"list<list>")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"list<map<string,unknown>>"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"int")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"evidence_theory_DM"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"list<list>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"list<map<string,unknown>>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"int")," ")),(0,i.kt)("h4",{id:"result-35"},"Result:"),(0,i.kt)("p",null,"The index of the best candidate according to a method based on the Evidence theory. This theory, which was proposed by Shafer (","[http://www.glennshafer.com/books/amte.html Shafer G (1976) A mathematical theory of evidence, Princeton University Press]","), is based on the work of Dempster (","[http://projecteuclid.org/DPubS?service=UI&version=1.0&verb=Display&handle=euclid.aoms/1177698950 Dempster A (1967) Upper and lower probabilities induced by multivalued mapping. Annals of Mathematical Statistics, vol.  38, pp. 325--339]",') on lower and upper probability distributions. The first operand is the list of candidates (a candidate is a list of criterion values); the second operand the list of criterion: A criterion is a map that contains seven elements: a name, a first threshold s1, a second threshold s2, a value for the assertion "this candidate is the best" at threshold s1 (v1p), a value for the assertion "this candidate is the best" at threshold s2 (v2p), a value for the assertion "this candidate is not the best" at threshold s1 (v1c), a value for the assertion "this candidate is not the best" at threshold s2 (v2c). v1p, v2p, v1c and v2c have to been defined in order that: v1p + v1c <= 1.0; v2p + v2c <= 1.0.; the last operand allows to use a simple version of this multi-criteria decision making method (simple if true)'),(0,i.kt)("h4",{id:"special-cases-10"},"Special cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"returns -1 is the list of candidates is nil or empty    "),(0,i.kt)("li",{parentName:"ul"},"if the operator is used with only 2 operands (the candidates and the criteria), the last parameter (use simple method) is set to true")),(0,i.kt)("h4",{id:"examples-27"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nint var0 <- evidence_theory_DM([[1.0, 7.0],[4.0,2.0],[3.0, 3.0]], [["name"::"utility", "s1" :: 0.0,"s2"::1.0, "v1p"::0.0, "v2p"::1.0, "v1c"::0.0, "v2c"::0.0, "maximize" :: true],["name"::"price",  "s1" :: 0.0,"s2"::1.0, "v1p"::0.0, "v2p"::1.0, "v1c"::0.0, "v2c"::0.0, "maximize" :: true]], false); // var0 equals 0 \nint var1 <- evidence_theory_DM([[1.0, 7.0],[4.0,2.0],[3.0, 3.0]], [["name"::"utility", "s1" :: 0.0,"s2"::1.0, "v1p"::0.0, "v2p"::1.0, "v1c"::0.0, "v2c"::0.0, "maximize" :: true],["name"::"price",  "s1" :: 0.0,"s2"::1.0, "v1p"::0.0, "v2p"::1.0, "v1c"::0.0, "v2c"::0.0, "maximize" :: true]]); // var1 equals 0\n\n')),(0,i.kt)("h4",{id:"see-also-15"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#weighted_means_dm"},"weighted_means_DM"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#electre_dm"},"electre_DM"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"exp"},(0,i.kt)("inlineCode",{parentName:"h3"},"exp")),(0,i.kt)("h4",{id:"possible-use-38"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"exp"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"exp"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,i.kt)("h4",{id:"result-36"},"Result:"),(0,i.kt)("p",null,"Returns Euler's number e raised to the power of the operand."),(0,i.kt)("h4",{id:"special-cases-11"},"Special cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the operand is casted to a float before being evaluated.    "),(0,i.kt)("li",{parentName:"ul"},"the operand is casted to a float before being evaluated.")),(0,i.kt)("h4",{id:"examples-28"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nfloat var0 <- exp (0.0); // var0 equals 1.0\n\n")),(0,i.kt)("h4",{id:"see-also-16"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#ln"},"ln"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"fact"},(0,i.kt)("inlineCode",{parentName:"h3"},"fact")),(0,i.kt)("h4",{id:"possible-use-39"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"fact"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,i.kt)("h4",{id:"result-37"},"Result:"),(0,i.kt)("p",null,"Returns the factorial of the operand."),(0,i.kt)("h4",{id:"special-cases-12"},"Special cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"if the operand is less than 0, fact returns 0.")),(0,i.kt)("h4",{id:"examples-29"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nfloat var0 <- fact(4); // var0 equals 24\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"farthest_point_to"},(0,i.kt)("inlineCode",{parentName:"h3"},"farthest_point_to")),(0,i.kt)("h4",{id:"possible-use-40"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"geometry")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"farthest_point_to"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"point")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"point")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"farthest_point_to"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"geometry")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"point"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"point")," ")),(0,i.kt)("h4",{id:"result-38"},"Result:"),(0,i.kt)("p",null,"the farthest point of the left-operand to the left-point."),(0,i.kt)("h4",{id:"examples-30"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \npoint var0 <- geom farthest_point_to(pt); // var0 equals the farthest point of geom to pt\n\n")),(0,i.kt)("h4",{id:"see-also-17"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#any_location_in"},"any_location_in"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#any_point_in"},"any_point_in"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#closest_points_with"},"closest_points_with"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#points_at"},"points_at"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"farthest_to"},(0,i.kt)("inlineCode",{parentName:"h3"},"farthest_to")),(0,i.kt)("h4",{id:"possible-use-41"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"container<unknown,geometry>")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"farthest_to"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"geometry")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"geometry")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"farthest_to"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"container<unknown,geometry>")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"geometry"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"geometry")," ")),(0,i.kt)("h4",{id:"result-39"},"Result:"),(0,i.kt)("p",null,"An agent or a geometry among the left-operand list of agents, species or meta-population (addition of species), the farthest to the operand (casted as a geometry).  "),(0,i.kt)("h4",{id:"comment-5"},"Comment:"),(0,i.kt)("p",null,"the distance is computed in the topology of the calling agent (the agent in which this operator is used), with the distance algorithm specific to the topology."),(0,i.kt)("h4",{id:"examples-31"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \ngeometry var0 <- [ag1, ag2, ag3] closest_to(self); // var0 equals return the farthest agent among ag1, ag2 and ag3 to the agent applying the operator. \n(species1 + species2) closest_to self\n\n")),(0,i.kt)("h4",{id:"see-also-18"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#neighbors_at"},"neighbors_at"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#neighbors_of"},"neighbors_of"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#inside"},"inside"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#overlapping"},"overlapping"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#agents_overlapping"},"agents_overlapping"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#agents_inside"},"agents_inside"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#agent_closest_to"},"agent_closest_to"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#closest_to"},"closest_to"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#agent_farthest_to"},"agent_farthest_to"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"file"},(0,i.kt)("inlineCode",{parentName:"h3"},"file")),(0,i.kt)("h4",{id:"possible-use-42"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"file"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"any"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"file"))),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"file_exists"},(0,i.kt)("inlineCode",{parentName:"h3"},"file_exists")),(0,i.kt)("h4",{id:"possible-use-43"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"file_exists"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")," ")),(0,i.kt)("h4",{id:"result-40"},"Result:"),(0,i.kt)("p",null,"Test whether the parameter is the path to an existing file. False if it does not exist of if it is a folder"),(0,i.kt)("h4",{id:"examples-32"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nstring file_name <-"../includes/buildings.shp"; \n        if file_exists(file_name){ \n            write "File exists in the computer"; \n    }\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"first"},(0,i.kt)("inlineCode",{parentName:"h3"},"first")),(0,i.kt)("h4",{id:"possible-use-44"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"first"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"container<KeyType,ValueType>"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"ValueType")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"first"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"string")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"int")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"first"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"container")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"list")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"first"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"int")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"container"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"list")," ")),(0,i.kt)("h4",{id:"result-41"},"Result:"),(0,i.kt)("p",null,"the first value of the operand  "),(0,i.kt)("h4",{id:"comment-6"},"Comment:"),(0,i.kt)("p",null,"the first operator behavior depends on the nature of the operand"),(0,i.kt)("h4",{id:"special-cases-13"},"Special cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"if it is a map, first returns the first value of the first pair (in insertion order)    "),(0,i.kt)("li",{parentName:"ul"},"if it is a file, first returns the first element of the content of the file (that is also a container)    "),(0,i.kt)("li",{parentName:"ul"},"if it is a population, first returns the first agent of the population    "),(0,i.kt)("li",{parentName:"ul"},"if it is a graph, first returns the first edge (in creation order)    "),(0,i.kt)("li",{parentName:"ul"},"if it is a matrix, first returns the element at {0,0} in the matrix    "),(0,i.kt)("li",{parentName:"ul"},"for a matrix of int or float, it will return 0 if the matrix is empty    "),(0,i.kt)("li",{parentName:"ul"},"for a matrix of object or geometry, it will return nil if the matrix is empty    "),(0,i.kt)("li",{parentName:"ul"},"if it is a list, first returns the first element of the list, or nil if the list is empty ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nint var0 <- first ([1, 2, 3]); // var0 equals 1\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"if it is a string, first returns a string composed of its first character ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nstring var1 <- first ('abce'); // var1 equals 'a'\n")),(0,i.kt)("h4",{id:"see-also-19"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#last"},"last"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"first_of"},(0,i.kt)("inlineCode",{parentName:"h3"},"first_of")),(0,i.kt)("p",null,"   Same signification as ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#first"},"first")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"first_with"},(0,i.kt)("inlineCode",{parentName:"h3"},"first_with")),(0,i.kt)("h4",{id:"possible-use-45"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"container")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"first_with"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"any expression")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"first_with"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"container")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"any expression"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown")," ")),(0,i.kt)("h4",{id:"result-42"},"Result:"),(0,i.kt)("p",null,"the first element of the left-hand operand that makes the right-hand operand evaluate to true.  "),(0,i.kt)("h4",{id:"comment-7"},"Comment:"),(0,i.kt)("p",null,"in the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements."),(0,i.kt)("h4",{id:"special-cases-14"},"Special cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"if the left-hand operand is nil, first_with throws an error. If there is no element that satisfies the condition, it returns nil    "),(0,i.kt)("li",{parentName:"ul"},"if the left-operand is a map, the keyword each will contain each value ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nunknown var4 <- [1::2, 3::4, 5::6] first_with (each >= 4); // var4 equals 4 \nunknown var5 <- [1::2, 3::4, 5::6].pairs first_with (each.value >= 4); // var5 equals (3::4)\n")),(0,i.kt)("h4",{id:"examples-33"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nunknown var0 <- [1,2,3,4,5,6,7,8] first_with (each > 3); // var0 equals 4 \nunknown var2 <- g2 first_with (length(g2 out_edges_of each) = 0); // var2 equals node9 \nunknown var3 <- (list(node) first_with (round(node(each).location.x) > 32); // var3 equals node2\n\n")),(0,i.kt)("h4",{id:"see-also-20"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#group_by"},"group_by"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#last_with"},"last_with"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#where"},"where"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"flip"},(0,i.kt)("inlineCode",{parentName:"h3"},"flip")),(0,i.kt)("h4",{id:"possible-use-46"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"flip"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")," ")),(0,i.kt)("h4",{id:"result-43"},"Result:"),(0,i.kt)("p",null,"true or false given the probability represented by the operand"),(0,i.kt)("h4",{id:"special-cases-15"},"Special cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"flip 0 always returns false, flip 1 true")),(0,i.kt)("h4",{id:"examples-34"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nbool var0 <- flip (0.66666); // var0 equals 2/3 chances to return true.\n\n")),(0,i.kt)("h4",{id:"see-also-21"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#rnd"},"rnd"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"float"},(0,i.kt)("inlineCode",{parentName:"h3"},"float")),(0,i.kt)("h4",{id:"possible-use-47"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"float"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"any"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float"))),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"floor"},(0,i.kt)("inlineCode",{parentName:"h3"},"floor")),(0,i.kt)("h4",{id:"possible-use-48"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"floor"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,i.kt)("h4",{id:"result-44"},"Result:"),(0,i.kt)("p",null,"Maps the operand to the largest previous following integer, i.e. the largest integer not greater than x."),(0,i.kt)("h4",{id:"examples-35"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nfloat var0 <- floor(3); // var0 equals 3.0 \nfloat var1 <- floor(3.5); // var1 equals 3.0 \nfloat var2 <- floor(-4.7); // var2 equals -5.0\n\n")),(0,i.kt)("h4",{id:"see-also-22"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#ceil"},"ceil"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#round"},"round"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"folder"},(0,i.kt)("inlineCode",{parentName:"h3"},"folder")),(0,i.kt)("h4",{id:"possible-use-49"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"folder"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"file")," ")),(0,i.kt)("h4",{id:"result-45"},"Result:"),(0,i.kt)("p",null,"opens an existing repository"),(0,i.kt)("h4",{id:"special-cases-16"},"Special cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If the specified string does not refer to an existing repository, an exception is risen.")),(0,i.kt)("h4",{id:"examples-36"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nfile dirT <- folder("../includes/"); \n                // dirT represents the repository "../includes/" \n                // dirT.contents here contains the list of the names of included files\n\n')),(0,i.kt)("h4",{id:"see-also-23"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#file"},"file"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#new_folder"},"new_folder"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"folder_exists"},(0,i.kt)("inlineCode",{parentName:"h3"},"folder_exists")),(0,i.kt)("h4",{id:"possible-use-50"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"folder_exists"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")," ")),(0,i.kt)("h4",{id:"result-46"},"Result:"),(0,i.kt)("p",null,"Test whether the parameter is the path to an existing folder. False if it doesnt exist or if it is a file"),(0,i.kt)("h4",{id:"examples-37"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nstring file_name <-"../includes/"; \n        if folder_exists(file_name){ \n            write "Folder exists in the computer"; \n    }\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"font"},(0,i.kt)("inlineCode",{parentName:"h3"},"font")),(0,i.kt)("h4",{id:"possible-use-51"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"string")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"font"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"int")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"font")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"font"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"font")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"font"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"font")," ")),(0,i.kt)("h4",{id:"result-47"},"Result:"),(0,i.kt)("p",null,"Creates a new font, by specifying its name (either a font face name like 'Lucida Grande Bold' or 'Helvetica', or a logical name like 'Dialog', 'SansSerif', 'Serif', etc.), a size in points and a style, either #bold, #italic or #plain or a combination (addition) of them.\nCreates a new font, by specifying its name (either a font face name like 'Lucida Grande Bold' or 'Helvetica', or a logical name like 'Dialog', 'SansSerif', 'Serif', etc.) and a size in points. No style is attached to this font"),(0,i.kt)("h4",{id:"examples-38"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nfont var0 <- font ('Helvetica Neue',12, #bold + #italic); // var0 equals a bold and italic face of the Helvetica Neue family\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"frequency_of"},(0,i.kt)("inlineCode",{parentName:"h3"},"frequency_of")),(0,i.kt)("h4",{id:"possible-use-52"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"container")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"frequency_of"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"any expression")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"map")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"frequency_of"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"container")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"any expression"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"map")," ")),(0,i.kt)("h4",{id:"result-48"},"Result:"),(0,i.kt)("p",null,"Returns a map with keys equal to the application of the right-hand argument (like collect) and values equal to the frequency of this key (i.e. how many times it has been obtained)"),(0,i.kt)("h4",{id:"examples-39"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nmap var0 <- [1, 2, 3, 3, 4, 4, 5, 3, 3, 4] frequency_of each; // var0 equals map([1::1,2::1,3::4,4::3,5::1])\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"from"},(0,i.kt)("inlineCode",{parentName:"h3"},"from")),(0,i.kt)("p",null,"   Same signification as ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#since"},"since")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"fuzzy_choquet_dm"},(0,i.kt)("inlineCode",{parentName:"h3"},"fuzzy_choquet_DM")),(0,i.kt)("h4",{id:"possible-use-53"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"fuzzy_choquet_DM"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"list<list>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"list<string>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"map"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"int")," ")),(0,i.kt)("h4",{id:"result-49"},"Result:"),(0,i.kt)("p",null,"The index of the candidate that maximizes the Fuzzy Choquet Integral value. The first operand is the list of candidates (a candidate is a list of criterion values); the second operand the list of criterion (list of string); the third operand the weights of each sub-set of criteria (map with list for key and float for value)"),(0,i.kt)("h4",{id:"special-cases-17"},"Special cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"returns -1 is the list of candidates is nil or empty")),(0,i.kt)("h4",{id:"examples-40"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nint var0 <- fuzzy_choquet_DM([[1.0, 7.0],[4.0,2.0],[3.0, 3.0]], ["utility", "price", "size"],[["utility"]::0.5,["size"]::0.1,["price"]::0.4,["utility", "price"]::0.55]); // var0 equals 0\n\n')),(0,i.kt)("h4",{id:"see-also-24"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#promethee_dm"},"promethee_DM"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#electre_dm"},"electre_DM"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#evidence_theory_dm"},"evidence_theory_DM"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"fuzzy_kappa"},(0,i.kt)("inlineCode",{parentName:"h3"},"fuzzy_kappa")),(0,i.kt)("h4",{id:"possible-use-54"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"fuzzy_kappa"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"list<agent>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"list<unknown>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"list<unknown>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"list<float>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"list<unknown>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"matrix<float>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"fuzzy_kappa"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"list<agent>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"list<unknown>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"list<unknown>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"list<float>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"list<unknown>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"matrix<float>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"list<unknown>"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,i.kt)("h4",{id:"result-50"},"Result:"),(0,i.kt)("p",null,"fuzzy kappa indicator for 2 map comparisons: fuzzy_kappa(agents_list,list_vals1,list_vals2, output_similarity_per_agents,categories,fuzzy_categories_matrix, fuzzy_distance). Reference: Visser, H., and T. de Nijs, 2006. The map comparison kit, Environmental Modelling & Software, 21\nfuzzy kappa indicator for 2 map comparisons: fuzzy_kappa(agents_list,list_vals1,list_vals2, output_similarity_per_agents,categories,fuzzy_categories_matrix, fuzzy_distance, weights). Reference: Visser, H., and T. de Nijs, 2006. The map comparison kit, Environmental Modelling & Software, 21"),(0,i.kt)("h4",{id:"examples-41"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nfuzzy_kappa([ag1, ag2, ag3, ag4, ag5],[cat1,cat1,cat2,cat3,cat2],[cat2,cat1,cat2,cat1,cat2], similarity_per_agents,[cat1,cat2,cat3],[[1,0,0],[0,1,0],[0,0,1]], 2) \nfuzzy_kappa([ag1, ag2, ag3, ag4, ag5],[cat1,cat1,cat2,cat3,cat2],[cat2,cat1,cat2,cat1,cat2], similarity_per_agents,[cat1,cat2,cat3],[[1,0,0],[0,1,0],[0,0,1]], 2, [1.0,3.0,2.0,2.0,4.0])\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"fuzzy_kappa_sim"},(0,i.kt)("inlineCode",{parentName:"h3"},"fuzzy_kappa_sim")),(0,i.kt)("h4",{id:"possible-use-55"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"fuzzy_kappa_sim"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"list<agent>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"list<unknown>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"list<unknown>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"list<unknown>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"list<float>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"list<unknown>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"matrix<float>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"fuzzy_kappa_sim"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"list<agent>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"list<unknown>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"list<unknown>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"list<unknown>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"list<float>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"list<unknown>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"matrix<float>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"list<unknown>"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,i.kt)("h4",{id:"result-51"},"Result:"),(0,i.kt)("p",null,"fuzzy kappa simulation indicator for 2 map comparisons: fuzzy_kappa_sim(agents_list,list_vals1,list_vals2, output_similarity_per_agents,fuzzy_transitions_matrix, fuzzy_distance, weights). Reference: Jasper van Vliet, Alex Hagen-Zanker, Jelle Hurkens, Hedwig van Delden, A fuzzy set approach to assess the predictive accuracy of land use simulations, Ecological Modelling, 24 July 2013, Pages 32-42, ISSN 0304-3800,\nfuzzy kappa simulation indicator for 2 map comparisons: fuzzy_kappa_sim(agents_list,list_vals1,list_vals2, output_similarity_per_agents,fuzzy_transitions_matrix, fuzzy_distance). Reference: Jasper van Vliet, Alex Hagen-Zanker, Jelle Hurkens, Hedwig van Delden, A fuzzy set approach to assess the predictive accuracy of land use simulations, Ecological Modelling, 24 July 2013, Pages 32-42, ISSN 0304-3800,"),(0,i.kt)("h4",{id:"examples-42"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nfuzzy_kappa_sim([ag1, ag2, ag3, ag4, ag5], [cat1,cat1,cat2,cat3,cat2],[cat2,cat1,cat2,cat1,cat2], similarity_per_agents,[cat1,cat2,cat3],[[1,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0],[0,0,0,0,1,0,0,0,0],[0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,1]], 2,[1.0,3.0,2.0,2.0,4.0]) \nfuzzy_kappa_sim([ag1, ag2, ag3, ag4, ag5], [cat1,cat1,cat2,cat3,cat2],[cat2,cat1,cat2,cat1,cat2], similarity_per_agents,[cat1,cat2,cat3],[[1,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0],[0,0,0,0,1,0,0,0,0],[0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,1]], 2)\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"gaml_file"},(0,i.kt)("inlineCode",{parentName:"h3"},"gaml_file")),(0,i.kt)("h4",{id:"possible-use-56"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"gaml_file"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"file")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"gaml_file"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"file")," ")),(0,i.kt)("h4",{id:"result-52"},"Result:"),(0,i.kt)("p",null,"Constructs a file of type gaml. Allowed extensions are limited to gaml, experiment"),(0,i.kt)("h4",{id:"special-cases-18"},"Special cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"gaml_file(string): This file constructor allows to read a gaml file (.gaml) ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nfile f <- gaml_file("file.gaml");\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"gaml_file(string,string,string): This file constructor allows to compile a gaml file and run an experiment ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nfile f <- gaml_file("file.gaml", "my_experiment", "my_model");\n')),(0,i.kt)("h4",{id:"see-also-25"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#is_gaml"},"is_gaml"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"gaml_type"},(0,i.kt)("inlineCode",{parentName:"h3"},"gaml_type")),(0,i.kt)("h4",{id:"possible-use-57"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"gaml_type"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"any"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"gaml_type"))),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"gamma"},(0,i.kt)("inlineCode",{parentName:"h3"},"gamma")),(0,i.kt)("h4",{id:"possible-use-58"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"gamma"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,i.kt)("h4",{id:"result-53"},"Result:"),(0,i.kt)("p",null,"Returns the value of the Gamma function at x."),(0,i.kt)("h4",{id:"examples-43"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nfloat var0 <- gamma(5); // var0 equals 24.0\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"gamma_density"},(0,i.kt)("inlineCode",{parentName:"h3"},"gamma_density")),(0,i.kt)("h4",{id:"possible-use-59"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"gamma_density"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,i.kt)("h4",{id:"result-54"},"Result:"),(0,i.kt)("p",null,"gamma_density(x,shape,scale) returns the probability density function (PDF) at the specified point x of the Gamma distribution with the given shape and scale."),(0,i.kt)("h4",{id:"examples-44"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nfloat var0 <- gamma_density(1,9,0.5); // var0 equals 0.731\n\n")),(0,i.kt)("h4",{id:"see-also-26"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#binomial"},"binomial"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#gauss_rnd"},"gauss_rnd"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#lognormal_rnd"},"lognormal_rnd"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#poisson"},"poisson"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#rnd"},"rnd"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#skew_gauss"},"skew_gauss"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#truncated_gauss"},"truncated_gauss"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#weibull_rnd"},"weibull_rnd"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#weibull_density"},"weibull_density"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#lognormal_density"},"lognormal_density"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"gamma_distribution"},(0,i.kt)("inlineCode",{parentName:"h3"},"gamma_distribution")),(0,i.kt)("h4",{id:"possible-use-60"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"gamma_distribution"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,i.kt)("h4",{id:"result-55"},"Result:"),(0,i.kt)("p",null,"Returns the integral from zero to x of the gamma probability density function.  "),(0,i.kt)("h4",{id:"comment-8"},"Comment:"),(0,i.kt)("p",null,"incomplete_gamma(a,x) is equal to pgamma(a,1,x)."),(0,i.kt)("h4",{id:"examples-45"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nfloat var0 <- gamma_distribution(2,3,0.9) with_precision(3); // var0 equals 0.269\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"gamma_distribution_complemented"},(0,i.kt)("inlineCode",{parentName:"h3"},"gamma_distribution_complemented")),(0,i.kt)("h4",{id:"possible-use-61"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"gamma_distribution_complemented"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,i.kt)("h4",{id:"result-56"},"Result:"),(0,i.kt)("p",null,"Returns the integral from x to infinity of the gamma probability density function."),(0,i.kt)("h4",{id:"examples-46"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nfloat var0 <- gamma_distribution_complemented(2,3,0.9) with_precision(3); // var0 equals 0.731\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"gamma_index"},(0,i.kt)("inlineCode",{parentName:"h3"},"gamma_index")),(0,i.kt)("h4",{id:"possible-use-62"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"gamma_index"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"graph"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,i.kt)("h4",{id:"result-57"},"Result:"),(0,i.kt)("p",null,"returns the gamma index of the graph (A measure of connectivity that considers the relationship between the number of observed links and the number of possible links: gamma = e/(3 ",(0,i.kt)("inlineCode",{parentName:"p"},"*")," (v - 2)) - for planar graph."),(0,i.kt)("h4",{id:"examples-47"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \ngraph graphEpidemio <- graph([]); \nfloat var1 <- gamma_index(graphEpidemio); // var1 equals the gamma index of the graph\n\n")),(0,i.kt)("h4",{id:"see-also-27"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#alpha_index"},"alpha_index"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#beta_index"},"beta_index"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#nb_cycles"},"nb_cycles"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#connectivity_index"},"connectivity_index"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"gamma_rnd"},(0,i.kt)("inlineCode",{parentName:"h3"},"gamma_rnd")),(0,i.kt)("h4",{id:"possible-use-63"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"float")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"gamma_rnd"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"gamma_rnd"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"float")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,i.kt)("h4",{id:"result-58"},"Result:"),(0,i.kt)("p",null,"returns a random value from a gamma distribution with specified values of the shape and scale parameters"),(0,i.kt)("h4",{id:"examples-48"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nfloat var0 <- gamma_rnd(9,0.5); // var0 equals 0.731\n\n")),(0,i.kt)("h4",{id:"see-also-28"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#binomial"},"binomial"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#gauss_rnd"},"gauss_rnd"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#lognormal_rnd"},"lognormal_rnd"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#poisson"},"poisson"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#rnd"},"rnd"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#skew_gauss"},"skew_gauss"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#truncated_gauss"},"truncated_gauss"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#weibull_rnd"},"weibull_rnd"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#gamma_trunc_rnd"},"gamma_trunc_rnd"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"gamma_trunc_rnd"},(0,i.kt)("inlineCode",{parentName:"h3"},"gamma_trunc_rnd")),(0,i.kt)("h4",{id:"possible-use-64"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"gamma_trunc_rnd"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"gamma_trunc_rnd"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,i.kt)("h4",{id:"result-59"},"Result:"),(0,i.kt)("p",null,"returns a random value from a truncated gamma distribution (in a range or given only one boundary) with specified values of the shape and scale parameters."),(0,i.kt)("h4",{id:"special-cases-19"},"Special cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"when 1 float and a boolean (isMax) operands are specified, the float value represents the single boundary (max if the boolean is true, min otherwise), ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \ngamma_trunc_rnd(2,3,5,true)\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"when 2 float operands are specified, they are taken as mininimum and maximum values for the result ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \ngamma_trunc_rnd(2,3,0,5)\n")),(0,i.kt)("h4",{id:"see-also-29"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#gamma_rnd"},"gamma_rnd"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#weibull_trunc_rnd"},"weibull_trunc_rnd"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#lognormal_trunc_rnd"},"lognormal_trunc_rnd"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#truncated_gauss"},"truncated_gauss"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"gauss"},(0,i.kt)("inlineCode",{parentName:"h3"},"gauss")),(0,i.kt)("h4",{id:"possible-use-65"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"gauss"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"point"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"float")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"gauss"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"gauss"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"float")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,i.kt)("h4",{id:"result-60"},"Result:"),(0,i.kt)("p",null,"A value from a normally distributed random variable with expected value (mean as first operand) and variance (standardDeviation as second operand). The probability density function of such a variable is a Gaussian.\nThe operator can be used with an operand of type point {meand,standardDeviation}."),(0,i.kt)("h4",{id:"special-cases-20"},"Special cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"when standardDeviation value is 0.0, it always returns the mean value    "),(0,i.kt)("li",{parentName:"ul"},"when the operand is a point, it is read as {mean, standardDeviation}")),(0,i.kt)("h4",{id:"examples-49"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nfloat var0 <- gauss(0,0.3); // var0 equals 0.22354 \nfloat var1 <- gauss({0,0.3}); // var1 equals 0.22354\n\n")),(0,i.kt)("h4",{id:"see-also-30"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#binomial"},"binomial"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#gamma_rnd"},"gamma_rnd"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#lognormal_rnd"},"lognormal_rnd"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#poisson"},"poisson"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#rnd"},"rnd"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#skew_gauss"},"skew_gauss"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#truncated_gauss"},"truncated_gauss"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#weibull_rnd"},"weibull_rnd"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"gauss_rnd"},(0,i.kt)("inlineCode",{parentName:"h3"},"gauss_rnd")),(0,i.kt)("p",null,"   Same signification as ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#gauss"},"gauss")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"generate_barabasi_albert"},(0,i.kt)("inlineCode",{parentName:"h3"},"generate_barabasi_albert")),(0,i.kt)("h4",{id:"possible-use-66"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"generate_barabasi_albert"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"container<unknown,agent>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"species"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"graph")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"generate_barabasi_albert"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"species"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"species"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"graph")," ")),(0,i.kt)("h4",{id:"result-61"},"Result:"),(0,i.kt)("p",null,"returns a random scale-free network (following Barabasi-Albert (BA) model).\nreturns a random scale-free network (following Barabasi-Albert (BA) model).  "),(0,i.kt)("h4",{id:"comment-9"},"Comment:"),(0,i.kt)("p",null,"The Barabasi-Albert (BA) model is an algorithm for generating random scale-free networks using a preferential attachment mechanism. A scale-free network is a network whose degree distribution follows a power law, at least asymptotically.Such networks are widely observed in natural and human-made systems, including the Internet, the world wide web, citation networks, and some social networks. ","[From Wikipedia article]","The map operand should includes following elements:The Barabasi-Albert (BA) model is an algorithm for generating random scale-free networks using a preferential attachment mechanism. A scale-free network is a network whose degree distribution follows a power law, at least asymptotically.Such networks are widely observed in natural and human-made systems, including the Internet, the world wide web, citation networks, and some social networks. ","[From Wikipedia article]","The map operand should includes following elements:"),(0,i.kt)("h4",{id:"special-cases-21"},"Special cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'"agents": list of existing node agents    '),(0,i.kt)("li",{parentName:"ul"},'"edges_species": the species of edges    '),(0,i.kt)("li",{parentName:"ul"},'"size": the graph will contain (size + 1) nodes    '),(0,i.kt)("li",{parentName:"ul"},'"m": the number of edges added per novel node    '),(0,i.kt)("li",{parentName:"ul"},'"synchronized": is the graph and the species of vertices and edges synchronized?    '),(0,i.kt)("li",{parentName:"ul"},'"vertices_specy": the species of vertices    '),(0,i.kt)("li",{parentName:"ul"},'"edges_species": the species of edges    '),(0,i.kt)("li",{parentName:"ul"},'"size": the graph will contain (size + 1) nodes    '),(0,i.kt)("li",{parentName:"ul"},'"m": the number of edges added per novel node    '),(0,i.kt)("li",{parentName:"ul"},'"synchronized": is the graph and the species of vertices and edges synchronized?')),(0,i.kt)("h4",{id:"examples-50"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \ngraph<yourNodeSpecy,yourEdgeSpecy> graphEpidemio <- generate_barabasi_albert( \n        yourListOfNodes, \n        yourEdgeSpecy, \n        3, \n        5, \n        true); \ngraph<yourNodeSpecy,yourEdgeSpecy> graphEpidemio <- generate_barabasi_albert( \n        yourNodeSpecy, \n        yourEdgeSpecy, \n        3, \n        5, \n        true);\n\n")),(0,i.kt)("h4",{id:"see-also-31"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#generate_watts_strogatz"},"generate_watts_strogatz"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"generate_complete_graph"},(0,i.kt)("inlineCode",{parentName:"h3"},"generate_complete_graph")),(0,i.kt)("h4",{id:"possible-use-67"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"generate_complete_graph"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"container<unknown,agent>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"species"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"graph")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"generate_complete_graph"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"species"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"species"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"graph")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"generate_complete_graph"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"container<unknown,agent>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"species"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"graph")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"generate_complete_graph"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"species"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"species"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"graph")," ")),(0,i.kt)("h4",{id:"result-62"},"Result:"),(0,i.kt)("p",null,"returns a fully connected graph.\nreturns a fully connected graph.\nreturns a fully connected graph.\nreturns a fully connected graph.  "),(0,i.kt)("h4",{id:"comment-10"},"Comment:"),(0,i.kt)("p",null,"Arguments should include following elements:Arguments should include following elements:Arguments should include following elements:Arguments should include following elements:"),(0,i.kt)("h4",{id:"special-cases-22"},"Special cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'"vertices_specy": the species of vertices    '),(0,i.kt)("li",{parentName:"ul"},'"edges_species": the species of edges    '),(0,i.kt)("li",{parentName:"ul"},'"size": the graph will contain size nodes.    '),(0,i.kt)("li",{parentName:"ul"},'"synchronized": is the graph and the species of vertices and edges synchronized?    '),(0,i.kt)("li",{parentName:"ul"},'"agents": list of existing node agents    '),(0,i.kt)("li",{parentName:"ul"},'"edges_species": the species of edges    '),(0,i.kt)("li",{parentName:"ul"},'"synchronized": is the graph and the species of vertices and edges synchronized?    '),(0,i.kt)("li",{parentName:"ul"},'"vertices_specy": the species of vertices    '),(0,i.kt)("li",{parentName:"ul"},'"edges_species": the species of edges    '),(0,i.kt)("li",{parentName:"ul"},'"size": the graph will contain size nodes.    '),(0,i.kt)("li",{parentName:"ul"},'"layoutRadius": nodes of the graph will be located on a circle with radius layoutRadius and centered in the environment.    '),(0,i.kt)("li",{parentName:"ul"},'"synchronized": is the graph and the species of vertices and edges synchronized?    '),(0,i.kt)("li",{parentName:"ul"},'"agents": list of existing node agents    '),(0,i.kt)("li",{parentName:"ul"},'"edges_species": the species of edges    '),(0,i.kt)("li",{parentName:"ul"},'"layoutRadius": nodes of the graph will be located on a circle with radius layoutRadius and centered in the environment.    '),(0,i.kt)("li",{parentName:"ul"},'"synchronized": is the graph and the species of vertices and edges synchronized?')),(0,i.kt)("h4",{id:"examples-51"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \ngraph<myVertexSpecy,myEdgeSpecy> myGraph <- generate_complete_graph( \n            myVertexSpecy, \n            myEdgeSpecy, \n            10, \n        true); \ngraph<myVertexSpecy,myEdgeSpecy> myGraph <- generate_complete_graph( \n            myListOfNodes, \n            myEdgeSpecy, \n        true); \ngraph<myVertexSpecy,myEdgeSpecy> myGraph <- generate_complete_graph( \n            myVertexSpecy, \n            myEdgeSpecy, \n            10, 25, \n        true); \ngraph<myVertexSpecy,myEdgeSpecy> myGraph <- generate_complete_graph( \n            myListOfNodes, \n            myEdgeSpecy, \n            25, \n        true);\n\n")),(0,i.kt)("h4",{id:"see-also-32"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#generate_barabasi_albert"},"generate_barabasi_albert"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#generate_watts_strogatz"},"generate_watts_strogatz"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"generate_watts_strogatz"},(0,i.kt)("inlineCode",{parentName:"h3"},"generate_watts_strogatz")),(0,i.kt)("h4",{id:"possible-use-68"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"generate_watts_strogatz"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"container<unknown,agent>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"species"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"graph")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"generate_watts_strogatz"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"species"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"species"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"graph")," ")),(0,i.kt)("h4",{id:"result-63"},"Result:"),(0,i.kt)("p",null,"returns a random small-world network (following Watts-Strogatz model).\nreturns a random small-world network (following Watts-Strogatz model).  "),(0,i.kt)("h4",{id:"comment-11"},"Comment:"),(0,i.kt)("p",null,"The Watts-Strogatz model is a random graph generation model that produces graphs with small-world properties, including short average path lengths and high clustering.A small-world network is a type of graph in which most nodes are not neighbors of one another, but most nodes can be reached from every other by a small number of hops or steps. ","[From Wikipedia article]","The map operand should includes following elements:The Watts-Strogatz model is a random graph generation model that produces graphs with small-world properties, including short average path lengths and high clustering.A small-world network is a type of graph in which most nodes are not neighbors of one another, but most nodes can be reached from every other by a small number of hops or steps. ","[From Wikipedia article]","The map operand should includes following elements:"),(0,i.kt)("h4",{id:"special-cases-23"},"Special cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'"vertices_specy": the species of vertices    '),(0,i.kt)("li",{parentName:"ul"},'"edges_species": the species of edges    '),(0,i.kt)("li",{parentName:"ul"},'"size": the graph will contain (size + 1) nodes. Size must be greater than k.    '),(0,i.kt)("li",{parentName:"ul"},'"p": probability to "rewire" an edge. So it must be between 0 and 1. The parameter is often called beta in the literature.    '),(0,i.kt)("li",{parentName:"ul"},'"k": the base degree of each node. k must be greater than 2 and even.    '),(0,i.kt)("li",{parentName:"ul"},'"synchronized": is the graph and the species of vertices and edges synchronized?    '),(0,i.kt)("li",{parentName:"ul"},'"agents": list of existing node agents    '),(0,i.kt)("li",{parentName:"ul"},'"edges_species": the species of edges    '),(0,i.kt)("li",{parentName:"ul"},'"p": probability to "rewire" an edge. So it must be between 0 and 1. The parameter is often called beta in the literature.    '),(0,i.kt)("li",{parentName:"ul"},'"k": the base degree of each node. k must be greater than 2 and even.    '),(0,i.kt)("li",{parentName:"ul"},'"synchronized": is the graph and the species of vertices and edges synchronized?')),(0,i.kt)("h4",{id:"examples-52"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \ngraph<myVertexSpecy,myEdgeSpecy> myGraph <- generate_watts_strogatz( \n            myVertexSpecy, \n            myEdgeSpecy, \n            2, \n            0.3, \n            2, \n        true); \ngraph<myVertexSpecy,myEdgeSpecy> myGraph <- generate_watts_strogatz( \n            myListOfNodes, \n            myEdgeSpecy, \n            0.3, \n            2, \n        true);\n\n")),(0,i.kt)("h4",{id:"see-also-33"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#generate_barabasi_albert"},"generate_barabasi_albert"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"geojson_file"},(0,i.kt)("inlineCode",{parentName:"h3"},"geojson_file")),(0,i.kt)("h4",{id:"possible-use-69"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"geojson_file"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"file")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"string")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"geojson_file"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"int")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"file")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"geojson_file"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"file")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"string")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"geojson_file"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"string")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"file")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"geojson_file"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"file")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"string")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"geojson_file"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"file")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"geojson_file"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"file")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"geojson_file"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"file")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"geojson_file"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"file")," ")),(0,i.kt)("h4",{id:"result-64"},"Result:"),(0,i.kt)("p",null,"Constructs a file of type geojson. Allowed extensions are limited to json, geojson, geo.json"),(0,i.kt)("h4",{id:"special-cases-24"},"Special cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"geojson_file(string): This file constructor allows to read a geojson file (",(0,i.kt)("a",{parentName:"li",href:"https://geojson.org/"},"https://geojson.org/"),") ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nfile f <- geojson_file("file.json");\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"geojson_file(string,int): This file constructor allows to read a geojson file and specifying the coordinates system code, as an int ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nfile f <- geojson_file("file.json", 32648);\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"geojson_file(string,string): This file constructor allows to read a geojson file and specifying the coordinates system code (epg,...,), as a string ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nfile f <- geojson_file("file.json", "EPSG:32648");\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"geojson_file(string,bool): This file constructor allows to read a geojson file and take a potential z value (not taken in account by default) ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nfile f <- geojson_file("file.json", true);\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"geojson_file(string,int,bool): This file constructor allows to read a geojson file, specifying the coordinates system code, as an int and take a potential z value (not taken in account by default) ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nfile f <- geojson_file("file.json",32648, true);\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"geojson_file(string,string,bool): This file constructor allows to read a geojson file, specifying the coordinates system code (epg,...,), as a string and take a potential z value (not taken in account by default ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nfile f <- geojson_file("file.json", "EPSG:32648",true);\n')),(0,i.kt)("h4",{id:"see-also-34"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#is_geojson"},"is_geojson"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"geometric_mean"},(0,i.kt)("inlineCode",{parentName:"h3"},"geometric_mean")),(0,i.kt)("h4",{id:"possible-use-70"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"geometric_mean"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"container"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,i.kt)("h4",{id:"result-65"},"Result:"),(0,i.kt)("p",null,"the geometric mean of the elements of the operand. See ",(0,i.kt)("a",{href:"http://en.wikipedia.org/wiki/Geometric_mean"},"Geometric_mean")," for more details.  "),(0,i.kt)("h4",{id:"comment-12"},"Comment:"),(0,i.kt)("p",null,"The operator casts all the numerical element of the list into float. The elements that are not numerical are discarded."),(0,i.kt)("h4",{id:"examples-53"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nfloat var0 <- geometric_mean ([4.5, 3.5, 5.5, 7.0]); // var0 equals 4.962326343467649\n\n")),(0,i.kt)("h4",{id:"see-also-35"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#mean"},"mean"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#median"},"median"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#harmonic_mean"},"harmonic_mean"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"geometry"},(0,i.kt)("inlineCode",{parentName:"h3"},"geometry")),(0,i.kt)("h4",{id:"possible-use-71"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"geometry"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"any"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"geometry"))),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"geometry_collection"},(0,i.kt)("inlineCode",{parentName:"h3"},"geometry_collection")),(0,i.kt)("h4",{id:"possible-use-72"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"geometry_collection"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"container<unknown,geometry>"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"geometry")," ")),(0,i.kt)("h4",{id:"result-66"},"Result:"),(0,i.kt)("p",null,"A geometry collection (multi-geometry) composed of the given list of geometries."),(0,i.kt)("h4",{id:"special-cases-25"},"Special cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"if the operand is nil, returns the point geometry {0,0}    "),(0,i.kt)("li",{parentName:"ul"},"if the operand is composed of a single geometry, returns a copy of the geometry.")),(0,i.kt)("h4",{id:"examples-54"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \ngeometry var0 <- geometry_collection([{0,0}, {0,10}, {10,10}, {10,0}]); // var0 equals a geometry composed of the 4 points (multi-point).\n\n")),(0,i.kt)("h4",{id:"see-also-36"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#around"},"around"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#circle"},"circle"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#cone"},"cone"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#link"},"link"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#norm"},"norm"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#point"},"point"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#polygone"},"polygone"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#rectangle"},"rectangle"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#square"},"square"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#triangle"},"triangle"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#line"},"line"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get"},(0,i.kt)("inlineCode",{parentName:"h3"},"get")),(0,i.kt)("h4",{id:"possible-use-73"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"geometry")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"string")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"geometry")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"string")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown")," ")),(0,i.kt)("h4",{id:"result-67"},"Result:"),(0,i.kt)("p",null,"Reads an attribute of the specified geometry (left operand). The attribute name is specified by the right operand.\nReads an attribute of the specified agent (left operand). The attribute name is specified by the right operand."),(0,i.kt)("h4",{id:"special-cases-26"},"Special cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Reading the attribute of a geometry ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nstring geom_area <- a_geometry get('area');     // reads then 'area' attribute of 'a_geometry' variable then assigns the returned value to the geom_area variable\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Reading the attribute of another agent ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nstring agent_name <- an_agent get('name');     // reads then 'name' attribute of an_agent then assigns the returned value to the agent_name variable\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_about"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_about")),(0,i.kt)("h4",{id:"possible-use-74"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_about"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"emotion"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"predicate")," ")),(0,i.kt)("h4",{id:"result-68"},"Result:"),(0,i.kt)("p",null,"get the about value of the given emotion"),(0,i.kt)("h4",{id:"examples-55"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nget_about(emotion)\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_agent"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_agent")),(0,i.kt)("h4",{id:"possible-use-75"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_agent"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"social_link"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ")),(0,i.kt)("h4",{id:"result-69"},"Result:"),(0,i.kt)("p",null,"get the agent value of the given social link"),(0,i.kt)("h4",{id:"examples-56"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nget_agent(social_link1)\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_agent_cause"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_agent_cause")),(0,i.kt)("h4",{id:"possible-use-76"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_agent_cause"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"predicate"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"agent")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_agent_cause"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"emotion"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ")),(0,i.kt)("h4",{id:"result-70"},"Result:"),(0,i.kt)("p",null,"evaluate the agent_cause value of a predicate\nget the agent cause value of the given emotion"),(0,i.kt)("h4",{id:"examples-57"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nget_agent_cause(pred1) \nget_agent_cause(emotion)\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_belief_op"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_belief_op")),(0,i.kt)("h4",{id:"possible-use-77"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_belief_op"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"predicate")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"mental_state")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_belief_op"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"predicate"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"mental_state")," ")),(0,i.kt)("h4",{id:"result-71"},"Result:"),(0,i.kt)("p",null,"get the belief in the belief base with the given predicate."),(0,i.kt)("h4",{id:"examples-58"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nmental_state var0 <- get_belief_op(self,predicate("has_water")); // var0 equals nil\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_belief_with_name_op"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_belief_with_name_op")),(0,i.kt)("h4",{id:"possible-use-78"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_belief_with_name_op"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"string")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"mental_state")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_belief_with_name_op"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"mental_state")," ")),(0,i.kt)("h4",{id:"result-72"},"Result:"),(0,i.kt)("p",null,"get the belief in the belief base with the given name."),(0,i.kt)("h4",{id:"examples-59"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nmental_state var0 <- get_belief_with_name_op(self,"has_water"); // var0 equals nil\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_beliefs_op"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_beliefs_op")),(0,i.kt)("h4",{id:"possible-use-79"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_beliefs_op"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"predicate")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"list<mental_state>")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_beliefs_op"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"predicate"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"list<mental_state>")," ")),(0,i.kt)("h4",{id:"result-73"},"Result:"),(0,i.kt)("p",null,"get the beliefs in the belief base with the given predicate."),(0,i.kt)("h4",{id:"examples-60"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nget_beliefs_op(self,predicate("has_water"))\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_beliefs_with_name_op"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_beliefs_with_name_op")),(0,i.kt)("h4",{id:"possible-use-80"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_beliefs_with_name_op"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"string")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"list<mental_state>")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_beliefs_with_name_op"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"list<mental_state>")," ")),(0,i.kt)("h4",{id:"result-74"},"Result:"),(0,i.kt)("p",null,"get the list of beliefs in the belief base which predicate has the given name."),(0,i.kt)("h4",{id:"examples-61"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nget_beliefs_with_name_op(self,"has_water")\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_current_intention_op"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_current_intention_op")),(0,i.kt)("h4",{id:"possible-use-81"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_current_intention_op"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"mental_state")," ")),(0,i.kt)("h4",{id:"result-75"},"Result:"),(0,i.kt)("p",null,"get the current intention."),(0,i.kt)("h4",{id:"examples-62"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nmental_state var0 <- get_current_intention_op(self); // var0 equals nil\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_decay"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_decay")),(0,i.kt)("h4",{id:"possible-use-82"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_decay"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"emotion"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,i.kt)("h4",{id:"result-76"},"Result:"),(0,i.kt)("p",null,"get the decay value of the given emotion"),(0,i.kt)("h4",{id:"examples-63"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nget_decay(emotion)\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_desire_op"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_desire_op")),(0,i.kt)("h4",{id:"possible-use-83"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_desire_op"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"predicate")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"mental_state")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_desire_op"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"predicate"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"mental_state")," ")),(0,i.kt)("h4",{id:"result-77"},"Result:"),(0,i.kt)("p",null,"get the desire in the desire base with the given predicate."),(0,i.kt)("h4",{id:"examples-64"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nmental_state var0 <- get_belief_op(self,predicate("has_water")); // var0 equals nil\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_desire_with_name_op"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_desire_with_name_op")),(0,i.kt)("h4",{id:"possible-use-84"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_desire_with_name_op"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"string")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"mental_state")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_desire_with_name_op"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"mental_state")," ")),(0,i.kt)("h4",{id:"result-78"},"Result:"),(0,i.kt)("p",null,"get the desire in the desire base with the given name."),(0,i.kt)("h4",{id:"examples-65"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nmental_state var0 <- get_desire_with_name_op(self,"has_water"); // var0 equals nil\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_desires_op"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_desires_op")),(0,i.kt)("h4",{id:"possible-use-85"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_desires_op"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"predicate")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"list<mental_state>")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_desires_op"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"predicate"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"list<mental_state>")," ")),(0,i.kt)("h4",{id:"result-79"},"Result:"),(0,i.kt)("p",null,"get the desires in the desire base with the given predicate."),(0,i.kt)("h4",{id:"examples-66"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nget_desires_op(self,predicate("has_water"))\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_desires_with_name_op"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_desires_with_name_op")),(0,i.kt)("h4",{id:"possible-use-86"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_desires_with_name_op"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"string")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"list<mental_state>")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_desires_with_name_op"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"list<mental_state>")," ")),(0,i.kt)("h4",{id:"result-80"},"Result:"),(0,i.kt)("p",null,"get the list of desires in the desire base which predicate has the given name."),(0,i.kt)("h4",{id:"examples-67"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nget_desires_with_name_op(self,"has_water")\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_dominance"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_dominance")),(0,i.kt)("h4",{id:"possible-use-87"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_dominance"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"social_link"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,i.kt)("h4",{id:"result-81"},"Result:"),(0,i.kt)("p",null,"get the dominance value of the given social link"),(0,i.kt)("h4",{id:"examples-68"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nget_dominance(social_link1)\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_familiarity"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_familiarity")),(0,i.kt)("h4",{id:"possible-use-88"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_familiarity"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"social_link"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,i.kt)("h4",{id:"result-82"},"Result:"),(0,i.kt)("p",null,"get the familiarity value of the given social link"),(0,i.kt)("h4",{id:"examples-69"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nget_familiarity(social_link1)\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_ideal_op"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_ideal_op")),(0,i.kt)("h4",{id:"possible-use-89"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_ideal_op"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"predicate")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"mental_state")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_ideal_op"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"predicate"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"mental_state")," ")),(0,i.kt)("h4",{id:"result-83"},"Result:"),(0,i.kt)("p",null,"get the ideal in the ideal base with the given name."),(0,i.kt)("h4",{id:"examples-70"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nmental_state var0 <- get_ideal_op(self,predicate("has_water")); // var0 equals nil\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_ideal_with_name_op"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_ideal_with_name_op")),(0,i.kt)("h4",{id:"possible-use-90"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_ideal_with_name_op"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"string")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"mental_state")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_ideal_with_name_op"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"mental_state")," ")),(0,i.kt)("h4",{id:"result-84"},"Result:"),(0,i.kt)("p",null,"get the ideal in the ideal base with the given name."),(0,i.kt)("h4",{id:"examples-71"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nmental_state var0 <- get_ideal_with_name_op(self,"has_water"); // var0 equals nil\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_ideals_op"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_ideals_op")),(0,i.kt)("h4",{id:"possible-use-91"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_ideals_op"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"predicate")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"list<mental_state>")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_ideals_op"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"predicate"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"list<mental_state>")," ")),(0,i.kt)("h4",{id:"result-85"},"Result:"),(0,i.kt)("p",null,"get the ideal in the ideal base with the given name."),(0,i.kt)("h4",{id:"examples-72"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nget_ideals_op(self,predicate("has_water"))\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_ideals_with_name_op"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_ideals_with_name_op")),(0,i.kt)("h4",{id:"possible-use-92"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_ideals_with_name_op"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"string")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"list<mental_state>")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_ideals_with_name_op"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"list<mental_state>")," ")),(0,i.kt)("h4",{id:"result-86"},"Result:"),(0,i.kt)("p",null,"get the list of ideals in the ideal base which predicate has the given name."),(0,i.kt)("h4",{id:"examples-73"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nget_ideals_with_name_op(self,"has_water")\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_intensity"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_intensity")),(0,i.kt)("h4",{id:"possible-use-93"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_intensity"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"emotion"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,i.kt)("h4",{id:"result-87"},"Result:"),(0,i.kt)("p",null,"get the intensity value of the given emotion"),(0,i.kt)("h4",{id:"examples-74"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nget_intensity(emo1)\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_intention_op"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_intention_op")),(0,i.kt)("h4",{id:"possible-use-94"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_intention_op"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"predicate")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"mental_state")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_intention_op"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"predicate"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"mental_state")," ")),(0,i.kt)("h4",{id:"result-88"},"Result:"),(0,i.kt)("p",null,"get the intention in the intention base with the given predicate."),(0,i.kt)("h4",{id:"examples-75"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nget_intention_op(self,predicate("has_water"))\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_intention_with_name_op"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_intention_with_name_op")),(0,i.kt)("h4",{id:"possible-use-95"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_intention_with_name_op"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"string")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"mental_state")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_intention_with_name_op"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"mental_state")," ")),(0,i.kt)("h4",{id:"result-89"},"Result:"),(0,i.kt)("p",null,"get the intention in the intention base with the given name."),(0,i.kt)("h4",{id:"examples-76"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nget_intention_with_name_op(self,"has_water")\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_intentions_op"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_intentions_op")),(0,i.kt)("h4",{id:"possible-use-96"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_intentions_op"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"predicate")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"list<mental_state>")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_intentions_op"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"predicate"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"list<mental_state>")," ")),(0,i.kt)("h4",{id:"result-90"},"Result:"),(0,i.kt)("p",null,"get the intentions in the intention base with the given predicate."),(0,i.kt)("h4",{id:"examples-77"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nget_intentions_op(self,predicate("has_water"))\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_intentions_with_name_op"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_intentions_with_name_op")),(0,i.kt)("h4",{id:"possible-use-97"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_intentions_with_name_op"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"string")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"list<mental_state>")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_intentions_with_name_op"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"list<mental_state>")," ")),(0,i.kt)("h4",{id:"result-91"},"Result:"),(0,i.kt)("p",null,"get the list of intentions in the intention base which predicate has the given name."),(0,i.kt)("h4",{id:"examples-78"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nget_intentions_with_name_op(self,"has_water")\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_lifetime"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_lifetime")),(0,i.kt)("h4",{id:"possible-use-98"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_lifetime"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"mental_state"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"int")," ")),(0,i.kt)("h4",{id:"result-92"},"Result:"),(0,i.kt)("p",null,"get the lifetime value of the given mental state"),(0,i.kt)("h4",{id:"examples-79"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nget_lifetime(mental_state1)\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_liking"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_liking")),(0,i.kt)("h4",{id:"possible-use-99"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_liking"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"social_link"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,i.kt)("h4",{id:"result-93"},"Result:"),(0,i.kt)("p",null,"get the liking value of the given social link"),(0,i.kt)("h4",{id:"examples-80"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nget_liking(social_link1)\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_modality"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_modality")),(0,i.kt)("h4",{id:"possible-use-100"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_modality"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"mental_state"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"string")," ")),(0,i.kt)("h4",{id:"result-94"},"Result:"),(0,i.kt)("p",null,"get the modality value of the given mental state"),(0,i.kt)("h4",{id:"examples-81"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nget_modality(mental_state1)\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_obligation_op"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_obligation_op")),(0,i.kt)("h4",{id:"possible-use-101"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_obligation_op"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"predicate")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"mental_state")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_obligation_op"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"predicate"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"mental_state")," ")),(0,i.kt)("h4",{id:"result-95"},"Result:"),(0,i.kt)("p",null,"get the obligation in the obligation base with the given predicate."),(0,i.kt)("h4",{id:"examples-82"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nmental_state var0 <- get_obligation_op(self,predicate("has_water")); // var0 equals nil\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_obligation_with_name_op"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_obligation_with_name_op")),(0,i.kt)("h4",{id:"possible-use-102"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_obligation_with_name_op"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"string")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"mental_state")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_obligation_with_name_op"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"mental_state")," ")),(0,i.kt)("h4",{id:"result-96"},"Result:"),(0,i.kt)("p",null,"get the obligation in the obligation base with the given name."),(0,i.kt)("h4",{id:"examples-83"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nmental_state var0 <- get_obligation_with_name_op(self,"has_water"); // var0 equals nil\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_obligations_op"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_obligations_op")),(0,i.kt)("h4",{id:"possible-use-103"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_obligations_op"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"predicate")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"list<mental_state>")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_obligations_op"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"predicate"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"list<mental_state>")," ")),(0,i.kt)("h4",{id:"result-97"},"Result:"),(0,i.kt)("p",null,"get the obligations in the obligation base with the given predicate."),(0,i.kt)("h4",{id:"examples-84"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nget_obligations_op(self,predicate("has_water"))\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_obligations_with_name_op"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_obligations_with_name_op")),(0,i.kt)("h4",{id:"possible-use-104"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_obligations_with_name_op"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"string")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"list<mental_state>")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_obligations_with_name_op"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"list<mental_state>")," ")),(0,i.kt)("h4",{id:"result-98"},"Result:"),(0,i.kt)("p",null,"get the list of obligations in the obligation base which predicate has the given name."),(0,i.kt)("h4",{id:"examples-85"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nget_obligations_with_name_op(self,"has_water")\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_plan_name"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_plan_name")),(0,i.kt)("h4",{id:"possible-use-105"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_plan_name"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"BDIPlan"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"string")," ")),(0,i.kt)("h4",{id:"result-99"},"Result:"),(0,i.kt)("p",null,"get the name of a given plan"),(0,i.kt)("h4",{id:"examples-86"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nget_plan_name(agent.current_plan)\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_predicate"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_predicate")),(0,i.kt)("h4",{id:"possible-use-106"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_predicate"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"mental_state"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"predicate")," ")),(0,i.kt)("h4",{id:"result-100"},"Result:"),(0,i.kt)("p",null,"get the predicate value of the given mental state"),(0,i.kt)("h4",{id:"examples-87"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nget_predicate(mental_state1)\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_solidarity"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_solidarity")),(0,i.kt)("h4",{id:"possible-use-107"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_solidarity"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"social_link"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,i.kt)("h4",{id:"result-101"},"Result:"),(0,i.kt)("p",null,"get the solidarity value of the given social link"),(0,i.kt)("h4",{id:"examples-88"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nget_solidarity(social_link1)\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_strength"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_strength")),(0,i.kt)("h4",{id:"possible-use-108"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_strength"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"mental_state"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,i.kt)("h4",{id:"result-102"},"Result:"),(0,i.kt)("p",null,"get the strength value of the given mental state"),(0,i.kt)("h4",{id:"examples-89"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nget_strength(mental_state1)\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_super_intention"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_super_intention")),(0,i.kt)("h4",{id:"possible-use-109"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_super_intention"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"predicate"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"mental_state")," ")),(0,i.kt)("h4",{id:"result-103"},"Result:"),(0,i.kt)("p",null,"get the super intention linked to a mental state"),(0,i.kt)("h4",{id:"examples-90"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nget_super_intention(get_belief(pred1))\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_trust"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_trust")),(0,i.kt)("h4",{id:"possible-use-110"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_trust"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"social_link"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,i.kt)("h4",{id:"result-104"},"Result:"),(0,i.kt)("p",null,"get the familiarity value of the given social link"),(0,i.kt)("h4",{id:"examples-91"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nget_familiarity(social_link1)\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_truth"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_truth")),(0,i.kt)("h4",{id:"possible-use-111"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_truth"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"predicate"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")," ")),(0,i.kt)("h4",{id:"result-105"},"Result:"),(0,i.kt)("p",null,"evaluate the truth value of a predicate"),(0,i.kt)("h4",{id:"examples-92"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nget_truth(pred1)\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_uncertainties_op"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_uncertainties_op")),(0,i.kt)("h4",{id:"possible-use-112"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_uncertainties_op"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"predicate")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"list<mental_state>")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_uncertainties_op"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"predicate"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"list<mental_state>")," ")),(0,i.kt)("h4",{id:"result-106"},"Result:"),(0,i.kt)("p",null,"get the uncertainties in the uncertainty base with the given predicate."),(0,i.kt)("h4",{id:"examples-93"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nget_uncertainties_op(self,predicate("has_water"))\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_uncertainties_with_name_op"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_uncertainties_with_name_op")),(0,i.kt)("h4",{id:"possible-use-113"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_uncertainties_with_name_op"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"string")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"list<mental_state>")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_uncertainties_with_name_op"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"list<mental_state>")," ")),(0,i.kt)("h4",{id:"result-107"},"Result:"),(0,i.kt)("p",null,"get the list of uncertainties in the uncertainty base which predicate has the given name."),(0,i.kt)("h4",{id:"examples-94"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nget_uncertainties_with_name_op(self,"has_water")\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_uncertainty_op"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_uncertainty_op")),(0,i.kt)("h4",{id:"possible-use-114"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_uncertainty_op"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"predicate")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"mental_state")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_uncertainty_op"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"predicate"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"mental_state")," ")),(0,i.kt)("h4",{id:"result-108"},"Result:"),(0,i.kt)("p",null,"get the uncertainty in the uncertainty base with the given predicate."),(0,i.kt)("h4",{id:"examples-95"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nmental_state var0 <- get_uncertainty_op(self,predicate("has_water")); // var0 equals nil\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_uncertainty_with_name_op"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_uncertainty_with_name_op")),(0,i.kt)("h4",{id:"possible-use-115"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_uncertainty_with_name_op"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"string")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"mental_state")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_uncertainty_with_name_op"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"mental_state")," ")),(0,i.kt)("h4",{id:"result-109"},"Result:"),(0,i.kt)("p",null,"get the uncertainty in the uncertainty base with the given name."),(0,i.kt)("h4",{id:"examples-96"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nmental_state var0 <- get_uncertainty_with_name_op(self,"has_water"); // var0 equals nil\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get_values"},(0,i.kt)("inlineCode",{parentName:"h3"},"get_values")),(0,i.kt)("h4",{id:"possible-use-116"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"get_values"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"predicate"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"map<string,unknown>")," ")),(0,i.kt)("h4",{id:"result-110"},"Result:"),(0,i.kt)("p",null,"return the map values of a predicate"),(0,i.kt)("h4",{id:"examples-97"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nget_values(pred1)\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"gif_file"},(0,i.kt)("inlineCode",{parentName:"h3"},"gif_file")),(0,i.kt)("h4",{id:"possible-use-117"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"gif_file"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"file")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"string")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"gif_file"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"matrix<int>")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"file")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"gif_file"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"matrix<int>"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"file")," ")),(0,i.kt)("h4",{id:"result-111"},"Result:"),(0,i.kt)("p",null,"Constructs a file of type gif. Allowed extensions are limited to gif"),(0,i.kt)("h4",{id:"special-cases-27"},"Special cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"gif_file(string): This file constructor allows to read a gif file ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \ngif_file f <- gif_file("file.gif");\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"gif_file(string,matrix","<","int>): This file constructor allows to store a matrix in a gif file (it does not save it - just store it in memory) ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \ngif_file f <- gif_file("file.gif",matrix([10,10],[10,10]));\n')),(0,i.kt)("h4",{id:"see-also-37"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#is_gif"},"is_gif"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"gini"},(0,i.kt)("inlineCode",{parentName:"h3"},"gini")),(0,i.kt)("h4",{id:"possible-use-118"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"gini"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"list<float>"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float"))),(0,i.kt)("h4",{id:"special-cases-28"},"Special cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"return the Gini Index of the given list of values (list of floats) ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nfloat var0 <- gini([1.0, 0.5, 2.0]); // var0 equals the gini index computed i.e. 0.2857143\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"gml_file"},(0,i.kt)("inlineCode",{parentName:"h3"},"gml_file")),(0,i.kt)("h4",{id:"possible-use-119"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"gml_file"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"file")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"string")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"gml_file"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"int")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"file")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"gml_file"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"file")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"string")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"gml_file"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"string")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"file")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"gml_file"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"file")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"string")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"gml_file"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"file")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"gml_file"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"file")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"gml_file"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"file")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"gml_file"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"file")," ")),(0,i.kt)("h4",{id:"result-112"},"Result:"),(0,i.kt)("p",null,"Constructs a file of type gml. Allowed extensions are limited to gml"),(0,i.kt)("h4",{id:"special-cases-29"},"Special cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"gml_file(string): This file constructor allows to read a gml file ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nfile f <- gml_file("file.gml");\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"gml_file(string,int): This file constructor allows to read a gml file and specifying the coordinates system code, as an int (epsg code) ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nfile f <- gml_file("file.gml", 32648);\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"gml_file(string,string): This file constructor allows to read a gml file and specifying the coordinates system code (epg,...,), as a string ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nfile f <- gml_file("file.gml", "EPSG:32648");\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"gml_file(string,bool): This file constructor allows to read a gml file and take a potential z value (not taken in account by default) ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nfile f <- gml_file("file.gml", true);\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"gml_file(string,int,bool): This file constructor allows to read a gml file, specifying the coordinates system code, as an int (epsg code) and take a potential z value (not taken in account by default) ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nfile f <- gml_file("file.gml", 32648, true);\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"gml_file(string,string,bool): This file constructor allows to read a gml file, specifying the coordinates system code (epg,...,), as a string and take a potential z value (not taken in account by default ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nfile f <- gml_file("file.gml", "EPSG:32648",true);\n')),(0,i.kt)("h4",{id:"see-also-38"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#is_gml"},"is_gml"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"graph"},(0,i.kt)("inlineCode",{parentName:"h3"},"graph")),(0,i.kt)("h4",{id:"possible-use-120"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"graph"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"any"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"graph"))),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"grayscale"},(0,i.kt)("inlineCode",{parentName:"h3"},"grayscale")),(0,i.kt)("h4",{id:"possible-use-121"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"grayscale"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"rgb"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"rgb")," ")),(0,i.kt)("h4",{id:"result-113"},"Result:"),(0,i.kt)("p",null,"Converts rgb color to grayscale value  "),(0,i.kt)("h4",{id:"comment-13"},"Comment:"),(0,i.kt)("p",null,"r=red, g=green, b=blue. Between 0 and 255 and gray = 0.299 ",(0,i.kt)("inlineCode",{parentName:"p"},"*")," red + 0.587 ",(0,i.kt)("inlineCode",{parentName:"p"},"*")," green + 0.114 ",(0,i.kt)("inlineCode",{parentName:"p"},"*")," blue (Photoshop value)"),(0,i.kt)("h4",{id:"examples-98"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nrgb var0 <- grayscale (rgb(255,0,0)); // var0 equals to a dark grey\n\n")),(0,i.kt)("h4",{id:"see-also-39"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#rgb"},"rgb"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#hsb"},"hsb"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"grid_at"},(0,i.kt)("inlineCode",{parentName:"h3"},"grid_at")),(0,i.kt)("h4",{id:"possible-use-122"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"species")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"grid_at"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"point")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"agent")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"grid_at"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"species")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"point"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ")),(0,i.kt)("h4",{id:"result-114"},"Result:"),(0,i.kt)("p",null,"returns the cell of the grid (right-hand operand) at the position given by the right-hand operand  "),(0,i.kt)("h4",{id:"comment-14"},"Comment:"),(0,i.kt)("p",null,"If the left-hand operand is a point of floats, it is used as a point of ints."),(0,i.kt)("h4",{id:"special-cases-30"},"Special cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"if the left-hand operand is not a grid cell species, returns nil")),(0,i.kt)("h4",{id:"examples-99"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nagent var0 <- grid_cell grid_at {1,2}; // var0 equals the agent grid_cell with grid_x=1 and grid_y = 2\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"grid_cells_to_graph"},(0,i.kt)("inlineCode",{parentName:"h3"},"grid_cells_to_graph")),(0,i.kt)("h4",{id:"possible-use-123"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"grid_cells_to_graph"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"container"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"graph")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"container")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"grid_cells_to_graph"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"species")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"graph")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"grid_cells_to_graph"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"container")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"species"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"graph")," ")),(0,i.kt)("h4",{id:"result-115"},"Result:"),(0,i.kt)("p",null,"creates a graph from a list of cells (operand). An edge is created between neighbors."),(0,i.kt)("h4",{id:"examples-100"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nmy_cell_graph<-grid_cells_to_graph(cells_list)\n\n")),(0,i.kt)("h4",{id:"see-also-40"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#as_intersection_graph"},"as_intersection_graph"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#as_edge_graph"},"as_edge_graph"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"grid_file"},(0,i.kt)("inlineCode",{parentName:"h3"},"grid_file")),(0,i.kt)("h4",{id:"possible-use-124"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"grid_file"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"file")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"string")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"grid_file"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"int")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"file")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"grid_file"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"file")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"string")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"grid_file"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"string")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"file")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"grid_file"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"string")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"file")," ")),(0,i.kt)("h4",{id:"result-116"},"Result:"),(0,i.kt)("p",null,"Constructs a file of type grid. Allowed extensions are limited to asc, tif"),(0,i.kt)("h4",{id:"special-cases-31"},"Special cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"grid_file(string): This file constructor allows to read a asc file or a tif (geotif) file ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nfile f <- grid_file("file.asc");\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"grid_file(string,int): This file constructor allows to read a asc file or a tif (geotif) file specifying the coordinates system code, as an int (epsg code) ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nfile f <- grid_file("file.asc", 32648);\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"grid_file(string,string): This file constructor allows to read a asc file or a tif (geotif) file specifying the coordinates system code (epg,...,), as a string  ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nfile f <- grid_file("file.asc","EPSG:32648");\n')),(0,i.kt)("h4",{id:"see-also-41"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#is_grid"},"is_grid"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"group_by"},(0,i.kt)("inlineCode",{parentName:"h3"},"group_by")),(0,i.kt)("h4",{id:"possible-use-125"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"container")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"group_by"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"any expression")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"map")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"group_by"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"container")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"any expression"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"map")," ")),(0,i.kt)("h4",{id:"result-117"},"Result:"),(0,i.kt)("p",null,"Returns a map, where the keys take the possible values of the right-hand operand and the map values are the list of elements of the left-hand operand associated to the key value  "),(0,i.kt)("h4",{id:"comment-15"},"Comment:"),(0,i.kt)("p",null,"in the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements."),(0,i.kt)("h4",{id:"special-cases-32"},"Special cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"if the left-hand operand is nil, group_by throws an error")),(0,i.kt)("h4",{id:"examples-101"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nmap var0 <- [1,2,3,4,5,6,7,8] group_by (each > 3); // var0 equals [false::[1, 2, 3], true::[4, 5, 6, 7, 8]] \nmap var1 <- g2 group_by (length(g2 out_edges_of each) ); // var1 equals [ 0::[node9, node7, node10, node8, node11], 1::[node6], 2::[node5], 3::[node4]] \nmap var2 <- (list(node) group_by (round(node(each).location.x)); // var2 equals [32::[node5], 21::[node1], 4::[node0], 66::[node2], 96::[node3]] \nmap<bool,list> var3 <- [1::2, 3::4, 5::6] group_by (each > 4); // var3 equals [false::[2, 4], true::[6]]\n\n")),(0,i.kt)("h4",{id:"see-also-42"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#first_with"},"first_with"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#last_with"},"last_with"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#where"},"where"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"harmonic_mean"},(0,i.kt)("inlineCode",{parentName:"h3"},"harmonic_mean")),(0,i.kt)("h4",{id:"possible-use-126"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"harmonic_mean"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"container"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,i.kt)("h4",{id:"result-118"},"Result:"),(0,i.kt)("p",null,"the harmonic mean of the elements of the operand. See ",(0,i.kt)("a",{href:"http://en.wikipedia.org/wiki/Harmonic_mean"},"Harmonic_mean")," for more details.  "),(0,i.kt)("h4",{id:"comment-16"},"Comment:"),(0,i.kt)("p",null,"The operator casts all the numerical element of the list into float. The elements that are not numerical are discarded."),(0,i.kt)("h4",{id:"examples-102"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nfloat var0 <- harmonic_mean ([4.5, 3.5, 5.5, 7.0]); // var0 equals 4.804159445407279\n\n")),(0,i.kt)("h4",{id:"see-also-43"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#mean"},"mean"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#median"},"median"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsDH#geometric_mean"},"geometric_mean"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"has_belief_op"},(0,i.kt)("inlineCode",{parentName:"h3"},"has_belief_op")),(0,i.kt)("h4",{id:"possible-use-127"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"has_belief_op"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"predicate")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"has_belief_op"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"predicate"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")," ")),(0,i.kt)("h4",{id:"result-119"},"Result:"),(0,i.kt)("p",null,"indicates if there already is a belief about the given predicate."),(0,i.kt)("h4",{id:"examples-103"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nbool var0 <- has_belief_op(self,predicate("has_water")); // var0 equals false\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"has_belief_with_name_op"},(0,i.kt)("inlineCode",{parentName:"h3"},"has_belief_with_name_op")),(0,i.kt)("h4",{id:"possible-use-128"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"has_belief_with_name_op"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"string")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"has_belief_with_name_op"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")," ")),(0,i.kt)("h4",{id:"result-120"},"Result:"),(0,i.kt)("p",null,"indicates if there already is a belief about the given name."),(0,i.kt)("h4",{id:"examples-104"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nbool var0 <- has_belief_with_name_op(self,"has_water"); // var0 equals false\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"has_desire_op"},(0,i.kt)("inlineCode",{parentName:"h3"},"has_desire_op")),(0,i.kt)("h4",{id:"possible-use-129"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"has_desire_op"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"predicate")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"has_desire_op"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"predicate"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")," ")),(0,i.kt)("h4",{id:"result-121"},"Result:"),(0,i.kt)("p",null,"indicates if there already is a desire about the given predicate."),(0,i.kt)("h4",{id:"examples-105"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nbool var0 <- has_desire_op(self,predicate("has_water")); // var0 equals false\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"has_desire_with_name_op"},(0,i.kt)("inlineCode",{parentName:"h3"},"has_desire_with_name_op")),(0,i.kt)("h4",{id:"possible-use-130"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"has_desire_with_name_op"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"string")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"has_desire_with_name_op"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")," ")),(0,i.kt)("h4",{id:"result-122"},"Result:"),(0,i.kt)("p",null,"indicates if there already is a desire about the given name."),(0,i.kt)("h4",{id:"examples-106"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nbool var0 <- has_desire_with_name_op(self,"has_water"); // var0 equals false\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"has_ideal_op"},(0,i.kt)("inlineCode",{parentName:"h3"},"has_ideal_op")),(0,i.kt)("h4",{id:"possible-use-131"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"has_ideal_op"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"predicate")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"has_ideal_op"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"predicate"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")," ")),(0,i.kt)("h4",{id:"result-123"},"Result:"),(0,i.kt)("p",null,"indicates if there already is an ideal about the given predicate."),(0,i.kt)("h4",{id:"examples-107"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nbool var0 <- has_ideal_op(self,predicate("has_water")); // var0 equals false\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"has_ideal_with_name_op"},(0,i.kt)("inlineCode",{parentName:"h3"},"has_ideal_with_name_op")),(0,i.kt)("h4",{id:"possible-use-132"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"has_ideal_with_name_op"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"string")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"has_ideal_with_name_op"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")," ")),(0,i.kt)("h4",{id:"result-124"},"Result:"),(0,i.kt)("p",null,"indicates if there already is an ideal about the given name."),(0,i.kt)("h4",{id:"examples-108"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nbool var0 <- has_ideal_with_name_op(self,"has_water"); // var0 equals false\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"has_intention_op"},(0,i.kt)("inlineCode",{parentName:"h3"},"has_intention_op")),(0,i.kt)("h4",{id:"possible-use-133"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"has_intention_op"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"predicate")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"has_intention_op"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"predicate"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")," ")),(0,i.kt)("h4",{id:"result-125"},"Result:"),(0,i.kt)("p",null,"indicates if there already is an intention about the given predicate."),(0,i.kt)("h4",{id:"examples-109"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nbool var0 <- has_intention_op(self,predicate("has_water")); // var0 equals false\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"has_intention_with_name_op"},(0,i.kt)("inlineCode",{parentName:"h3"},"has_intention_with_name_op")),(0,i.kt)("h4",{id:"possible-use-134"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"has_intention_with_name_op"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"string")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"has_intention_with_name_op"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")," ")),(0,i.kt)("h4",{id:"result-126"},"Result:"),(0,i.kt)("p",null,"indicates if there already is an intention about the given name."),(0,i.kt)("h4",{id:"examples-110"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nbool var0 <- has_intention_with_name_op(self,"has_water"); // var0 equals false\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"has_obligation_op"},(0,i.kt)("inlineCode",{parentName:"h3"},"has_obligation_op")),(0,i.kt)("h4",{id:"possible-use-135"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"has_obligation_op"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"predicate")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"has_obligation_op"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"predicate"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")," ")),(0,i.kt)("h4",{id:"result-127"},"Result:"),(0,i.kt)("p",null,"indicates if there already is an obligation about the given predicate."),(0,i.kt)("h4",{id:"examples-111"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nbool var0 <- has_obligation_op(self,predicate("has_water")); // var0 equals false\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"has_obligation_with_name_op"},(0,i.kt)("inlineCode",{parentName:"h3"},"has_obligation_with_name_op")),(0,i.kt)("h4",{id:"possible-use-136"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"has_obligation_with_name_op"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"string")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"has_obligation_with_name_op"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")," ")),(0,i.kt)("h4",{id:"result-128"},"Result:"),(0,i.kt)("p",null,"indicates if there already is an obligation about the given name."),(0,i.kt)("h4",{id:"examples-112"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nbool var0 <- has_obligation_with_name_op(self,"has_water"); // var0 equals false\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"has_uncertainty_op"},(0,i.kt)("inlineCode",{parentName:"h3"},"has_uncertainty_op")),(0,i.kt)("h4",{id:"possible-use-137"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"has_uncertainty_op"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"predicate")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"has_uncertainty_op"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"predicate"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")," ")),(0,i.kt)("h4",{id:"result-129"},"Result:"),(0,i.kt)("p",null,"indicates if there already is an uncertainty about the given predicate."),(0,i.kt)("h4",{id:"examples-113"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nbool var0 <- has_uncertainty_op(self,predicate("has_water")); // var0 equals false\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"has_uncertainty_with_name_op"},(0,i.kt)("inlineCode",{parentName:"h3"},"has_uncertainty_with_name_op")),(0,i.kt)("h4",{id:"possible-use-138"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"agent")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"has_uncertainty_with_name_op"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"string")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"has_uncertainty_with_name_op"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"agent")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")," ")),(0,i.kt)("h4",{id:"result-130"},"Result:"),(0,i.kt)("p",null,"indicates if there already is an uncertainty about the given name."),(0,i.kt)("h4",{id:"examples-114"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nbool var0 <- has_uncertainty_with_name_op(self,"has_water"); // var0 equals false\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"hexagon"},(0,i.kt)("inlineCode",{parentName:"h3"},"hexagon")),(0,i.kt)("h4",{id:"possible-use-139"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"hexagon"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"geometry")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"hexagon"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"point"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"geometry")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"float")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"hexagon"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"geometry")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"hexagon"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"float")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"geometry")," ")),(0,i.kt)("h4",{id:"result-131"},"Result:"),(0,i.kt)("p",null,"A hexagon geometry which the given with and height  "),(0,i.kt)("h4",{id:"comment-17"},"Comment:"),(0,i.kt)("p",null,"the center of the hexagon is by default the location of the current agent in which has been called this operator.the center of the hexagon is by default the location of the current agent in which has been called this operator.the center of the hexagon is by default the location of the current agent in which has been called this operator."),(0,i.kt)("h4",{id:"special-cases-33"},"Special cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"returns nil if the operand is nil.    "),(0,i.kt)("li",{parentName:"ul"},"returns nil if the operand is nil.    "),(0,i.kt)("li",{parentName:"ul"},"returns nil if the operand is nil.")),(0,i.kt)("h4",{id:"examples-115"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \ngeometry var0 <- hexagon(10); // var0 equals a geometry as a hexagon of width of 10 and height of 10. \ngeometry var1 <- hexagon({10,5}); // var1 equals a geometry as a hexagon of width of 10 and height of 5. \ngeometry var2 <- hexagon(10,5); // var2 equals a geometry as a hexagon of width of 10 and height of 5.\n\n")),(0,i.kt)("h4",{id:"see-also-44"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsAA#around"},"around"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#circle"},"circle"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsBC#cone"},"cone"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#line"},"line"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsIM#link"},"link"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#norm"},"norm"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#point"},"point"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#polygon"},"polygon"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#polyline"},"polyline"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#rectangle"},"rectangle"),", ",(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#triangle"},"triangle"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"hierarchical_clustering"},(0,i.kt)("inlineCode",{parentName:"h3"},"hierarchical_clustering")),(0,i.kt)("h4",{id:"possible-use-140"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"container<unknown,agent>")," ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"hierarchical_clustering"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"list")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"hierarchical_clustering"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"container<unknown,agent>")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"list")," ")),(0,i.kt)("h4",{id:"result-132"},"Result:"),(0,i.kt)("p",null,"A tree (list of list) contained groups of agents clustered by distance considering a distance min between two groups.  "),(0,i.kt)("h4",{id:"comment-18"},"Comment:"),(0,i.kt)("p",null,"use of hierarchical clustering with Minimum for linkage criterion between two groups of agents."),(0,i.kt)("h4",{id:"examples-116"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nlist var0 <- [ag1, ag2, ag3, ag4, ag5] hierarchical_clustering 20.0; // var0 equals for example, can return [[[ag1],[ag3]], [ag2], [[[ag4],[ag5]],[ag6]]\n\n")),(0,i.kt)("h4",{id:"see-also-45"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsSZ#simple_clustering_by_distance"},"simple_clustering_by_distance"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"horizontal"},(0,i.kt)("inlineCode",{parentName:"h3"},"horizontal")),(0,i.kt)("h4",{id:"possible-use-141"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"horizontal"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"map<unknown,int>"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown<string>"))),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"hsb"},(0,i.kt)("inlineCode",{parentName:"h3"},"hsb")),(0,i.kt)("h4",{id:"possible-use-142"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"hsb"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"rgb")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"hsb"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"rgb")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"hsb"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"rgb")," ")),(0,i.kt)("h4",{id:"result-133"},"Result:"),(0,i.kt)("p",null,"Converts hsb (h=hue, s=saturation, b=brightness) value to Gama color  "),(0,i.kt)("h4",{id:"comment-19"},"Comment:"),(0,i.kt)("p",null,"h,s and b components should be floating-point values between 0.0 and 1.0 and when used alpha should be an integer (between 0 and 255) or a float (between 0 and 1) . Examples: Red=(0.0,1.0,1.0), Yellow=(0.16,1.0,1.0), Green=(0.33,1.0,1.0), Cyan=(0.5,1.0,1.0), Blue=(0.66,1.0,1.0), Magenta=(0.83,1.0,1.0)"),(0,i.kt)("h4",{id:"examples-117"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' \nrgb var0 <- hsb (0.5,1.0,1.0,0.0); // var0 equals rgb("cyan",0) \nrgb var1 <- hsb (0.0,1.0,1.0); // var1 equals rgb("red")\n\n')),(0,i.kt)("h4",{id:"see-also-46"},"See also:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"OperatorsNR#rgb"},"rgb"),", "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"hypot"},(0,i.kt)("inlineCode",{parentName:"h3"},"hypot")),(0,i.kt)("h4",{id:"possible-use-143"},"Possible use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"hypot"))," (",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),") ---\x3e  ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," ")),(0,i.kt)("h4",{id:"result-134"},"Result:"),(0,i.kt)("p",null,"Returns sqrt(x2 +y2) without intermediate overflow or underflow."),(0,i.kt)("h4",{id:"special-cases-34"},"Special cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If either argument is infinite, then the result is positive infinity. If either argument is NaN and neither argument is infinite, then the result is NaN.")),(0,i.kt)("h4",{id:"examples-118"},"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," \nfloat var0 <- hypot(0,1,0,1); // var0 equals sqrt(2)\n\n")))}h.isMDXComponent=!0}}]);