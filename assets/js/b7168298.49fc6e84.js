"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[52830],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=a.createContext({}),u=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=u(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),m=u(n),h=l,d=m["".concat(p,".").concat(h)]||m[h]||c[h]||r;return n?a.createElement(d,i(i({ref:t},s),{},{components:n})):a.createElement(d,i({ref:t},s))}));function d(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=h;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[m]="string"==typeof e?e:l,i[1]=o;for(var u=2;u<r;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},78221:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>d,frontMatter:()=>o,metadata:()=>u,toc:()=>m});var a=n(87462),l=n(63366),r=(n(67294),n(3905)),i=["components"],o={title:"Batch Experiments"},p=void 0,u={unversionedId:"Event__CP12Batch",id:"Event__CP12Batch",title:"Batch Experiments",description:"By the Batch People",source:"@site/../docs/Event__CP12Batch.md",sourceDirName:".",slug:"/Event__CP12Batch",permalink:"/wiki/next/Event__CP12Batch",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/Event__CP12Batch/_edit",tags:[],version:"current",frontMatter:{title:"Batch Experiments"}},s={},m=[{value:"What do we have?",id:"what-do-we-have",level:2},{value:"How does it work?",id:"how-does-it-work",level:2},{value:"What would be great in Gama 12.4?",id:"what-would-be-great-in-gama-124",level:2},{value:"The Solution",id:"the-solution",level:2},{value:"One simple example of what would be great:",id:"one-simple-example-of-what-would-be-great",level:2},{value:"TODO",id:"todo",level:2}],c={toc:m},h="wrapper";function d(e){var t=e.components,n=(0,l.Z)(e,i);return(0,r.kt)(h,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"By the Batch People"),(0,r.kt)("p",null,"Philippe Caillou,\nThomas Louail,\nNicolas Marilleau,\nHuynh Quang Nghi,\nSerge Stinckwich,\nPatrick Taillandier,\nJean-Daniel Zucker"),(0,r.kt)("h2",{id:"what-do-we-have"},"What do we have?"),(0,r.kt)("p",null,"Define an experiment, batch mode (but same capabilities as GUI mode)"),(0,r.kt)("p",null,"\xb7         Parameter exploration:  Param element"),(0,r.kt)("p",null,"o   Explicit"),(0,r.kt)("p",null,"o   List with step"),(0,r.kt)("p",null,"\xb7         Method Element"),(0,r.kt)("p",null,"o   Exhaustive"),(0,r.kt)("p",null,"o   Hill climbing"),(0,r.kt)("p",null,"o   Simulated annealing"),(0,r.kt)("p",null,"o   Tabu Search"),(0,r.kt)("p",null,"o   Reactive Tabu Search"),(0,r.kt)("p",null,"o   Genetic Algorithm"),(0,r.kt)("p",null,"\xb7         File export"),(0,r.kt)("p",null,"o   File"),(0,r.kt)("h2",{id:"how-does-it-work"},"How does it work?"),(0,r.kt)("p",null,"\xb7         The experiment (the plan) creates the simulation (future: Headless mode)"),(0,r.kt)("h2",{id:"what-would-be-great-in-gama-124"},"What would be great in Gama 12.4?"),(0,r.kt)("p",null,"\xb7         Export agent/simulation data in the file"),(0,r.kt)("p",null,"o   =>Define code in the experiment (loop over agents)"),(0,r.kt)("p",null,"\xb7         Put rules for variable exploration"),(0,r.kt)("p",null,"o   Ex: explore b={1,2,3}. if a=2 explore b={2,3} only"),(0,r.kt)("p",null,"o   How? Put code in the exploring loop => put real GAML code in the agent"),(0,r.kt)("p",null,'o   => reflex "method" or "explore"'),(0,r.kt)("p",null,"o   Some existing exploration actions can be used with a ParameterSet (Map?) parameter"),(0,r.kt)("p",null,"\xb7         Show plots in batch"),(0,r.kt)("p",null,"o   Define output with the code/variable of the experiment agent"),(0,r.kt)("p",null,"o   Require a getVariable() operator that gets the last simulation variables values"),(0,r.kt)("p",null,"\xb7         Compare agent trajectories"),(0,r.kt)("p",null,"o   Stats a posteriori"),(0,r.kt)("p",null,"o   (not possible inside a simulation because there is no end)"),(0,r.kt)("p",null,"o   => action \xab aftersimulation \xbb d\xe9fined by the user"),(0,r.kt)("p",null,"o   Require a getVariable() operator that gets the last simulation variables values (to be able to loop on agents)"),(0,r.kt)("p",null,"\xb7         Define more parameters/variables in the file (CSV)"),(0,r.kt)("p",null,"o   => use of the Save already working"),(0,r.kt)("p",null,"\xb7         Launch parallel simulation on multicore/clusters"),(0,r.kt)("p",null,'o   => special action "runSimulation" parameter to launch 4 in parallel?'),(0,r.kt)("p",null,'\xb7         "Generate" agents'),(0,r.kt)("p",null,"o   Define agent parameters by using global/previous variables/files"),(0,r.kt)("p",null,'o   Use of an "initSimulation" action before the "runSimulation" to  be able to change manually the simulation parameters'),(0,r.kt)("p",null,"\xb7         D\xe9finition graphique de l\u2019espace de valeur, \xe9ventuellement en 2D et disjoint"),(0,r.kt)("p",null,"o   Specific OutPut"),(0,r.kt)("h2",{id:"the-solution"},"The Solution"),(0,r.kt)("p",null,"Define a new ",(0,r.kt)("strong",{parentName:"p"},"Experimenter")," agent and put real code/reflexes/actions... GAML code inside the Experimenter."),(0,r.kt)("h2",{id:"one-simple-example-of-what-would-be-great"},"One simple example of what would be great:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"experiment InteliExplore type: batch repeat: 2 keep_seed: true until: ( time > 200 ) {\n      int nbprey init:0;\n      int nbpredator init:0;\n\n      init\n      {\n            //for example read experiment plan from file\n           \n      }\n     \n\n      reflex method\n      {\n            loop prm over:prey_max\n            {\n                   do: createsimulation\n                   setParameter(\"nb_preys_init\",pr)\n\n                   do: initsimulation\n\n                   if (prey_max<100)\n                   setParameter(\"nb_predators_init\",200)\n                   if (prey_max>100)\n                   setParameter(\"nb_predators_init\",200)\n\n                   do: runsimulation;\n\n                   do: aftersimulation;\n                  \n            }\n      }\n\n      action aftersimulation\n      {\n            loop over getVariable(agents)\n            {\n                   log(\"everything dans file\");      //with the save function?\n            }     \n      }\n\n      chart name: 'Species evolution' type: series background: rgb('white') size: {1,0.4} position: {0, 0.05}\n      {\n      data initial_number_of_preys value: getValue(\"nb_preys_init\") color: rgb('blue') ;\n        data final_number_of_predator value: getValue(\"nb_predators\") color: rgb('red') ;\n      }\n    file name: 'logsimple' type: text data: 'simulation: '+ step\n                                  +'; allparams' + getAllParamters // PROBLEME comment sauver tous les parametres?\n                                   + '; nbPreys: ' + getValue(\"nb_preys_init\")\n                                    + '; finalPredators: ' + getValue(\"nb_preys\") ;\n}\n\n")),(0,r.kt)("h2",{id:"todo"},"TODO"),(0,r.kt)("p",null,"And Alexis did almost all this in less than a day....... But how does he do that??"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A new type of Custom Experiment")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"In this experiment block, an ExperimenterAgent manages the simulations")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Init() may have to create a Simulation to get a Scheduler (?) and/or a World(?)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"He must have a Scheduler to be able to stop/wait in a loop for the end of a Simulation (contradiction with previous point...)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Its most important function is to be able to call Simulation.step()"))),(0,r.kt)("p",null,"=>Create a Simulation Type which has a Step() operator"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create a ExperimentatorSkill with a lot of usefull actions (Step(int), ...)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Check that it is possible to define plots, logs, ..."))))}d.isMDXComponent=!0}}]);