"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[85922],{3905:(e,a,n)=>{n.d(a,{Zo:()=>c,kt:()=>d});var t=n(67294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function i(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?i(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function l(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=t.createContext({}),g=function(e){var a=t.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},c=function(e){var a=g(e.components);return t.createElement(s.Provider,{value:a},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},p=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=g(n),p=r,d=u["".concat(s,".").concat(p)]||u[p]||m[p]||i;return n?t.createElement(d,o(o({ref:a},c),{},{components:n})):t.createElement(d,o({ref:a},c))}));function d(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=p;var l={};for(var s in a)hasOwnProperty.call(a,s)&&(l[s]=a[s]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var g=2;g<i;g++)o[g]=n[g];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}p.displayName="MDXCreateElement"},47778:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>g,toc:()=>u});var t=n(87462),r=n(63366),i=(n(67294),n(3905)),o=["components"],l={"^title":"Sugarscape"},s=void 0,g={unversionedId:"Sugarscape",id:"Sugarscape",title:"Sugarscape",description:"Path: Library models/Toy Models/Sugarscape/models/Sugarscape.gaml",source:"@site/../docs/Sugarscape.md",sourceDirName:".",slug:"/Sugarscape",permalink:"/wiki/next/Sugarscape",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/Sugarscape/_edit",tags:[],version:"current",frontMatter:{"^title":"Sugarscape"}},c={},u=[],m={toc:u},p="wrapper";function d(e){var a=e.components,n=(0,r.Z)(e,o);return(0,i.kt)(p,(0,t.Z)({},m,n,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("img",{width:"960",alt:"Annotation 2023-04-15 202842_sugarScape",src:"https://user-images.githubusercontent.com/4437331/232247478-e6eade15-4c07-4448-9531-928f177d100c.png"}),(0,i.kt)("p",null,"Path: Library models/Toy Models/Sugarscape/models/Sugarscape.gaml"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"/**\n* Name: sugarscape\n* Author: \n* Description: A model with animal moving on a grid to find sugar. The animal agents \n*   have a life duration and die if it is reached or if they don't have anymore sugar.\n* Tags: grid\n*/\nmodel sugarscape\n\n  \nglobal {\n    // Parameters \n    \n    //Growth rate of the sugar\n    int sugarGrowthRate <- 1;\n    //Minimum age of death\n    int minDeathAge <- 60;\n    //Maximum age of death\n    int maxDeathAge <- 100;\n    //Metabolism maximum\n    int maxMetabolism <- 3;\n    \n    //Maximum and Minimum initial sugar\n    int maxInitialSugar <- 25 ;\n    int minInitialSugar <- 5;\n    //Maximum range\n    int maxRange <- 6;\n    bool replace <- true;\n    //Number of agents\n    int numberOfAgents <- 400;  \n    \n    // Environment\n    geometry shape <- rectangle(50, 50);\n        \n    file<int> types  <- file<int>('../images/sugarscape.pgm');\n    rgb FFFFAA const: true <- rgb('#FFFFAA');\n    rgb FFFF55 const: true <- rgb('#FFFF55');\n    rgb dark_yellow const: true <- rgb('#EEB422');\n    rgb less_red const: true <- rgb('#FF5F5F');\n    \n    init {\n        \n        //Create the animal\n        create animal number: numberOfAgents;\n        \n        //Ask to each sugar cell to set its sugar\n        ask sugar_cell {\n            maxSugar <- (types at {grid_x,grid_y});\n            sugar <- maxSugar;\n            color <- [#white,FFFFAA,FFFF55,#yellow,dark_yellow] at sugar;\n        }\n    }\n}\n\n    //Grid species representing the sugar cells\n    grid sugar_cell width: 50 height: 50 neighbors: 4 use_individual_shapes: false use_regular_agents: false{ \n        //Maximum sugar\n        int maxSugar;\n        //Sugar contained in thecell\n        int sugar update: sugar + sugarGrowthRate max: maxSugar;\n        rgb color update: [#white,FFFFAA,FFFF55,#yellow,dark_yellow] at sugar;\n        map<int,list<sugar_cell>> neighbours;\n        \n        //Initialization of the neighbours\n        init {\n            loop i from: 1 to: maxRange {\n                neighbours[i] <- self neighbors_at i; \n            }\n        }\n    }   \n    \n//Species animal representing the animal agents\nspecies animal {\n    //Color of the animal\n    rgb color  <- #red;\n    //Speed of the animal\n    float speed  <- 1.0;\n    //Metabolism of the animal\n    int metabolism  min: 1 <- rnd(maxMetabolism);\n    //Perception range of the animal\n    int vision  min: 1 <- rnd(maxRange);\n    //Maximal age of the animal\n    int maxAge  min: minDeathAge max: maxDeathAge <- rnd (maxDeathAge - minDeathAge) + minDeathAge;\n    //Size of the animal\n    float size  <- 0.5;\n    //Sugar of the animal\n    int sugar min: 0 <- (rnd (maxInitialSugar - minInitialSugar)) + minInitialSugar update: sugar - metabolism;\n    //Age of the animal\n    int age max: maxAge <- 0 update: int(age + step);\n    //Place of the animal\n    sugar_cell place ; \n    \n    //Launched at the initialization of the animal agent\n    init {\n        //Set the place as one of the sugar cell\n        place <- one_of(sugar_cell);\n        location <- place.location;\n    }\n    //Move the agent to another place and collect the sugar of the previous place\n    reflex basic_move { \n        sugar <- sugar + place.sugar;\n        place.sugar <- 0;\n        list<sugar_cell> neighbours <- place.neighbours[vision];\n        list<sugar_cell> poss_targets <- (neighbours) where (each.sugar > 0);\n        //If no sugar is found in the neighbours cells, move randomly\n        place <- empty(poss_targets) ? one_of (neighbours) : one_of (poss_targets);\n        location <- place.location;\n    }\n    //Reflex to kill the animal once it reaches its maximal age or it doesn't have sugar anymore\n    reflex end_of_life when: (sugar = 0) or (age = maxAge) {\n        if replace {\n            create animal ;\n        }\n        do die;\n    }\n    aspect default {\n        draw circle(0.5) color: #red;\n    }\n}\n\nexperiment sugarscape type: gui{\n    float minimum_cycle_duration<-0.1;\n    parameter 'Growth rate of sugar:' var: sugarGrowthRate category: 'Environment';\n    parameter 'Minimum age of death:' var: minDeathAge <- 60 category: 'Agents';\n    parameter 'Maximum age of death:' var: maxDeathAge <- 100 category: 'Agents';\n    parameter 'Maximum metabolism:' var: maxMetabolism <- 3 category: 'Agents';\n    parameter 'Maximum initial sugar per cell:'  var: maxInitialSugar <- 25 category: 'Environment';\n    parameter 'Minimum initial sugar per cell:' var: minInitialSugar <- 5 category: 'Environment';\n    parameter 'Maximum range of vision:' var: maxRange <- 6 category: 'Agents';\n    parameter 'Replace dead agents ?' var: replace <- true category: 'Agents';\n    parameter 'Number of agents:' var: numberOfAgents <- 400 category: 'Agents';\n    \n    output {\n        display grille {\n            grid sugar_cell;\n            species animal;\n        }\n        display chart refresh: every(5#cycles)  type: 2d {\n            chart 'Energy' type: pie background: #white style: exploded label_background_color:#white{\n                data \"strong\" value: (animal as list) count (each.sugar > 8) color: #green;\n                data \"weak\" value: (animal as list) count (each.sugar < 9) color: #red;\n            }\n        }\n        display chart2 refresh: every(5#cycles) type: 2d  {\n            chart 'Energy' type: histogram background: #white label_background_color:#white{\n                data \"strong\" value: (animal as list) count (each.sugar > 8)  color: #green;\n                data \"weak\" value: (animal as list) count (each.sugar < 9)  color: #red;\n            }\n        }\n    }\n}\n")))}d.isMDXComponent=!0}}]);