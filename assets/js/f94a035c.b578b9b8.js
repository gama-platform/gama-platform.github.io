"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3893],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=s(n),u=r,h=d["".concat(p,".").concat(u)]||d[u]||c[u]||i;return n?a.createElement(h,l(l({ref:t},m),{},{components:n})):a.createElement(h,l({ref:t},m))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},40447:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>p,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),l=["components"],o={title:"Headless Server"},p=void 0,s={unversionedId:"HeadlessServer",id:"HeadlessServer",title:"Headless Server",description:"Running a Gama Headless server:",source:"@site/../docs/HeadlessServer.md",sourceDirName:".",slug:"/HeadlessServer",permalink:"/wiki/next/HeadlessServer",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/HeadlessServer/_edit",tags:[],version:"current",frontMatter:{title:"Headless Server"},sidebar:"side",previous:{title:"Headless Batch",permalink:"/wiki/next/HeadlessBatch"},next:{title:"Preferences",permalink:"/wiki/next/Preferences"}},m={},c=[{value:"Running a Gama Headless server:",id:"running-a-gama-headless-server",level:2},{value:"From the release",id:"from-the-release",level:3},{value:"from the command-line tool",id:"from-the-command-line-tool",level:3},{value:"From the source code",id:"from-the-source-code",level:3},{value:"API description",id:"api-description",level:2},{value:"Python wrapper",id:"python-wrapper",level:2},{value:"Javascript Client",id:"javascript-client",level:2},{value:"Hello World Visualization in MapBox",id:"hello-world-visualization-in-mapbox",level:3},{value:"Hello World Message example",id:"hello-world-message-example",level:3}],d={toc:c};function u(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"running-a-gama-headless-server"},"Running a Gama Headless server:"),(0,i.kt)("h3",{id:"from-the-release"},"From the release"),(0,i.kt)("p",null,"Go to the ",(0,i.kt)("inlineCode",{parentName:"p"},"headless")," directory in your Gama installation folder and run the script ",(0,i.kt)("inlineCode",{parentName:"p"},"gama-headless.sh")," (or ",(0,i.kt)("inlineCode",{parentName:"p"},"gama-headless.bat"),") with the argument ",(0,i.kt)("inlineCode",{parentName:"p"},"-socket")," followed by the socket you want your Gama server to run on."),(0,i.kt)("p",null,"For example on Mac OS you could do:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"cd Gama.app/Contents/headless\n")),(0,i.kt)("p",null,"to move to the right directory, then run the script to listen on port ",(0,i.kt)("inlineCode",{parentName:"p"},"6868")," with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"bash gama-headless.sh -socket 6868\n")),(0,i.kt)("h3",{id:"from-the-command-line-tool"},"from the command-line tool"),(0,i.kt)("p",null,"The users who installed gama through a ",(0,i.kt)("inlineCode",{parentName:"p"},".deb")," file or ",(0,i.kt)("inlineCode",{parentName:"p"},"aur")," have access to the command ",(0,i.kt)("inlineCode",{parentName:"p"},"gama-headless")," and thus only need to open a terminal and run ",(0,i.kt)("inlineCode",{parentName:"p"},"gama-headless -socket 6868")," to run a Gama server on the port ",(0,i.kt)("inlineCode",{parentName:"p"},"6868"),". "),(0,i.kt)("h3",{id:"from-the-source-code"},"From the source code"),(0,i.kt)("p",null,"In Eclipse, instantiate a headless server by running ",(0,i.kt)("inlineCode",{parentName:"p"},"msi.gama.headless.id4_full")," with the following argument ",(0,i.kt)("inlineCode",{parentName:"p"},"-os ${target.os} -ws ${target.ws} -arch ${target.arch} -nl ${target.nl} -socket 6868")," (you can specify any other port)"),(0,i.kt)("h2",{id:"api-description"},"API description"),(0,i.kt)("h2",{id:"python-wrapper"},"Python wrapper"),(0,i.kt)("p",null,"There is a python wrapper that can be used to interact with Gama server, it is available ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/gama-platform/Gama-client-python"},"here"),". It will take care of formatting the queries to the server and receive the answers. You simply have to import the ",(0,i.kt)("inlineCode",{parentName:"p"},"gama_client.py")," file into your project and instantiate a GamaClient object to start communicating with Gama server. "),(0,i.kt)("p",null,"Here is an example python program using it to run a gaml file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Python"},'import time\nimport gama_client\nimport asyncio\n\n\nasync def main():\n    MY_SERVER_URL = "localhost"\n    MY_SERVER_PORT = 6868\n    GAML_FILE_PATH_ON_SERVER = "/opt/gama-platform/headless/samples/predatorPrey/predatorPrey.gaml"\n    EXPERIMENT_NAME = "prey_predatorExp"\n\n    client = gama_client.GamaClient(MY_SERVER_URL, MY_SERVER_PORT)\n\n    print("connecting to Gama server")\n    await client.connect()\n\n    print("initialize a gaml model")\n    experiment_id = await client.init_experiment(GAML_FILE_PATH_ON_SERVER, EXPERIMENT_NAME)\n    if experiment_id == "":\n        print("error while initializing")\n        return\n\n    print("initialization successful, running the model")\n    playing = await client.play(experiment_id)\n    if not playing:\n        print("error while trying to run the experiment", experiment_id)\n        return\n\n    print("model running, waiting a bit")\n    time.sleep(3)\n\n    print("pausing the model")\n    if not await client.pause(experiment_id):\n        print("unable to pause the experiment", experiment_id)\n        return\n\n    print("asking simulation the value of: cycle=", await client.expression(experiment_id, r"cycle"))\n    print("asking simulation the value of: nb_preys/nb_preys_init=", await client.expression(experiment_id, r"nb_preys/nb_preys_init"))\n\nif __name__ == "__main__":\n    asyncio.run(main())\n\n')),(0,i.kt)("h2",{id:"javascript-client"},"Javascript Client"),(0,i.kt)("p",null,"The current javascript client version is being developed in this repository ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/gama-platform/gama.client"},"gama.client")),(0,i.kt)("h3",{id:"hello-world-visualization-in-mapbox"},"Hello World Visualization in MapBox"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Clone the repository ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/gama-platform/gama.client"},"gama.client")),(0,i.kt)("li",{parentName:"ul"},"In ",(0,i.kt)("inlineCode",{parentName:"li"},"Javascript/gama_client.js")," edit the following variable ",(0,i.kt)("inlineCode",{parentName:"li"},"ABSOLUTE_PATH_TO_GAMA")," to your local path (e.g ",(0,i.kt)("inlineCode",{parentName:"li"},"var ABSOLUTE_PATH_TO_GAMA = '/Users/arno/';")," "),(0,i.kt)("li",{parentName:"ul"},"open ",(0,i.kt)("inlineCode",{parentName:"li"},"Javascript/index.html"),"in a browser")),(0,i.kt)("h3",{id:"hello-world-message-example"},"Hello World Message example"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"In ",(0,i.kt)("inlineCode",{parentName:"li"}," chain_messages.js")," edit the following variable ",(0,i.kt)("inlineCode",{parentName:"li"},"ABSOLUTE_PATH_TO_GAMA")," to your local path (e.g ",(0,i.kt)("inlineCode",{parentName:"li"},"var ABSOLUTE_PATH_TO_GAMA = '/Users/arno/';")," "),(0,i.kt)("li",{parentName:"ul"},"open ",(0,i.kt)("inlineCode",{parentName:"li"},"Javascript/message_example"),"in a browser")))}u.isMDXComponent=!0}}]);