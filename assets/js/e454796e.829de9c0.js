"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[26014],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,k=u["".concat(s,".").concat(d)]||u[d]||m[d]||l;return n?a.createElement(k,i(i({ref:t},c),{},{components:n})):a.createElement(k,i({ref:t},c))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},178:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>k,frontMatter:()=>o,metadata:()=>p,toc:()=>u});var a=n(87462),r=n(63366),l=(n(67294),n(3905)),i=["components"],o={title:"Literals"},s=void 0,p={unversionedId:"Literals",id:"version-1.8.1/Literals",title:"Literals",description:"(some literal expressions are also described in data types)",source:"@site/versioned_docs/version-1.8.1/Literals.md",sourceDirName:".",slug:"/Literals",permalink:"/wiki/1.8.1/Literals",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/Literals/_edit",tags:[],version:"1.8.1",frontMatter:{title:"Literals"},sidebar:"side",previous:{title:"Expressions",permalink:"/wiki/1.8.1/Expressions"},next:{title:"Units and constants",permalink:"/wiki/1.8.1/UnitsAndConstants"}},c={},u=[{value:"Table of contents",id:"table-of-contents",level:2},{value:"Simple Types",id:"simple-types",level:2},{value:"Literal Constructors",id:"literal-constructors",level:2},{value:"Universal Literal",id:"universal-literal",level:2}],m={toc:u},d="wrapper";function k(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)(d,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"(some literal expressions are also described in ",(0,l.kt)("a",{parentName:"em",href:"DataTypes"},"data types"),")")),(0,l.kt)("p",null,"A literal is a way to specify an unnamed constant value corresponding to a given data type. GAML supports various types of literals for often \u2014 or less often \u2014 used data types."),(0,l.kt)("h2",{id:"table-of-contents"},"Table of contents"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#literals"},"Literals"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#simple-types"},"Simple Types")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#literal-constructors"},"Literal Constructors")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#universal-literal"},"Universal Literal"))))),(0,l.kt)("h2",{id:"simple-types"},"Simple Types"),(0,l.kt)("p",null,"Values of simple (i.e. not composed) types can all be expressed using literal expressions. Namely:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"bool"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"true")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"int"),": decimal value, such as ",(0,l.kt)("inlineCode",{parentName:"li"},"100"),", or hexadecimal value if preceded by ",(0,l.kt)("inlineCode",{parentName:"li"},"'#'")," (e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"#AAAAAA"),", which returns the int ",(0,l.kt)("inlineCode",{parentName:"li"},"11184810"),")"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"float"),": the value in plain digits, using ",(0,l.kt)("inlineCode",{parentName:"li"},"'.'")," for the decimal point (e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"123.297"),")"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"string"),": a sequence of characters enclosed between quotes (",(0,l.kt)("inlineCode",{parentName:"li"},"'my string'"),") or double quotes (",(0,l.kt)("inlineCode",{parentName:"li"},'"my string"'),")")),(0,l.kt)("h2",{id:"literal-constructors"},"Literal Constructors"),(0,l.kt)("p",null,"Although they are not strictly literals in the sense given above, some special constructs (called ",(0,l.kt)("em",{parentName:"p"},"literal constructors"),") allow the modeler to declare constants of other data types. They are actually ",(0,l.kt)("a",{parentName:"p",href:"Exhaustive-list-of-GAMA-Keywords"},"operators")," but can be thought of literals when used with constant operands."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"pair"),": the key and the value separated by ",(0,l.kt)("inlineCode",{parentName:"li"},"::")," (e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"12::'abc'"),")"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"list"),": the elements, separated by commas, enclosed inside square brackets (e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"[12,15,15]"),")"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"map"),": a list of pairs (e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"[12::'abc', 13::'def']"),")"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"point"),": 2 or 3 int or float ordinates enclosed inside curly brackets (e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"{10.0,10.0,10.0}"),")")),(0,l.kt)("h2",{id:"universal-literal"},"Universal Literal"),(0,l.kt)("p",null,"Finally, a special literal, of type ",(0,l.kt)("inlineCode",{parentName:"p"},"unknown"),", is shared between the data types and all the agent types (aka species). Only ",(0,l.kt)("inlineCode",{parentName:"p"},"bool"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"int")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"float"),", which do not derive from ",(0,l.kt)("inlineCode",{parentName:"p"},"unknown"),", do not accept this literal. All the others will accept it (e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},"string s <- nil;")," is ok)."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"unknown"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"nil"),", which represents the non-initialized (or, literally, ",(0,l.kt)("em",{parentName:"li"},"unknown"),") value.")))}k.isMDXComponent=!0}}]);