"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[55760],{22720:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>d,toc:()=>c});var t=s(17624),i=s(4552);const r={title:"Built-in Species"},l=void 0,d={id:"BuiltInSpecies",title:"Built-in Species",description:"----",source:"@site/versioned_docs/version-1.9.1/BuiltInSpecies.md",sourceDirName:".",slug:"/BuiltInSpecies",permalink:"/wiki/1.9.1/BuiltInSpecies",draft:!1,unlisted:!1,editUrl:"https://github.com/gama-platform/gama/wiki/BuiltInSpecies/_edit",tags:[],version:"1.9.1",frontMatter:{title:"Built-in Species"},sidebar:"main",previous:{title:"GAML References",permalink:"/wiki/1.9.1/GamlReference"},next:{title:"Built-in Skills",permalink:"/wiki/1.9.1/BuiltInSkills"}},o={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"<code>agent</code>",id:"agent",level:2},{value:"Variables",id:"variables",level:3},{value:"Actions",id:"actions",level:3},{value:"<strong><code>_init_</code></strong>",id:"_init_",level:4},{value:"<strong><code>_step_</code></strong>",id:"_step_",level:4},{value:"<code>AgentDB</code>",id:"agentdb",level:2},{value:"Variables",id:"variables-1",level:3},{value:"Actions",id:"actions-1",level:3},{value:"<strong><code>close</code></strong>",id:"close",level:4},{value:"<strong><code>connect</code></strong>",id:"connect",level:4},{value:"Additional facets:",id:"additional-facets",level:5},{value:"<strong><code>executeUpdate</code></strong>",id:"executeupdate",level:4},{value:"Additional facets:",id:"additional-facets-1",level:5},{value:"<strong><code>getParameter</code></strong>",id:"getparameter",level:4},{value:"<strong><code>insert</code></strong>",id:"insert",level:4},{value:"Additional facets:",id:"additional-facets-2",level:5},{value:"<strong><code>isConnected</code></strong>",id:"isconnected",level:4},{value:"<strong><code>select</code></strong>",id:"select",level:4},{value:"Additional facets:",id:"additional-facets-3",level:5},{value:"<strong><code>setParameter</code></strong>",id:"setparameter",level:4},{value:"Additional facets:",id:"additional-facets-4",level:5},{value:"<strong><code>testConnection</code></strong>",id:"testconnection",level:4},{value:"Additional facets:",id:"additional-facets-5",level:5},{value:"<strong><code>timeStamp</code></strong>",id:"timestamp",level:4},{value:"<code>base_edge</code>",id:"base_edge",level:2},{value:"Variables",id:"variables-2",level:3},{value:"Actions",id:"actions-2",level:3},{value:"<code>experiment</code>",id:"experiment",level:2},{value:"Variables",id:"variables-3",level:3},{value:"Actions",id:"actions-3",level:3},{value:"<strong><code>compact_memory</code></strong>",id:"compact_memory",level:4},{value:"<strong><code>update_outputs</code></strong>",id:"update_outputs",level:4},{value:"Additional facets:",id:"additional-facets-6",level:5},{value:"<code>graph_edge</code>",id:"graph_edge",level:2},{value:"Variables",id:"variables-4",level:3},{value:"Actions",id:"actions-4",level:3},{value:"<code>graph_node</code>",id:"graph_node",level:2},{value:"Variables",id:"variables-5",level:3},{value:"Actions",id:"actions-5",level:3},{value:"<strong><code>related_to</code></strong>",id:"related_to",level:4},{value:"Additional facets:",id:"additional-facets-7",level:5},{value:"<code>physical_world</code>",id:"physical_world",level:2},{value:"Variables",id:"variables-6",level:3},{value:"Actions",id:"actions-6",level:3},{value:"<strong><code>register</code></strong>",id:"register",level:4},{value:"Additional facets:",id:"additional-facets-8",level:5}];function a(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.M)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"This file is automatically generated from java files. Do Not Edit It."})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:"It is possible to use in the models a set of built-in agents. These agents allow to directly use some advance features like clustering, multi-criteria analysis, etc. The creation of these agents are similar as for other kinds of agents:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"create species: my_built_in_agent returns: the_agent;\n"})}),"\n",(0,t.jsx)(n.p,{children:"So, for instance, to be able to use clustering techniques in the model:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"create cluster_builder returns: clusterer;\n"})}),"\n",(0,t.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"#agent",children:"agent"}),", ",(0,t.jsx)(n.a,{href:"#agentdb",children:"AgentDB"}),", ",(0,t.jsx)(n.a,{href:"#base_edge",children:"base_edge"}),", ",(0,t.jsx)(n.a,{href:"#experiment",children:"experiment"}),", ",(0,t.jsx)(n.a,{href:"#graph_edge",children:"graph_edge"}),", ",(0,t.jsx)(n.a,{href:"#graph_node",children:"graph_node"}),", ",(0,t.jsx)(n.a,{href:"#physical_world",children:"physical_world"}),","]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"agent",children:(0,t.jsx)(n.code,{children:"agent"})}),"\n",(0,t.jsx)(n.h3,{id:"variables",children:"Variables"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"host"})})," (",(0,t.jsx)(n.code,{children:"agent"}),"): Returns the agent that hosts the population of the receiver agent"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"location"})})," (",(0,t.jsx)(n.code,{children:"point"}),"): Returns the location of the agent"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"name"})})," (",(0,t.jsx)(n.code,{children:"string"}),"): Returns the name of the agent (not necessarily unique in its population)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"peers"})})," (",(0,t.jsx)(n.code,{children:"list"}),"): Returns the population of agents of the same species, in the same host, minus the receiver agent"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"shape"})})," (",(0,t.jsx)(n.code,{children:"geometry"}),"): Returns the shape of the receiver agent"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"actions",children:"Actions"}),"\n",(0,t.jsx)(n.h4,{id:"_init_",children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"_init_"})})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returned type:"})," ",(0,t.jsx)(n.code,{children:"unknown"})]}),"\n",(0,t.jsx)(n.h4,{id:"_step_",children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"_step_"})})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returned type:"})," ",(0,t.jsx)(n.code,{children:"unknown"})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"agentdb",children:(0,t.jsx)(n.code,{children:"AgentDB"})}),"\n",(0,t.jsx)(n.p,{children:"AgentDB is an abstract species that can be extended to provide agents with capabilities to access databases"}),"\n",(0,t.jsx)(n.h3,{id:"variables-1",children:"Variables"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"agents"})})," (",(0,t.jsx)(n.code,{children:"list"}),"): Returns the list of agents for the population(s) of which the receiver agent is a direct or undirect host"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"members"})})," (",(0,t.jsx)(n.code,{children:"container"}),"): Returns the list of agents for the population(s) of which the receiver agent is a direct host"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"actions-1",children:"Actions"}),"\n",(0,t.jsx)(n.h4,{id:"close",children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"close"})})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Close the established database connection."})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returned type:"})," ",(0,t.jsx)(n.code,{children:"unknown"}),"  : Returns null if the connection was successfully closed, otherwise, it returns an error."]}),"\n",(0,t.jsx)(n.h4,{id:"connect",children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"connect"})})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Establish a database connection."})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returned type:"})," ",(0,t.jsx)(n.code,{children:"unknown"}),"  : Returns null if connection to the server was successfully established, otherwise, it returns an error."]}),"\n",(0,t.jsx)(n.h5,{id:"additional-facets",children:"Additional facets:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"params"})})," (map): Connection parameters"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"executeupdate",children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"executeUpdate"})})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"- Make a connection to DBMS - Executes the SQL statement in this PreparedStatement object, which must be an SQL\nINSERT, UPDATE or DELETE statement; or an SQL statement that returns nothing, such as a DDL statement."})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returned type:"})," ",(0,t.jsx)(n.code,{children:"int"}),"  : Returns the number of updated rows."]}),"\n",(0,t.jsx)(n.h5,{id:"additional-facets-1",children:"Additional facets:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"updateComm"})})," (string): SQL commands such as Create, Update, Delete, Drop with question mark"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"values"})})," (list): List of values that are used to replace question mark"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"getparameter",children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"getParameter"})})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns the list used parameters to make a connection to DBMS (dbtype, url, port, database, user and passwd)."})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returned type:"})," ",(0,t.jsx)(n.code,{children:"unknown"}),"  : Returns the list of used parameters to make a connection to DBMS."]}),"\n",(0,t.jsx)(n.h4,{id:"insert",children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"insert"})})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"- Make a connection to DBMS - Executes the insert statement."})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returned type:"})," ",(0,t.jsx)(n.code,{children:"int"}),"  : Returns the number of updated rows."]}),"\n",(0,t.jsx)(n.h5,{id:"additional-facets-2",children:"Additional facets:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"into"})})," (string): Table name"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"columns"})})," (list): List of column name of table"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"values"})})," (list): List of values that are used to insert into table. Columns and values must have same size"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"isconnected",children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"isConnected"})})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"To check if connection to the server was successfully established or not."})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returned type:"})," ",(0,t.jsx)(n.code,{children:"bool"}),"  : Returns true if connection to the server was successfully established, otherwise, it returns false."]}),"\n",(0,t.jsx)(n.h4,{id:"select",children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"select"})})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Make a connection to DBMS and execute the select statement."})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returned type:"})," ",(0,t.jsx)(n.code,{children:"list"}),"  : Returns the obtained result from executing the select statement."]}),"\n",(0,t.jsx)(n.h5,{id:"additional-facets-3",children:"Additional facets:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"select"})})," (string): select string"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"values"})})," (list): List of values that are used to replace question marks"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"setparameter",children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"setParameter"})})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Sets the parameters to use in order to make a connection to the DBMS (dbtype, url, port, database, user and passwd)."})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returned type:"})," ",(0,t.jsx)(n.code,{children:"unknown"}),"  : null."]}),"\n",(0,t.jsx)(n.h5,{id:"additional-facets-4",children:"Additional facets:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"params"})})," (map): Connection parameters"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"testconnection",children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"testConnection"})})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"To test a database connection ."})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returned type:"})," ",(0,t.jsx)(n.code,{children:"bool"}),"  : Returns true if connection to the server was successfully established, otherwise, it returns false."]}),"\n",(0,t.jsx)(n.h5,{id:"additional-facets-5",children:"Additional facets:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"params"})})," (map): Connection parameters"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"timestamp",children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"timeStamp"})})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Get the current time of the system."})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returned type:"})," ",(0,t.jsx)(n.code,{children:"float"}),"  : Current time of the system in millisecondes"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"base_edge",children:(0,t.jsx)(n.code,{children:"base_edge"})}),"\n",(0,t.jsx)(n.p,{children:"A built-in species for agents representing the edges of a graph, from which one can inherit"}),"\n",(0,t.jsx)(n.h3,{id:"variables-2",children:"Variables"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"source"})})," (",(0,t.jsx)(n.code,{children:"agent"}),"): The source agent of this edge"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"target"})})," (",(0,t.jsx)(n.code,{children:"agent"}),"): The target agent of this edge"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"actions-2",children:"Actions"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"experiment",children:(0,t.jsx)(n.code,{children:"experiment"})}),"\n",(0,t.jsx)(n.p,{children:"An experiment is a declaration of the way to conduct simulations on a model. Any experiment attached to a model is a species (introduced by the keyword 'experiment' which directly or indirectly inherits from an abstract species called 'experiment' itself. This abstract species (sub-species of 'agent') defines several attributes and actions that can then be used in any experiment.\n'experiment' defines several attributes, which, in addition to the attributes inherited from agent, form the minimal set of knowledge any experiment will have access to."}),"\n",(0,t.jsx)(n.h3,{id:"variables-3",children:"Variables"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"minimum_cycle_duration"})})," (",(0,t.jsx)(n.code,{children:"float"}),"): The minimum duration (in seconds) a simulation cycle should last. Default is 0. Units can be used to pass values smaller than a second (for instance '10 \xb0msec')"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"model_path"})})," (",(0,t.jsx)(n.code,{children:"string"}),"): Contains the absolute path to the folder in which the current model is located"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"parameters"})})," (",(0,t.jsx)(n.code,{children:"map"}),"): A parameters set of this experiment agent"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"project_path"})})," (",(0,t.jsx)(n.code,{children:"string"}),"): Contains the absolute path to the project in which the current model is located"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"rng"})})," (",(0,t.jsx)(n.code,{children:"string"}),"): The random number generator to use. Four different ones are at the disposal of the modeler: 'mersenne' represents the default generator, based on the Mersenne-Twister algorithm. Very reliable, fast and deterministic (that is, using the same seed and the same sequence of calls, it will return the same stream of pseudo-random numbers). This algorithm is however not safe to use in simulations where agents can behave in parallel; 'threaded' is a very fast generator, based on the DotMix algorithm, that can be safely used in parallel simulations as it creates one instance per thread. However, determinism cannot be guaranteed and this algorithm does not accept a seed as each instance will compute its own;'parallel' is a version of the Mersenne-Twister algorithm that can be safely used in parallel simulations by preventing a concurrent access to its internal state. Determinism is guaranteed (in terms of generation, but not in terms of execution, as the sequence in which the threads will access it cannot be determined) and it performs a bit slower than its base version.'java' invokes the standard generator provided by the JDK, deterministic and thread-safe, albeit slower than all the other ones"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"rng_usage"})})," (",(0,t.jsx)(n.code,{children:"int"}),"): Returns the number of times the random number generator of the experiment has been drawn"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"seed"})})," (",(0,t.jsx)(n.code,{children:"float"}),"): The seed of the random number generator. Each time it is set, the random number generator is reinitialized. WARNING: Setting it to zero actually means that you let GAMA choose a random seed"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"simulation"})})," (",(0,t.jsx)(n.code,{children:"agent"}),"): Contains a reference to the current simulation being run by this experiment"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"simulations"})})," (",(0,t.jsx)(n.code,{children:"list"}),"): Contains the list of currently running simulations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"workspace_path"})})," (",(0,t.jsx)(n.code,{children:"string"}),"): Contains the absolute path to the workspace of GAMA"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"actions-3",children:"Actions"}),"\n",(0,t.jsx)(n.h4,{id:"compact_memory",children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"compact_memory"})})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Forces a 'garbage collect' of the unused objects in GAMA"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returned type:"})," ",(0,t.jsx)(n.code,{children:"unknown"})]}),"\n",(0,t.jsx)(n.h4,{id:"update_outputs",children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"update_outputs"})})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Forces all outputs to refresh, optionally recomputing their values"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returned type:"})," ",(0,t.jsx)(n.code,{children:"unknown"})]}),"\n",(0,t.jsx)(n.h5,{id:"additional-facets-6",children:"Additional facets:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"recompute"})})," (boolean): Whether or not to force the outputs to make a computation step"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"graph_edge",children:(0,t.jsx)(n.code,{children:"graph_edge"})}),"\n",(0,t.jsx)(n.p,{children:"A species that represents an edge of a graph made of agents. The source and the target of the edge should be agents"}),"\n",(0,t.jsx)(n.h3,{id:"variables-4",children:"Variables"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"source"})})," (",(0,t.jsx)(n.code,{children:"agent"}),"): The source agent of this edge"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"target"})})," (",(0,t.jsx)(n.code,{children:"agent"}),"): The target agent of this edge"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"actions-4",children:"Actions"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"graph_node",children:(0,t.jsx)(n.code,{children:"graph_node"})}),"\n",(0,t.jsx)(n.p,{children:"A base species to use as a parent for species representing agents that are nodes of a graph"}),"\n",(0,t.jsx)(n.h3,{id:"variables-5",children:"Variables"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"my_graph"})})," (",(0,t.jsx)(n.code,{children:"graph"}),"): A reference to the graph containing the agent"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"actions-5",children:"Actions"}),"\n",(0,t.jsx)(n.h4,{id:"related_to",children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"related_to"})})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"This operator should never be called"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returned type:"})," ",(0,t.jsx)(n.code,{children:"bool"})]}),"\n",(0,t.jsx)(n.h5,{id:"additional-facets-7",children:"Additional facets:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"other"})})," (agent): The other agent"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"physical_world",children:(0,t.jsx)(n.code,{children:"physical_world"})}),"\n",(0,t.jsx)(n.p,{children:"The base species for models that act as a 3D physical world. Can register and manage agents provided with either the 'static_body' or 'dynamic_body' skill. Inherits from 'static_body', so it can also act as a physical body itself (with a 'mass', 'friction', 'gravity'), of course without motion -- in this case, it needs to register itself as a physical agent using the 'register' action"}),"\n",(0,t.jsx)(n.h3,{id:"variables-6",children:"Variables"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"accurate_collision_detection"})})," (",(0,t.jsx)(n.code,{children:"boolean"}),"): Enables or not a better (but slower) collision detection"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"automated_registration"})})," (",(0,t.jsx)(n.code,{children:"boolean"}),"): If set to true (the default), makes the world automatically register and unregister agents provided with either the 'static_body' or 'dynamic_body' skill. Otherwise, they must be registered using the 'register' action, which can be useful when only some agents need to be considered as 'physical agents'. Note that, in any case, the world needs to manually register itself if it is supposed to act as a physical body."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"gravity"})})," (",(0,t.jsx)(n.code,{children:"point"}),"): Defines the value of gravity in this world. The default value is set to -9.80665 on the z-axis, that is 9.80665 m/s2 towards the 'bottom' of the world. Can be set to any direction and intensity and applies to all the bodies present in the physical world"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"library"})})," (",(0,t.jsx)(n.code,{children:"string"}),"): This attribute allows to manually switch between two physics library, named 'bullet' and 'box2D'. The Bullet library, which comes in two flavors (see 'use_native') and the Box2D libray in its Java version (",(0,t.jsx)(n.a,{href:"https://github.com/jbox2d/jbox2d",children:"https://github.com/jbox2d/jbox2d"}),"). Bullet is the default library but models in 2D should better use Box2D"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"max_substeps"})})," (",(0,t.jsx)(n.code,{children:"int"}),"): If equal to 0 (the default), makes the simulation engine be stepped alongside the simulation (no substeps allowed). Otherwise, sets the maximum number of physical simulation substeps that may occur within one GAMA simulation step"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"terrain"})})," (",(0,t.jsx)(n.code,{children:"field"}),"): This attribute is a matrix of float that can be used to represent a 3D terrain. The shape of the world, in that case, should be a box, where thedimension on the z-axis is used to scale the z-values of the DEM. The world needs to be register itself as a physical object"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"use_native"})})," (",(0,t.jsx)(n.code,{children:"boolean"}),"): This attribute allows to manually switch between the Java version of the Bullet library (JBullet, a modified version of ",(0,t.jsx)(n.a,{href:"https://github.com/stephengold/jbullet",children:"https://github.com/stephengold/jbullet"}),", which corresponds to version 2.72 of the original library) and the native Bullet library (Libbulletjme, ",(0,t.jsx)(n.a,{href:"https://github.com/stephengold/Libbulletjme",children:"https://github.com/stephengold/Libbulletjme"}),", which is kept up-to-date with the 3.x branch of the original library).The native version is the default one unless the libraries cannot be loaded, making JBullet the default"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"actions-6",children:"Actions"}),"\n",(0,t.jsx)(n.h4,{id:"register",children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"register"})})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"An action that allows to register agents in this physical world. Unregistered agents will not be governed by the physical laws of this world. If the world is to play a role in the physical world,then it needs to register itself (i.e. do register([self]);"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returned type:"})," ",(0,t.jsx)(n.code,{children:"unknown"})]}),"\n",(0,t.jsx)(n.h5,{id:"additional-facets-8",children:"Additional facets:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"bodies"})})," (container): the list or container of agents to register in this physical world"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.M)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},4552:(e,n,s)=>{s.d(n,{I:()=>d,M:()=>l});var t=s(11504);const i={},r=t.createContext(i);function l(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);