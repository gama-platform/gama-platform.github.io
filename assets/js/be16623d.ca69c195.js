"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[24060],{59131:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var n=o(74848),i=o(28453);const a={title:"5. Dynamic weights"},r=void 0,s={id:"RoadTrafficModel_step5",title:"5. Dynamic weights",description:"This 5th step illustrates how to obtain the shortest path from a point to another one and to update the weights of an existing graph.",source:"@site/versioned_docs/version-1.9.1/RoadTrafficModel_step5.md",sourceDirName:".",slug:"/RoadTrafficModel_step5",permalink:"/wiki/1.9.1/RoadTrafficModel_step5",draft:!1,unlisted:!1,editUrl:"https://github.com/gama-platform/gama/wiki/RoadTrafficModel_step5/_edit",tags:[],version:"1.9.1",frontMatter:{title:"5. Dynamic weights"},sidebar:"tuto",previous:{title:"4. Weight for Road Network",permalink:"/wiki/1.9.1/RoadTrafficModel_step4"},next:{title:"6. Charts",permalink:"/wiki/1.9.1/RoadTrafficModel_step6"}},l={},d=[{value:"Formulation",id:"formulation",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"global section",id:"global-section",level:3},{value:"people agents",id:"people-agents",level:3},{value:"Complete Model",id:"complete-model",level:2}];function h(e){const t={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"This 5th step illustrates how to obtain the shortest path from a point to another one and to update the weights of an existing graph."}),"\n",(0,n.jsx)(t.h2,{id:"formulation",children:"Formulation"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["At initialization, the value of the ",(0,n.jsx)(t.code,{children:"destruction_coeff"})," of the ",(0,n.jsx)(t.code,{children:"road"})," agents will be equal to 1."]}),"\n",(0,n.jsxs)(t.li,{children:["Add a new parameter: the ",(0,n.jsx)(t.strong,{children:(0,n.jsx)(t.code,{children:"destroy"})})," parameter that represents the value of destruction when a people agent takes a road. By default, it is equal to 0.02."]}),"\n",(0,n.jsxs)(t.li,{children:["When a people agent arrive at its destination (home or work), it updates the ",(0,n.jsx)(t.code,{children:"destruction_coeff"})," of the ",(0,n.jsx)(t.code,{children:"road"}),' agents it took to reach its destination:  "destruction_coeff = destruction_coeff - destroy". Then, the graph is updated.']}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"model-definition",children:"Model Definition"}),"\n",(0,n.jsx)(t.h3,{id:"global-section",children:"global section"}),"\n",(0,n.jsxs)(t.p,{children:["We add the ",(0,n.jsx)(t.strong,{children:(0,n.jsx)(t.code,{children:"destroy"})})," parameter."]}),"\n",(0,n.jsxs)(t.p,{children:["In the global section, we define the ",(0,n.jsx)(t.code,{children:"destroy"})," variable:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"float destroy <- 0.02;\n"})}),"\n",(0,n.jsx)(t.p,{children:"In the experiment section, we add a parameter:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'parameter "Value of destruction when a people agent takes a road" var: destroy category: "Road" ;\n'})}),"\n",(0,n.jsxs)(t.p,{children:["We define a new reflex that updates the graph at each simulation step. For that, we use the ",(0,n.jsx)(t.code,{children:"with_weights"})," operator. This operator allows to update the weights of an existing graph."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"global {\n    ...\n    reflex update_graph{\n        map<road,float> weights_map <- road as_map (each:: (each.destruction_coeff * each.shape.perimeter));\n        the_graph <- the_graph with_weights weights_map;\n     }\n}\n"})}),"\n",(0,n.jsx)(t.h3,{id:"people-agents",children:"people agents"}),"\n",(0,n.jsxs)(t.p,{children:["At each time-step, after a ",(0,n.jsx)(t.code,{children:"people"})," agent has moved over one or multiple road segments, it updates the value of the destruction coefficient of ",(0,n.jsx)(t.code,{children:"road"})," agents crossed (i.e. roads belonging to the path followed). We have for that to set the argument ",(0,n.jsx)(t.strong,{children:(0,n.jsx)(t.code,{children:"return_path"})})," to ",(0,n.jsx)(t.code,{children:"true"})," in the ",(0,n.jsx)(t.code,{children:"goto"})," action to obtain the path followed, then to compute the list of agents concerned by this path with the operator ",(0,n.jsx)(t.strong,{children:(0,n.jsx)(t.code,{children:"agent_from_geometry"})}),"."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"species people skills: [moving]{\n    ...\n    reflex move when: the_target != nil {\n\tpath path_followed <- goto(target: the_target, on:the_graph, return_path: true);\n\tlist<geometry> segments <- path_followed.segments;\n\tloop line over: segments {\n\t    float dist <- line.perimeter;\n\t    ask road(path_followed agent_from_geometry line) { \n\t\tdestruction_coeff <- destruction_coeff + (destroy * dist / shape.perimeter);\n\t    }\n\t}\n\tif the_target = location {\n\t    the_target <- nil ;\n\t}\n    }\n    ...\n}\t\n"})}),"\n",(0,n.jsx)(t.h2,{id:"complete-model",children:"Complete Model"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-gaml",metastring:"reference",children:"https://github.com/gama-platform/gama.old/blob/GAMA_1.9.0/msi.gama.models/models/Tutorials/Road%20Traffic/models/Model%2005.gaml\n"})})]})}function c(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},28453:(e,t,o)=>{o.d(t,{R:()=>r,x:()=>s});var n=o(96540);const i={},a=n.createContext(i);function r(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);