"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[43147],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>v});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),g=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=g(e.components);return r.createElement(p.Provider,{value:n},e.children)},l="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),l=g(t),d=o,v=l["".concat(p,".").concat(d)]||l[d]||m[d]||a;return t?r.createElement(v,i(i({ref:n},s),{},{components:t})):r.createElement(v,i({ref:n},s))}));function v(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var c={};for(var p in n)hasOwnProperty.call(n,p)&&(c[p]=n[p]);c.originalType=e,c[l]="string"==typeof e?e:o,i[1]=c;for(var g=2;g<a;g++)i[g]=t[g];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},79111:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>p,default:()=>v,frontMatter:()=>c,metadata:()=>g,toc:()=>l});var r=t(87462),o=t(63366),a=(t(67294),t(3905)),i=["components"],c={"^title":"Moving3D"},p=void 0,g={unversionedId:"Moving3D",id:"Moving3D",title:"Moving3D",description:"Path: Library models/Modeling/Spatial Topology/Agent movement/models/Moving3D.gaml",source:"@site/../docs/Moving3D.md",sourceDirName:".",slug:"/Moving3D",permalink:"/wiki/next/Moving3D",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/Moving3D/_edit",tags:[],version:"current",frontMatter:{"^title":"Moving3D"}},s={},l=[],m={toc:l},d="wrapper";function v(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)(d,(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("img",{width:"960",alt:"Annotation 2023-04-15 180000_Moving3D",src:"https://user-images.githubusercontent.com/4437331/232236531-191a5971-3487-4216-af21-e56a7c913424.png"}),(0,a.kt)("p",null,"Path: Library models/Modeling/Spatial Topology/Agent movement/models/Moving3D.gaml"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'\n/**\n* Name:  Movement in 3D\n* Author:  Arnaud Grignard - Tri Nguyen Huu\n* Description: This model illustrates the different action and effect offered by the movingSkill3D (move,wander,goto and follow)\n* Tags: 3d, agent_movement, graph, skill\n*/\n\n\n\nmodel Moving3DModel   \n\nglobal {\n    int number_of_agents parameter: \'Number of Agents\' min: 1 <- 250 step:10 category: \'Initialization\'; \n    int envSize <-100; //max:100;\n    int mazeSize <-10;\n    int radius parameter: \'Radius\' min: 1 <- 1 ;\n    int directionSize parameter: \'direction size\' min: 1 <- 10 ;\n    string effectType <-"blob";// among:["","firework", "blob","direction"];\n    string movingType <-"move";\n    graph mazeGraph;\n    geometry shape <- cube(envSize);\n    bool trace <-false;\n    string agentAspect <- "sphere" among:["circle", "sphere","direction"];\n\n    init { \n        \n        if(movingType = "move" or movingType = "complete"){\n          create movingAgent number: number_of_agents{\n            if(effectType = "firework"){\n              location <- {envSize/2, envSize/2, envSize/2};    \n            }\n            else{\n                location <- {rnd(envSize), rnd(envSize), rnd(envSize)};\n            }\n            color<-#red;    \n          } \n        }\n          \n        if(movingType = "wander" or movingType = "complete"){\n            create wanderAgent number: number_of_agents{\n              location <- {rnd(envSize), rnd(envSize), rnd(envSize)};\n              color<-#green;    \n            }\n        }\n        \n        if(movingType = "goto" or movingType = "complete"){\n            create gotoAgent number: number_of_agents{\n              location <- {rnd(envSize), rnd(envSize), rnd(envSize)};\n              myTarget <-{rnd(envSize),rnd(envSize),rnd(envSize)};\n              color<-#yellow;\n            }\n        }\n        \n        if(movingType = "gotoOnNetwork" or movingType = "complete"){\n            \n            loop i from:0 to:mazeSize{\n              loop j from:0 to: mazeSize{\n                loop k from:0 to:mazeSize{\n                  create cell{\n                    location <-{(i)*envSize/mazeSize,(j)*envSize/mazeSize, (k)*envSize/mazeSize};\n                  } \n                }   \n              }\n            }\n            create gotoAgentOnNetwork number: number_of_agents{\n              location <- {floor(rnd(envSize)/mazeSize)*10, floor(rnd(envSize)/mazeSize)*10, floor(rnd(envSize)/mazeSize)*10};\n              myTarget <-{0,0,0};\n              speed <-0.1;\n              color<-#orange;       \n            }\n            mazeGraph <- as_distance_graph(cell, 10.0,edge_agent);\n    \n        }\n     }\n}\n\nspecies abstractAgent skills: [moving3D]{\n    rgb color;\n    aspect default {\n        if(agentAspect = "sphere"){\n            draw sphere(radius) color:color at:{location.x,location.y,location.z-radius/2};\n        }\n        if(agentAspect = "circle"){\n            draw circle(radius) color:color;\n        }\n        if(agentAspect = "direction"){\n          draw sphere(radius) color:color at:{location.x,location.y,location.z-radius/2};\n          draw line([{location.x,location.y,location.z},{location.x+directionSize*cos(pitch)*cos(heading),location.y+directionSize*cos(pitch)*sin(heading),location.z+directionSize*sin(pitch)}]) end_arrow:1.0 color:color;    \n        }       \n    }\n} \n\nspecies movingAgent  parent:abstractAgent{ \n    reflex move{\n      do move;\n    }       \n}\n\nspecies wanderAgent parent:abstractAgent{ \n    reflex wander{\n      do wander amplitude:90.0;\n    }\n}\n\nspecies gotoAgent parent:abstractAgent{ \n    point myTarget;\n    string gotoType;\n    reflex goto{\n        if(effectType = "blob"){\n            myTarget<-{rnd(envSize),rnd(envSize),rnd(envSize)};\n        }\n        do goto target:myTarget;      \n    }\n}\n\nspecies gotoAgentOnNetwork parent:abstractAgent{ \n    point myTarget;\n    string gotoType;\n    reflex goto{\n        do goto target:myTarget on: mazeGraph;\n    }       \n}\n\n\n    \nspecies cell schedules:[]{\n    \n    aspect myPoint{\n        draw sphere(0.01 * envSize/mazeSize) color:rgb(255,255,255,0.5) at:location ;\n    }\n    \n}\n\nspecies edge_agent schedules:[]{\n    aspect base2 {\n        draw shape color: rgb(255,255,255);\n    }\n}\n    \n\nexperiment Moving  type: gui {\n    parameter "Trace" var:trace <- false;\n    parameter "Movement" var:movingType <- "move";\n    parameter "Agent Aspect" var:agentAspect <- "direction";\n    parameter "Effect type" var:effectType <- "" among:["","firework"];\n    output {    \n        display MovingAgent type:3d  background:rgb(10,40,55) {\n            species movingAgent trace:trace;\n        }\n    }\n}\n\nexperiment Wandering  type: gui {\n    parameter "Trace" var:trace <- false;\n    parameter "Movement" var:movingType <- "wander";\n    parameter "Agent Aspect" var:agentAspect <- "direction";\n    output {    \n        display WanderingAgent type:3d  background:rgb(10,40,55) {\n            species wanderAgent trace:trace;\n        }\n    }\n}\n\nexperiment Goto  type: gui {\n    parameter "Trace" var:trace <- false;\n    parameter "Movement" var:movingType <- "goto";\n    parameter "Agent Aspect" var:agentAspect <- "direction";\n    parameter "Effect Type" var:effectType <- "" among:["","blob"];\n    output {    \n        display GotoAgent type:3d  background:rgb(10,40,55) {\n            species gotoAgent trace:trace;\n        }\n    }\n}\n\nexperiment GotoOnNetwork  type: gui {\n    parameter "Trace" var:trace <- false;\n    parameter "Movement" var:movingType <- "gotoOnNetwork";\n    parameter "Agent Aspect" var:agentAspect <- "direction";\n    output {\n            \n        display GotoOnNetworkAgent type:3d background:rgb(10,40,55) {\n            species gotoAgentOnNetwork trace:trace;\n            species cell aspect:myPoint;\n            species edge_agent aspect: base2 ;\n        }\n    }\n}\n\nexperiment Complete  type: gui {\n    parameter "Trace" var:trace <- false;\n    parameter "Movement" var:movingType <- "complete";\n    parameter "Agent Aspect" var:agentAspect <- "direction";\n    output {\n            \n        display GotoOnNetworkAgent type:3d background:rgb(10,40,55) {\n            species movingAgent position:{0,0,0} trace:trace;\n            species wanderAgent position:{envSize,0,0} trace:trace;\n            species gotoAgent position:{envSize*2,0,0} trace:trace;\n            species gotoAgentOnNetwork position:{envSize*3,0,0} trace:trace;\n            species cell aspect:myPoint position:{envSize*3,0,0};\n            species edge_agent aspect: base2 position:{envSize*3,0,0};\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n')))}v.isMDXComponent=!0}}]);