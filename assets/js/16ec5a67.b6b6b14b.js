"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[18847],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),u=o,f=d["".concat(p,".").concat(u)]||d[u]||m[u]||r;return n?a.createElement(f,i(i({ref:t},c),{},{components:n})):a.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},88545:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>f,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var a=n(87462),o=n(63366),r=(n(67294),n(3905)),i=["components"],l={title:"6. Charts"},p=void 0,s={unversionedId:"RoadTrafficModel_step6",id:"version-1.9.2/RoadTrafficModel_step6",title:"6. Charts",description:"This 6th step illustrates how to display charts.",source:"@site/versioned_docs/version-1.9.2/RoadTrafficModel_step6.md",sourceDirName:".",slug:"/RoadTrafficModel_step6",permalink:"/wiki/RoadTrafficModel_step6",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/RoadTrafficModel_step6/_edit",tags:[],version:"1.9.2",frontMatter:{title:"6. Charts"},sidebar:"tuto",previous:{title:"5. Dynamic weights",permalink:"/wiki/RoadTrafficModel_step5"},next:{title:"7. Automatic Road Repair",permalink:"/wiki/RoadTrafficModel_step7"}},c={},d=[{value:"Formulation",id:"formulation",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"chart display",id:"chart-display",level:3},{value:"Complete Model",id:"complete-model",level:2}],m={toc:d},u="wrapper";function f(e){var t=e.components,n=(0,o.Z)(e,i);return(0,r.kt)(u,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This 6th step illustrates how to display charts."),(0,r.kt)("h2",{id:"formulation"},"Formulation"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Add a chart to display the evolution of the road destruction: the mean value of the ",(0,r.kt)("inlineCode",{parentName:"li"},"destruction_coeff")," of the ",(0,r.kt)("inlineCode",{parentName:"li"},"road")," agents, and its max value (refreshed every 10 simulation steps)."),(0,r.kt)("li",{parentName:"ul"},"Add a chart to display the activity of the ",(0,r.kt)("inlineCode",{parentName:"li"},"people")," agent (working or staying home, refreshed every 10 simulation steps).")),(0,r.kt)("h2",{id:"model-definition"},"Model Definition"),(0,r.kt)("h3",{id:"chart-display"},"chart display"),(0,r.kt)("p",null,"First, we add a chart of type ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"series"))," to display the road destruction evolution. To compute the mean of the ",(0,r.kt)("inlineCode",{parentName:"p"},"destruction_coeff"),", we combine the ",(0,r.kt)("strong",{parentName:"p"},"mean")," and ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"collect"))," operators. ",(0,r.kt)("inlineCode",{parentName:"p"},"collect")," takes a container and an expression as operands and will compute a new list, each element being the evaluation on the container operand of the expression. ",(0,r.kt)("inlineCode",{parentName:"p"},"mean")," computes the average of all the elements of a list. For the max, we use the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"max_of"))," operator. (Note that the operator ",(0,r.kt)("inlineCode",{parentName:"p"},"mean_of")," also exists to replace ",(0,r.kt)("inlineCode",{parentName:"p"},"mean")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"collect"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'     output {\n         display chart_display refresh:every(10#cycles) {\n             chart "Road Status" type: series size: {1, 0.5} position: {0, 0} {\n                 data "Mean road destruction" value: mean (road collect each.destruction_coeff) style: line color: #green ;\n             data "Max road destruction" value: road max_of each.destruction_coeff style: line color: #red ;\n         }\n             ...\n         }\n     }\n')),(0,r.kt)("p",null,"Second, we add a chart of type ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"pie"))," to display the activity of the ",(0,r.kt)("inlineCode",{parentName:"p"},"people")," agents. We use for that the ",(0,r.kt)("inlineCode",{parentName:"p"},"objective")," variable of the ",(0,r.kt)("inlineCode",{parentName:"p"},"people")," agents and the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"count"))," operator that allows computing the number of elements of a list that verify a condition."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'    output {\n      ...\n      display chart_display refresh: every(10#cycles) {\n          ...\n          chart "People Objectif" type: pie style: exploded size: {1, 0.5} position: {0, 0.5}{\n           data "Working" value: people count (each.objective="working") color: #magenta ;\n           data "Resting" value: people count (each.objective="resting") color: #blue ;\n      }\n     }\n   }\n')),(0,r.kt)("p",null,"We chose to display the 2 charts on the same display. As a consequence, we specified the ",(0,r.kt)("inlineCode",{parentName:"p"},"size")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"position")," of each of them to define the layout of this display."),(0,r.kt)("h2",{id:"complete-model"},"Complete Model"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-gaml",metastring:"reference",reference:!0},"https://github.com/gama-platform/gama/blob/GAMA_1.9.2/msi.gama.models/models/Tutorials/Road%20Traffic/models/Model%2006.gaml\n")))}f.isMDXComponent=!0}}]);