"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[46928],{23312:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var t=i(17624),s=i(4552);const r={title:"Defining advanced species"},a=void 0,c={id:"DefiningAdvancedSpecies",title:"Defining advanced species",description:"In the previous chapter, we saw how to declare and manipulate regular species and the global species (as a reminder, the instance of the global species is the world agent).",source:"@site/../docs/DefiningAdvancedSpecies.md",sourceDirName:".",slug:"/DefiningAdvancedSpecies",permalink:"/wiki/next/DefiningAdvancedSpecies",draft:!1,unlisted:!1,editUrl:"https://github.com/gama-platform/gama/wiki/DefiningAdvancedSpecies/_edit",tags:[],version:"current",frontMatter:{title:"Defining advanced species"},sidebar:"main",previous:{title:"Inheritance",permalink:"/wiki/next/Inheritance"},next:{title:"Grid Species",permalink:"/wiki/next/GridSpecies"}},o={},l=[];function d(e){const n={a:"a",p:"p",strong:"strong",...(0,s.M)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["In the previous chapter, we saw how to declare and manipulate ",(0,t.jsx)(n.a,{href:"RegularSpecies",children:(0,t.jsx)(n.strong,{children:"regular species"})})," and the ",(0,t.jsx)(n.a,{href:"GlobalSpecies",children:(0,t.jsx)(n.strong,{children:"global species"})})," (as a reminder, the instance of the ",(0,t.jsx)(n.strong,{children:"global species"})," is the ",(0,t.jsx)(n.strong,{children:"world agent"}),")."]}),"\n",(0,t.jsxs)(n.p,{children:["We will now see that GAMA provides you the possibility to declare some special species, such as ",(0,t.jsx)(n.a,{href:"GridSpecies",children:(0,t.jsx)(n.strong,{children:"grids"})})," or ",(0,t.jsx)(n.a,{href:"GraphSpecies",children:(0,t.jsx)(n.strong,{children:"graphs"})}),", with their own built-in attributes and their own built-in actions. We will also see how to declare ",(0,t.jsx)(n.a,{href:"MirrorSpecies",children:(0,t.jsx)(n.strong,{children:"mirror species"})}),', which is a "copy" of a regular species, in order to give it an other representation. Finally, we will learn how to represent several agents through one unique agent, with ',(0,t.jsx)(n.a,{href:"MultiLevelArchitecture",children:(0,t.jsx)(n.strong,{children:"multi-level architecture"})}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,s.M)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},4552:(e,n,i)=>{i.d(n,{I:()=>c,M:()=>a});var t=i(11504);const s={},r=t.createContext(s);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);