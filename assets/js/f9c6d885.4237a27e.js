"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[82458],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(n),h=r,f=m["".concat(s,".").concat(h)]||m[h]||c[h]||o;return n?a.createElement(f,i(i({ref:t},u),{},{components:n})):a.createElement(f,i({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},36511:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>p,toc:()=>c});var a=n(87462),r=n(63366),o=(n(67294),n(3905)),i=["components"],l={title:"Manipulate OSM Datas"},s=void 0,p={unversionedId:"ManipulateOSMDatas",id:"ManipulateOSMDatas",title:"Manipulate OSM Datas",description:"[//]: # (startConcept|useosmdatas)",source:"@site/../docs/ManipulateOSMDatas.md",sourceDirName:".",slug:"/ManipulateOSMDatas",permalink:"/wiki/next/ManipulateOSMDatas",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/ManipulateOSMDatas/_edit",tags:[],version:"current",frontMatter:{title:"Manipulate OSM Datas"},sidebar:"side",previous:{title:"Recipes",permalink:"/wiki/next/Recipes"},next:{title:"Implementing diffusion",permalink:"/wiki/next/Diffusion"}},u={},c=[],m={toc:c};function h(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This section will be presented as a quick tutorial, showing how to proceed to manipulate OSM (Open street map) data, clean them and load them into GAMA. We will use the software ",(0,o.kt)("a",{parentName:"p",href:"http://www.qgis.org/en/site/"},"QGIS")," to change the attributes of the OSM file."),(0,o.kt)("p",null,"Note that GAMA can read and import OpenStreetMap data natively and create agents from them. An example model is provided in the Model Library (Data Importation / OSM File Import.gaml). In this case, you will have to write a model to import, select data from OpenStreetMap before creating agents and then could export them into shapefiles, much easier to use in GAMA."),(0,o.kt)("p",null,"From the website ",(0,o.kt)("a",{parentName:"p",href:"https://www.openstreetmap.org/"},"openstreetmap.org"),", we will choose a place (in this example, we will take a neighborhood in New York City). Directly from the website, you can export the chosen area in the osm format."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/104968829/204845707-8be0ce2a-0619-4405-b007-e2c95a7ad79e.png",alt:"openstreetmap"})),(0,o.kt)("p",null,"We have now to manipulate the attributes for the exported osm file.\nSeveral softwares can be used, but we will focus on ",(0,o.kt)("a",{parentName:"p",href:"http://www.qgis.org/en/site/"},"QGIS"),", which is totally free and provides a lot of possibilities in term of manipulation of data."),(0,o.kt)("p",null,"Once you have installed correctly QGIS, launch QGIS Desktop, and start to import the topology from the osm file."),(0,o.kt)("p",null,'QGis 3, the version we are using to build this tutorial, needs us to install a plugin to process files downloaded from OSM website. There are several versions of plugins allowing to do that. However, the most stable and simple one to use is QuickOSM. Go to your extension manager, select "All extensions" on the top left corner, look for "QuickOSM" extension and install it. '),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/104968829/204847283-7596dfba-1071-4e64-a5fe-ca1092449b33.png",alt:"QuickOSM"})),(0,o.kt)("p",null,'You should now be able to use the extension QuickOSM. Open its menu by entering the vector menu on the top QGis panel, go to QuickOSM, then select :\n1) OSM file\n2) Browse your xml file.\n3) Browse to select the folder that will welcome the processed file through QGis (select the "includes" folder of your current GAMA project for more efficency).\n4) Select the format you want for your processed file (in the example, ESRI shapefile will give a .shp, very well processed by GAMA afterwards).\n5) Open your file. '),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/104968829/204847942-92ae0190-2534-49b8-871e-aaf20f605aca.png",alt:"ImportOSMfile"})),(0,o.kt)("p",null,"You will go back naturally to the main QGis UI and you downloaded OSM layer will be visible. We only want buildings for this tutorial, so we simply delete the other layers by selecting and deleting them through QGis layer interface."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/104968829/204848061-9bf91688-a761-4b70-8e87-1b1645ac35a6.png",alt:"Suppressotherlayers"})),(0,o.kt)("p",null,"Create a new field for the building layer to allow a better handling in GAMA platform : first, enter you attribute table of the layer. "),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/104968829/204848290-b8fb1cdd-edcc-491b-aa8d-94e07497b196.png",alt:"Openattributes"})),(0,o.kt)("p",null,"Then, go to edit mode (the pen icon on the top left corner) and select field calculator. "),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/104968829/204848446-8ea0b638-d08e-4751-9e4c-f8beb7eb0393.png",alt:"InAttributes"})),(0,o.kt)("p",null,"Stay on the left hand side, we will now set up the field's characteristics, you can copy what you see in the screenshot bellow. Pay attention to selecting \"string\" to the field type, otherwise you won't be able to get the proper format of attributes in the following steps of this tutorial. "),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/104968829/204848527-36adeb49-dd8b-4445-8192-fe7b021a96d6.png",alt:"Creatingattr1"})),(0,o.kt)("p",null,'We want to create this attribute and associate to it variables that will be colors. We want to ask QGis to do that randomly on its own. Therefore, we have to provide the software a function. Go to the "function editor" tab, click on the "+" to add a new function file and write these lines down after having deleted the default help : '),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"from qgis.core import *\nfrom qgis.gui import *\nimport random, string\n\n@qgsfunction(args='auto', group='Custom')\ndef myFun(value1, feature, parent):\n    return random.choice([\"blue\",\"red\"])\n")),(0,o.kt)("p",null,"Save and run the function using the proper button on the bottom right corner. "),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/104968829/204848945-75003228-5d0a-4130-899e-75d20befdbc1.png",alt:"Creatingattr2"})),(0,o.kt)("p",null,"Then go to the expression type and call your function by typing :\n",(0,o.kt)("inlineCode",{parentName:"p"},"myFun('attrForGam')"),'\nClick on "Ok" which will get you back to your attribute table : you can now check the layer\'s attributes to see if the new field \'attrForGam\' has been filled with random values "red" or "blue". '),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/104968829/204849191-2d81e846-94b2-4460-8838-0e6f25bc31be.png",alt:"Creatingattr3"})),(0,o.kt)("p",null,'Save your layer as an .shp file. Normally, there should be an existing file with the building layer already in your folder. As a safety measure, save your new features since you\'re certain the work on them is done. You can delete the other remaining other files in your "includes" folder.'),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/104968829/204849294-56dbbb4a-9672-4667-a5eb-216188733108.png",alt:"SaveFeatures"})),(0,o.kt)("p",null,"The file is now ready to be used in GAMA for modelling. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"model OSMtutorial\n\nglobal {\n    // Global variables related to the Management units \n    file shapeFile <- file(\"../includes/OSM_For_GAMA.shp\"); \n    \n    //definition of the environment size from the shapefile. \n    //Note that is possible to define it from several files by using: geometry shape <- envelope(envelope(file1) + envelope(file2) + ...);\n    geometry shape <- envelope(shapeFile);\n    \n    init {\n    //Creation of elementOfNewYork agents from the shapefile (and reading some of the shapefile attributes)\n    create elementOfNewYork from: shapeFile \n        with: [elementId::int(read('id')), elementHeight::int(read('height')), elementColor::string(read('attrForGam'))] ;\n    }\n}\n    \nspecies elementOfNewYork{\n    int elementId;\n    int elementHeight;\n    string elementColor;\n    \n    aspect basic{\n    draw shape color: (elementColor = \"blue\") ? #blue : ( (elementColor = \"red\") ? #red : #blue ) depth: elementHeight;\n    }\n}   \n\nexperiment main type: gui {     \n    output {\n    display HowToUseOpenStreetMap type:opengl {\n       species elementOfNewYork aspect: basic; \n    }\n    }\n}\n")),(0,o.kt)("p",null,'Here is the result, with a special colorization of the different elements regarding the value of the attribute "attrForGama".'),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/104968829/204850450-582c5161-1a64-42f0-b3ca-ab38c6ed3f04.png",alt:"FinalGama"})))}h.isMDXComponent=!0}}]);