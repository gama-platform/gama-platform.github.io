"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[99112],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>c});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),m=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},p=function(e){var t=m(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=m(a),h=i,c=u["".concat(s,".").concat(h)]||u[h]||d[h]||l;return a?n.createElement(c,r(r({ref:t},p),{},{components:a})):n.createElement(c,r({ref:t},p))}));function c(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=a.length,r=new Array(l);r[0]=h;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:i,r[1]=o;for(var m=2;m<l;m++)r[m]=a[m];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},20453:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>m,toc:()=>u});var n=a(87462),i=a(63366),l=(a(67294),a(3905)),r=["components"],o={title:"Index of annotations"},s=void 0,m={unversionedId:"DevelopingIndexAnnotations",id:"DevelopingIndexAnnotations",title:"Index of annotations",description:"Annotations are used to link Java methods and classes to GAML language.",source:"@site/../docs/DevelopingIndexAnnotations.md",sourceDirName:".",slug:"/DevelopingIndexAnnotations",permalink:"/wiki/next/DevelopingIndexAnnotations",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/DevelopingIndexAnnotations/_edit",tags:[],version:"current",frontMatter:{title:"Index of annotations"},sidebar:"main",previous:{title:"Developing architecture",permalink:"/wiki/next/DevelopingControlArchitectures"},next:{title:"Introduction to GAMA Java API",permalink:"/wiki/next/Introduction-To-Gama-Java-API"}},p={},u=[{value:"@action",id:"action",level:2},{value:"@arg",id:"arg",level:2},{value:"@constant",id:"constant",level:2},{value:"@doc",id:"doc",level:2},{value:"@example",id:"example",level:2},{value:"@facet",id:"facet",level:2},{value:"@facets",id:"facets",level:2},{value:"@file",id:"file",level:2},{value:"@getter",id:"getter",level:2},{value:"@inside",id:"inside",level:2},{value:"@operator",id:"operator",level:2},{value:"@serializer",id:"serializer",level:2},{value:"@setter",id:"setter",level:2},{value:"@skill",id:"skill",level:2},{value:"@species",id:"species",level:2},{value:"@symbol",id:"symbol",level:2},{value:"@type",id:"type",level:2},{value:"@usage",id:"usage",level:2},{value:"@validator",id:"validator",level:2},{value:"@variable",id:"variable",level:2},{value:"@vars",id:"vars",level:2}],d={toc:u},h="wrapper";function c(e){var t=e.components,a=(0,i.Z)(e,r);return(0,l.kt)(h,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Annotations are used to link Java methods and classes to GAML language."),(0,l.kt)("h2",{id:"action"},"@action"),(0,l.kt)("p",null,"This annotation is used to tag a method that will be considered as an action (or primitive) in GAML.\nThe method must have the following signature: ",(0,l.kt)("inlineCode",{parentName:"p"},"Object methodName(IScope) throws GamaRuntimeException")," and be contained in a class annotated with ",(0,l.kt)("a",{parentName:"p",href:"#species"},"@species")," or ",(0,l.kt)("a",{parentName:"p",href:"#skill"},"@skill")," (or a related class, like a subclass or an interface)."),(0,l.kt)("p",null,"This annotation contains:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"name")," (String): ",(0,l.kt)("em",{parentName:"li"},"the name of the variable as it can be used in GAML"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"virtual")," (boolean, false by default): ",(0,l.kt)("em",{parentName:"li"},"if true the action is virtual, i.e. equivalent to abstract method in java"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"args")," (set of ",(0,l.kt)("a",{parentName:"li",href:"#arg"},"@arg"),", empty by default): ",(0,l.kt)("em",{parentName:"li"},"the list of arguments passed to this action. Each argument is an instance of arg"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"doc")," (set of ",(0,l.kt)("a",{parentName:"li",href:"#doc"},"@doc"),", empty by default): ",(0,l.kt)("em",{parentName:"li"},"the documentation associated to the action"),".")),(0,l.kt)("h2",{id:"arg"},"@arg"),(0,l.kt)("p",null,"This annotation describes an argument passed to an action."),(0,l.kt)("p",null,"This annotation contains:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"name"),' (String, "" by default): ',(0,l.kt)("em",{parentName:"li"},"the name of the argument as it can be used in GAML"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"type")," (set of ints, empty by default): ",(0,l.kt)("em",{parentName:"li"},"An array containing the textual representation of the types that can be taken by the argument (see ",(0,l.kt)("inlineCode",{parentName:"em"},"IType"),")"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"optional")," (boolean, true by default): ",(0,l.kt)("em",{parentName:"li"},"whether this argument is optional or not"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"doc")," (set of ",(0,l.kt)("a",{parentName:"li",href:"#doc"},"@doc"),", empty by default): ",(0,l.kt)("em",{parentName:"li"},"the documentation associated to the argument."))),(0,l.kt)("h2",{id:"constant"},"@constant"),(0,l.kt)("p",null,"This annotation is used to annotate fields that are used as constants in GAML."),(0,l.kt)("p",null,"This annotation contains:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"category")," (set of Strings, empty by default): ",(0,l.kt)("em",{parentName:"li"},"an array of strings, each representing a category in which this constant can be classified (for documentation indexes)"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value")," (String): ",(0,l.kt)("em",{parentName:"li"},"a string representing the basic keyword for the constant. Does not need to be unique throughout GAML"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"altNames")," (set of Strings, empty by default): ",(0,l.kt)("em",{parentName:"li"},"an Array of strings, each representing a possible alternative name for the constant. Does not need to be unique throughout GAML"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"doc")," (set of ",(0,l.kt)("a",{parentName:"li",href:"#doc"},"@doc"),", empty by default): ",(0,l.kt)("em",{parentName:"li"},"the documentation attached to this constant"),".")),(0,l.kt)("h2",{id:"doc"},"@doc"),(0,l.kt)("p",null,"It provides a unified way of attaching documentation to the various GAML elements tagged by the other annotations. The documentation is automatically assembled at compile time and also used at runtime in GAML editors."),(0,l.kt)("p",null,"This annotation contains:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value"),' (String, "" by default): ',(0,l.kt)("em",{parentName:"li"},"a String representing the documentation of a GAML element"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"masterDoc")," (boolean, false by default): ",(0,l.kt)("em",{parentName:"li"},"a boolean representing the fact that this instance of the operator is the master one, that is whether its value will subsume the value of all other instances of it"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"deprecated"),' (String, "" by default): ',(0,l.kt)("em",{parentName:"li"},"a String indicating (if it is not empty) that the element is deprecated and defining, if possible, what to use instead"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"returns"),' (String, "" by default): ',(0,l.kt)("em",{parentName:"li"},"the documentation concerning the value(s) returned by this element (if any)."),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"comment"),' (String, "" by default): ',(0,l.kt)("em",{parentName:"li"},"an optional comment that will appear differently from the documentation itself"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"special","_","cases")," (set of Strings, empty by default): ",(0,l.kt)("em",{parentName:"li"},'an array of String representing the documentation of the "special cases" in which the documented element takes part'),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"examples")," (set of ",(0,l.kt)("a",{parentName:"li",href:"#example"},"@example"),", empty by default): ",(0,l.kt)("em",{parentName:"li"},"an array of String representing some examples or use-cases about how to use this element"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"usages")," (set of ",(0,l.kt)("a",{parentName:"li",href:"#usage"},"@usage"),", empty by default): ",(0,l.kt)("em",{parentName:"li"},"An array of usages representing possible usage of the element in GAML"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"see")," (set of Strings, empty by default): ",(0,l.kt)("em",{parentName:"li"},"an array of String representing cross-references to other elements in GAML"),".")),(0,l.kt)("h2",{id:"example"},"@example"),(0,l.kt)("p",null,"This facet describes an example, that can be used either in the documentation, as unit test or as pattern."),(0,l.kt)("p",null,"This annotation contains:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value"),' (String, "" by default): ',(0,l.kt)("em",{parentName:"li"},"a String representing the expression as example"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"var"),' (String, "" by default): ',(0,l.kt)("em",{parentName:"li"},"The variable that will be tested in the equals, if it is omitted a default variable will be used"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"equals"),' (String, "" by default): ',(0,l.kt)("em",{parentName:"li"},"The value to which the value will be compared"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"returnType"),' (String, "" by default): ',(0,l.kt)("em",{parentName:"li"},"The type of the value that should be tested"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"isNot"),' (String, "" by default): ',(0,l.kt)("em",{parentName:"li"},"The value to which the value will be compared"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"raises"),' (String, "" by default): ',(0,l.kt)("em",{parentName:"li"},"The exception or warning that the expression could raise"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"isTestOnly")," (boolean, false by default): ",(0,l.kt)("em",{parentName:"li"},"specifies that the example should not be included in the documentation"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"isExecutable")," (boolean, true by default): ",(0,l.kt)("em",{parentName:"li"},"specifies that the example is correct GAML code that can be executed"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"test")," (boolean, true by default): ",(0,l.kt)("em",{parentName:"li"},"specifies that the example is will be tested with the equals"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"isPattern")," (boolean, false by default): ",(0,l.kt)("em",{parentName:"li"},"whether or not this example should be treated as part of a pattern (see @usage). If true, the developers might want to consider writing the example line (and its associated lines) using template variables (e.g. ${my_agent})"),".\n")),(0,l.kt)("h2",{id:"facet"},"@facet"),(0,l.kt)("p",null,"This facet describes a facet in a list of facets."),(0,l.kt)("p",null,"This annotation contains:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"name")," (String): ",(0,l.kt)("em",{parentName:"li"},"the name of the facet. Must be unique within a symbol"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"type")," (set of int): ",(0,l.kt)("em",{parentName:"li"},"the string values of the different types that can be taken by this facet"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"values")," (set of Strings, empty by default): ",(0,l.kt)("em",{parentName:"li"},"the values that can be taken by this facet. The value of the facet expression will be chosen among the values described here"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"optional")," (boolean, false by default): ",(0,l.kt)("em",{parentName:"li"},"whether or not this facet is optional or mandatory"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"doc")," (set of ",(0,l.kt)("a",{parentName:"li",href:"#doc"},"@doc"),", empty by default): ",(0,l.kt)("em",{parentName:"li"},"the documentation associated to the facet"),".")),(0,l.kt)("h2",{id:"facets"},"@facets"),(0,l.kt)("p",null,"This annotation describes a list of facets used by a statement in GAML."),(0,l.kt)("p",null,"This annotation contains:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value")," (set of ",(0,l.kt)("a",{parentName:"li",href:"#facet"},"@facet"),"): array of @facet, each representing a facet name, type.."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"ommissible")," (string): ",(0,l.kt)("em",{parentName:"li"},"the facet that can be safely omitted by the modeler (provided its value is the first following the keyword of the statement)"),".")),(0,l.kt)("h2",{id:"file"},"@file"),(0,l.kt)("p",null,"This annotation is used to define a type of file."),(0,l.kt)("p",null,"This annotation contains:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"name")," (String): ",(0,l.kt)("em",{parentName:"li"},'a (human-understandable) string describing this type of files, suitable for use in composed operator names (e.g. "shape", "image"...). This name will be used to generate two operators: name+"_file" and "is'),'"+name. The first operator may have variants taking one or several arguments, depending on the @builder annotations present on the class_.'),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"extensions")," (set of Strings): ",(0,l.kt)("em",{parentName:"li"},"an array of extensions (without the '.' delimiter) or an empty array if no specific extensions are associated to this type of files (e.g. ",'["png","jpg","jpeg"...]','). The list of file extensions allowed for this type of file. These extensions will be used to check the validity of the file path, but also to generate the correct type of file when a path is passed to the generic "file" operator'),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"buffer","_","content")," (int, ITypeProvider.NONE by default): ",(0,l.kt)("em",{parentName:"li"},"the type of the content of the buffer. Can be directly a type in IType or one of the constants declared in ITypeProvider (in which case, the content type is searched using this provider)"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"buffer","_","index")," (int, ITypeProvider.NONE by default): ",(0,l.kt)("em",{parentName:"li"},"the type of the index of the buffer. Can be directly a type in IType or one of the constants declared in ITypeProvider (in which case, the index type is searched using this provider)"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"buffer","_","type")," (int, ITypeProvider.NONE by default): ",(0,l.kt)("em",{parentName:"li"},"the type of the buffer. Can be directly a type in IType or one of the constants declared in ITypeProvider (in which case, the type is searched using this provider)"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"doc")," (set of ",(0,l.kt)("a",{parentName:"li",href:"#doc"},"@doc"),", empty by default): ",(0,l.kt)("em",{parentName:"li"},"the documentation attached to this operator"),".")),(0,l.kt)("h2",{id:"getter"},"@getter"),(0,l.kt)("p",null,"This annotation is used to indicate that a method is to be used as a getter for a variable defined in the class. The variable must be defined on its own (in vars)."),(0,l.kt)("p",null,"This annotation contains:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value")," (String): the name of the variable for which the annotated method is to be considered as a getter."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"initializer")," (boolean, false by default): returns whether or not this getter should also be used as an initializer")),(0,l.kt)("h2",{id:"inside"},"@inside"),(0,l.kt)("p",null,"This annotation is used in conjunction with ",(0,l.kt)("inlineCode",{parentName:"p"},"@symbol"),". It provides a way to tell where this symbol should be located in a model (i.e. what its parents should be). Either direct symbol names (in symbols) or generic symbol kinds can be used."),(0,l.kt)("p",null,"This annotation contains:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"symbols")," (set of Strings, empty by default): ",(0,l.kt)("em",{parentName:"li"},"symbol names of the parents"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"kinds")," (set of int, empty by default): ",(0,l.kt)("em",{parentName:"li"},"generic symbol kinds of the parents (see ",(0,l.kt)("a",{parentName:"em",href:"https://github.com/gama-platform/gama/blob/GAMA_1.9.2/ummisco.gama.annotations/src/msi/gama/precompiler/ISymbolKind.java"},"ISymbolKind.java")," for more details)"),".")),(0,l.kt)("h2",{id:"operator"},"@operator"),(0,l.kt)("p",null,'This annotation represents an "operator" in GAML and is used to define its name(s) as well as some meta-data that will be used during the validation process.'),(0,l.kt)("p",null,"This annotation contains:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value")," (set of Strings, empty by default): ",(0,l.kt)("em",{parentName:"li"},"names of the operator"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"category")," (set of string, empty by default): ",(0,l.kt)("em",{parentName:"li"},"categories to which the operator belongs (for documentation purpose)"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"iterator")," (boolean, false by default): ",(0,l.kt)("em",{parentName:"li"},'true if this operator should be treated as an iterator (i.e.requires initializing the special variable "each" of WorldSkill within the method)'),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"can","_","be","_","const")," (boolean, false by default): ",(0,l.kt)("em",{parentName:"li"},"if true: if the operands are constant, returns a constant value"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"content","_","type")," (int, ITypeProvider.NONE by default): ",(0,l.kt)("em",{parentName:"li"},"the type of the content if the returned value is a container. Can be directly a type in IType or one of the constants declared in ITypeProvider (in which case, the content type is searched using this provider)"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"index","_","type")," (int, ITypeProvider.NONE by default): ",(0,l.kt)("em",{parentName:"li"},"the type of the index if the returned value is a container. Can be directly a type in IType or one of the constants declared in ITypeProvider (in which case, the index type is searched using this provider)"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"expected","_","content","_","type")," (set of int, empty by default): ",(0,l.kt)("em",{parentName:"li"},"if the argument is a container, returns the types expected for its contents. Should be an array of IType.XXX"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"type")," (int, ITypeProvider.NONE by default): ",(0,l.kt)("em",{parentName:"li"},'the type of the expression if it cannot be determined at compile time (i.e. when the return type is "Object"). Can be directly a type in IType or one of the constants declared in ITypeProvider (in which case, the type is searched using this provider).'),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"internal")," (boolean, false by default): ",(0,l.kt)("em",{parentName:"li"},"returns whether this operator is for internal use only"),". "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"doc")," (set of ",(0,l.kt)("a",{parentName:"li",href:"#doc"},"@doc"),", empty by default): ",(0,l.kt)("em",{parentName:"li"},"the documentation attached to this operator."))),(0,l.kt)("h2",{id:"serializer"},"@serializer"),(0,l.kt)("p",null,"It allows to declare a custom serializer for Symbols (statements, var declarations, species, experiments, etc.). This serializer will be called instead of the standard serializer, superseding this last one. Serializers must be subclasses of the SymbolSerializer class."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value")," (Class): ",(0,l.kt)("em",{parentName:"li"},"the serializer class"),".")),(0,l.kt)("h2",{id:"setter"},"@setter"),(0,l.kt)("p",null,"This annotation is used to indicate that a method is to be used as a setter for a variable defined in the class. The variable must be defined on its own (in vars)."),(0,l.kt)("p",null,"This annotation contains:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value")," (String): the name of the variable for which the annotated method is to be considered as a setter.")),(0,l.kt)("h2",{id:"skill"},"@skill"),(0,l.kt)("p",null,"This annotation allows to define a new skill (class grouping variables and actions that can be used by agents)."),(0,l.kt)("p",null,"This annotation contains:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"name")," (String): ",(0,l.kt)("em",{parentName:"li"},"a String representing the skill name in GAML (must be unique throughout GAML)"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"attach","_","to")," (set of strings): ",(0,l.kt)("em",{parentName:"li"},'an array of species names to which the skill will be automatically added (complements the "skills" parameter of species)'),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"internal")," (boolean, false by default): ",(0,l.kt)("em",{parentName:"li"},"return whether this skill is for internal use only"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"doc")," (set of ",(0,l.kt)("a",{parentName:"li",href:"#doc"},"@doc"),", empty by default): ",(0,l.kt)("em",{parentName:"li"},"the documentation associated to the skill"),".")),(0,l.kt)("h2",{id:"species"},"@species"),(0,l.kt)("p",null,'This annotation represents a "species" in GAML. The class annotated with this annotation will be the support of a species of agents.'),(0,l.kt)("p",null,"This annotation contains:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"name")," (string): ",(0,l.kt)("em",{parentName:"li"},"the name of the species that will be created with this class as base. Must be unique throughout GAML"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"skills")," (set of strings, empty by default): ",(0,l.kt)("em",{parentName:"li"},"An array of skill names that will be automatically attached to this species.")," Example: ",(0,l.kt)("inlineCode",{parentName:"li"},'@species(value="animal" skills={"moving"})')),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"internal")," (boolean, false by default): ",(0,l.kt)("em",{parentName:"li"},"whether this species is for internal use only"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"doc")," (set of ",(0,l.kt)("a",{parentName:"li",href:"#doc"},"@doc"),", empty by default): ",(0,l.kt)("em",{parentName:"li"},"the documentation attached to this operator."))),(0,l.kt)("h2",{id:"symbol"},"@symbol"),(0,l.kt)("p",null,'This annotation represents a "statement" in GAML and is used to define its name(s) as well as some meta-data that will be used during the validation process.'),(0,l.kt)("p",null,"This annotation contains:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"name")," (set of string, empty by default): ",(0,l.kt)("em",{parentName:"li"},"names of the statement"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"kind")," (int): ",(0,l.kt)("em",{parentName:"li"},"the kind of the annotated symbol (see ",(0,l.kt)("a",{parentName:"em",href:"https://github.com/gama-platform/gama/blob/GAMA_1.9.2/ummisco.gama.annotations/src/msi/gama/precompiler/ISymbolKind.java"},"ISymbolKind.java")," for more details)"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"with","_","scope")," (boolean, true by default): ",(0,l.kt)("em",{parentName:"li"},"indicates if the statement (usually a sequence) defines its own scope. Otherwise, all the temporary variables defined in it are actually defined in the super-scope"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"with","_","sequence")," (boolean): ",(0,l.kt)("em",{parentName:"li"},"indicates whether or not a sequence can or should follow the symbol denoted by this class"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"with","_","args")," (boolean, false by default): ",(0,l.kt)("em",{parentName:"li"},"indicates whether or not the symbol denoted by this class will accept arguments"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"remote","_","context")," (boolean, false by default): ",(0,l.kt)("em",{parentName:"li"},"indicates that the context of this statement is actually a hybrid context: although it will be executed in a remote context, any temporary variables declared in the enclosing scopes should be passed on as if the statement was executed in the current context"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"doc")," (set of ",(0,l.kt)("a",{parentName:"li",href:"#doc"},"@doc"),", empty by default): ",(0,l.kt)("em",{parentName:"li"},"the documentation attached to this symbol"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"internal")," (boolean, false by default): ",(0,l.kt)("em",{parentName:"li"},"returns whether this symbol is for internal use only"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"unique","_","in","_","context")," (boolean, false by default): ",(0,l.kt)("em",{parentName:"li"},"Indicates that this statement must be unique in its super context (for example, only one return is allowed in the body of an action)."),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"unique","_","name")," (boolean, false by default): ",(0,l.kt)("em",{parentName:"li"},"Indicates that only one statement with the same name should be allowed in the same super context"),".")),(0,l.kt)("h2",{id:"type"},"@type"),(0,l.kt)("p",null,"It provides information necessary to the processor to identify a type."),(0,l.kt)("p",null,"This annotation contains:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"name"),' (String, "" by default): ',(0,l.kt)("em",{parentName:"li"},"a String representing the type name in GAML"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"id")," (int, 0 by default): ",(0,l.kt)("em",{parentName:"li"},"the unique identifier for this type. User-added types can be chosen between IType.AVAILABLE","_","TYPES and IType.SPECIES","_","TYPES (exclusive) (cf. ",(0,l.kt)("a",{parentName:"em",href:"https://github.com/gama-platform/gama/tree/GAMA_1.9.2/msi.gama.core/src/msi/gaml/types/IType.java"},"IType.java"),")"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"wraps")," (tab of Class, null by default): ",(0,l.kt)("em",{parentName:"li"},'the list of Java Classes this type is "wrapping" (i.e. representing). The first one is the one that will be used preferentially throughout GAMA. The other ones are to ensure compatibility, in operators, with compatible Java classes (for instance, List and GamaList)'),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"kind")," (int, ISymbolKind.Variable.REGULAR by default): ",(0,l.kt)("em",{parentName:"li"},"the kind of Variable used to store this type. See ",(0,l.kt)("a",{parentName:"em",href:"https://github.com/gama-platform/gama/blob/GAMA_1.9.2/ummisco.gama.annotations/src/msi/gama/precompiler/ISymbolKind.java"},"ISymbolKind.Variable")),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"internal")," (boolean, false by default): ",(0,l.kt)("em",{parentName:"li"},"whether this type is for internal use only"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"doc")," (set of ",(0,l.kt)("a",{parentName:"li",href:"#doc"},"@doc"),", empty by default): ",(0,l.kt)("em",{parentName:"li"},"the documentation associated to the facet"),".")),(0,l.kt)("h2",{id:"usage"},"@usage"),(0,l.kt)("p",null,"This replaces @special_cases and ",(0,l.kt)("inlineCode",{parentName:"p"},"@examples"),", and unifies the doc for operators, statements, and others.\nAn @usage can also be used for defining a template for a GAML structure, and in that case, requires the following to be defined:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},'A name (attribute "name"), optional, but better'),(0,l.kt)("li",{parentName:"ul"},'A description (attribute "value"), optional'),(0,l.kt)("li",{parentName:"ul"},'A menu name (attribute "menu"), optional'),(0,l.kt)("li",{parentName:"ul"},'A hierarchical path within this menu (attribute "path"), optional'),(0,l.kt)("li",{parentName:"ul"},'A pattern (attribute "pattern" or concatenation of the @example present in "examples" that define "isPattern" as true)')),(0,l.kt)("p",null,"This annotation contains:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value")," (String): ",(0,l.kt)("em",{parentName:"li"},'a String representing one usage of the keyword. Note that for usages aiming at defining templates, the description is displayed on a tooltip in the editor. The use of the path allows to remove unnecessary explanations. For instance, instead of writing: description="This template illustrates the use of a complex form of the "create" statement, which reads agents from a shape file and uses the tabular data of the file to initialize their attributes", choose: name="Create agents from shapefile" menu=STATEMENT; path={"Create", "Complex forms"} description="Read agents from a shape file and initialize their attributes". If no description is provided, GAMA will try to grab it from the context where the template is defined (in the documentation, for example)'),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"menu"),' (String, "" by default): ',(0,l.kt)("em",{parentName:"li"},'Define the top-level menu where this template should appear. Users are free to use other names than the provided constants if necessary (i.e. "My templates"). When no menu is defined, GAMA tries to guess it from the context where the template is defined'),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"path"),' (set of Strings, empty by default): The path indicates where to put this template in the menu. For instance, the following annotation: " menu = STATEMENT; path = {"Control", "If"} will put the template in a menu called "If", within "Control", within the top menu "Statement". When no path is defined, GAMA will try to guess it from the context where the template is defined (i.e. keyword of the statement, etc.)'),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"name"),' (String, "" by default): ',(0,l.kt)("em",{parentName:"li"},"The name of the template should be both concise (as it will appear in a menu) and precise (to remove ambiguities between templates)"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"examples")," (set of ",(0,l.kt)("a",{parentName:"li",href:"#example"},"@example"),", empty by default): ",(0,l.kt)("em",{parentName:"li"},"An array of String representing some examples or use-cases about how to use this element, related to the particular usage above"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"pattern"),' (String, "" by default): ',(0,l.kt)("em",{parentName:"li"},"Alternatively, the contents of the usage can be described using a @pattern (rather than an array of ",(0,l.kt)("a",{parentName:"em",href:"#example"},"@example"),"). The formatting of this string depends entirely on the user (e.g. including ",(0,l.kt)("inlineCode",{parentName:"em"},"\\n")," and ",(0,l.kt)("inlineCode",{parentName:"em"},"\\t")," for indentation, for instance)"),".")),(0,l.kt)("h2",{id:"validator"},"@validator"),(0,l.kt)("p",null,"It allows to declare a custom validator for Symbols (statements, var declarations, species, experiments, etc.). This validator, if declared on subclasses of Symbol, will be called after the standard validation is done. The validator must be a subclass of IDescriptionValidator."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value")," (Class): ",(0,l.kt)("em",{parentName:"li"},"the validator class"),".")),(0,l.kt)("h2",{id:"variable"},"@variable"),(0,l.kt)("p",null,"This annotation is used to describe a single variable or field."),(0,l.kt)("p",null,"This annotation contains:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"name")," (String): ",(0,l.kt)("em",{parentName:"li"},"the name of the variable as it can be used in GAML"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"type")," (int): ",(0,l.kt)("em",{parentName:"li"},"The textual representation of the type of the variable (see IType)"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"of")," (int, 0 by default): ",(0,l.kt)("em",{parentName:"li"},"The textual representation of the content type of the variable (see IType#defaultContentType())"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"index")," (int, 0 by default): ",(0,l.kt)("em",{parentName:"li"},"The textual representation of the index type of the variable (see IType#defaultKeyType())"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"constant")," (boolean, false by default): ",(0,l.kt)("em",{parentName:"li"},"returns whether or not this variable should be considered as non modifiable"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"init"),' (String, "" by default): ',(0,l.kt)("em",{parentName:"li"},"the initial value of this variable as a String that will be interpreted by GAML"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"depend","_","on")," (set of Strings, empty by default): ",(0,l.kt)("em",{parentName:"li"},"an array of String representing the names of the variables on which this variable depends (so that they are computed before)"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"internal")," (boolean, false by default): ",(0,l.kt)("em",{parentName:"li"},"return whether this var is for internal use only"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"doc")," (set of ",(0,l.kt)("a",{parentName:"li",href:"#doc"},"@doc"),", empty by default): ",(0,l.kt)("em",{parentName:"li"},"the documentation associated to the variable"),".")),(0,l.kt)("h2",{id:"vars"},"@vars"),(0,l.kt)("p",null,"This annotation is used to describe a set of variables or fields."),(0,l.kt)("p",null,"This annotation contains:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value")," (set of @var): ",(0,l.kt)("em",{parentName:"li"},"an Array of var instances, each representing a variable"),".")))}c.isMDXComponent=!0}}]);