"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[70333],{67783:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>t,metadata:()=>o,toc:()=>a});var i=n(74848),l=n(28453);const t={title:"Literals"},r=void 0,o={id:"Literals",title:"Literals",description:"(some literal expressions are also described in data types)",source:"@site/versioned_docs/version-1.9.3/Literals.md",sourceDirName:".",slug:"/Literals",permalink:"/wiki/Literals",draft:!1,unlisted:!1,editUrl:"https://github.com/gama-platform/gama/wiki/Literals/_edit",tags:[],version:"1.9.3",frontMatter:{title:"Literals"},sidebar:"main",previous:{title:"Expressions",permalink:"/wiki/Expressions"},next:{title:"Units and constants",permalink:"/wiki/UnitsAndConstants"}},c={},a=[{value:"Table of contents",id:"table-of-contents",level:2},{value:"Simple Types",id:"simple-types",level:2},{value:"Literal Constructors",id:"literal-constructors",level:2},{value:"Universal Literal",id:"universal-literal",level:2}];function d(e){const s={a:"a",code:"code",em:"em",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.p,{children:(0,i.jsxs)(s.em,{children:["(some literal expressions are also described in ",(0,i.jsx)(s.a,{href:"DataTypes",children:"data types"}),")"]})}),"\n",(0,i.jsx)(s.p,{children:"A literal is a way to specify an unnamed constant value corresponding to a given data type. GAML supports various types of literals for often \u2014 or less often \u2014 used data types."}),"\n",(0,i.jsx)(s.h2,{id:"table-of-contents",children:"Table of contents"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"#literals",children:"Literals"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"#simple-types",children:"Simple Types"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"#literal-constructors",children:"Literal Constructors"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"#universal-literal",children:"Universal Literal"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"simple-types",children:"Simple Types"}),"\n",(0,i.jsx)(s.p,{children:"Values of simple (i.e. not composed) types can all be expressed using literal expressions. Namely:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"bool"}),": ",(0,i.jsx)(s.code,{children:"true"})," and ",(0,i.jsx)(s.code,{children:"false"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"int"}),": decimal value, such as ",(0,i.jsx)(s.code,{children:"100"}),", or hexadecimal value if preceded by ",(0,i.jsx)(s.code,{children:"'#'"})," (e.g. ",(0,i.jsx)(s.code,{children:"#AAAAAA"}),", which returns the int ",(0,i.jsx)(s.code,{children:"11184810"}),")"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"float"}),": the value in plain digits, using ",(0,i.jsx)(s.code,{children:"'.'"})," for the decimal point (e.g. ",(0,i.jsx)(s.code,{children:"123.297"}),")"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"string"}),": a sequence of characters enclosed between quotes (",(0,i.jsx)(s.code,{children:"'my string'"}),") or double quotes (",(0,i.jsx)(s.code,{children:'"my string"'}),")"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"literal-constructors",children:"Literal Constructors"}),"\n",(0,i.jsxs)(s.p,{children:["Although they are not strictly literals in the sense given above, some special constructs (called ",(0,i.jsx)(s.em,{children:"literal constructors"}),") allow the modeler to declare constants of other data types. They are actually ",(0,i.jsx)(s.a,{href:"Operators",children:"operators"})," but can be thought of literals when used with constant operands."]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"pair"}),": the key and the value separated by ",(0,i.jsx)(s.code,{children:"::"})," (e.g. ",(0,i.jsx)(s.code,{children:"12::'abc'"}),")"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"list"}),": the elements, separated by commas, enclosed inside square brackets (e.g. ",(0,i.jsx)(s.code,{children:"[12,15,15]"}),")"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"map"}),": a list of pairs (e.g. ",(0,i.jsx)(s.code,{children:"[12::'abc', 13::'def']"}),")"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"point"}),": 2 or 3 int or float ordinates enclosed inside curly brackets (e.g. ",(0,i.jsx)(s.code,{children:"{10.0,10.0,10.0}"}),")"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"universal-literal",children:"Universal Literal"}),"\n",(0,i.jsxs)(s.p,{children:["Finally, a special literal, of type ",(0,i.jsx)(s.code,{children:"unknown"}),", is shared between the data types and all the agent types (aka species). Only ",(0,i.jsx)(s.code,{children:"bool"}),", ",(0,i.jsx)(s.code,{children:"int"})," and ",(0,i.jsx)(s.code,{children:"float"}),", which do not derive from ",(0,i.jsx)(s.code,{children:"unknown"}),", do not accept this literal. All the others will accept it (e.g. ",(0,i.jsx)(s.code,{children:"string s <- nil;"})," is ok)."]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"unknown"}),": ",(0,i.jsx)(s.code,{children:"nil"}),", which represents the non-initialized (or, literally, ",(0,i.jsx)(s.em,{children:"unknown"}),") value."]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,l.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>o});var i=n(96540);const l={},t=i.createContext(l);function r(e){const s=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),i.createElement(t.Provider,{value:s},e.children)}}}]);