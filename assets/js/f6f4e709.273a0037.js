"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[29251],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=i.createContext({}),d=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},s=function(e){var t=d(e.components);return i.createElement(p.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=d(n),m=a,f=c["".concat(p,".").concat(m)]||c[m]||u[m]||o;return n?i.createElement(f,r(r({ref:t},s),{},{components:n})):i.createElement(f,r({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:a,r[1]=l;for(var d=2;d<o;d++)r[d]=n[d];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},72928:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>f,frontMatter:()=>l,metadata:()=>d,toc:()=>c});var i=n(87462),a=n(63366),o=(n(67294),n(3905)),r=["components"],l={title:"2. Charts"},p=void 0,d={unversionedId:"IncrementalModel_step2",id:"version-1.8.1/IncrementalModel_step2",title:"2. Charts",description:"This step Illustrates how to define monitors and charts in GAMA. In addition, it illustrates how to define a stopping condition for the simulation.",source:"@site/versioned_docs/version-1.8.1/IncrementalModel_step2.md",sourceDirName:".",slug:"/IncrementalModel_step2",permalink:"/wiki/1.8.1/IncrementalModel_step2",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/IncrementalModel_step2/_edit",tags:[],version:"1.8.1",frontMatter:{title:"2. Charts"},sidebar:"tuto",previous:{title:"1. Simple SI Model",permalink:"/wiki/1.8.1/IncrementalModel_step1"},next:{title:"3. Integration of GIS Data",permalink:"/wiki/1.8.1/IncrementalModel_step3"}},s={},c=[{value:"Formulation",id:"formulation",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"global variables",id:"global-variables",level:3},{value:"stopping condition",id:"stopping-condition",level:3},{value:"monitor",id:"monitor",level:3},{value:"chart",id:"chart",level:3},{value:"Complete Model",id:"complete-model",level:2}],u={toc:c},m="wrapper";function f(e){var t=e.components,l=(0,a.Z)(e,r);return(0,o.kt)(m,(0,i.Z)({},u,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This step Illustrates how to define monitors and charts in GAMA. In addition, it illustrates how to define a stopping condition for the simulation."),(0,o.kt)("h2",{id:"formulation"},"Formulation"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Definition of new global variables: current","_","hour, nb","_","people","_","infected, nb","_","people","_","not","_","infected, infected","_","rate."),(0,o.kt)("li",{parentName:"ul"},"Definition of a monitor to follow the current hour and the nb of people infected."),(0,o.kt)("li",{parentName:"ul"},"Definition of a series chart to follow the number of people infected and not infected."),(0,o.kt)("li",{parentName:"ul"},"Definition of a stopping condition (when infected rate = 1).")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Incremental model 2: plot of the disease spread.",src:n(12373).Z,width:"3584",height:"2118"})),(0,o.kt)("h2",{id:"model-definition"},"Model Definition"),(0,o.kt)("h3",{id:"global-variables"},"global variables"),(0,o.kt)("p",null,"In order to define dynamic variable able to update itself, we use the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"update"))," facet of variable definition.\nIndeed, at each simulation step, all the agents (and the world agent) apply for each dynamic variable (in their definition order) its update expression."),(0,o.kt)("p",null,"We add 3 new global variables:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"nb_people_infected"))," (int): nb of people with ",(0,o.kt)("inlineCode",{parentName:"li"},"is_infected")," is ",(0,o.kt)("inlineCode",{parentName:"li"},"true")," (use of the ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"list count condition"))," operator that count the number of elements of the list for which the condition is true)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"nb_people_not_infected"))," (int): ",(0,o.kt)("inlineCode",{parentName:"li"},"nb_people - nb_people_infected")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"infected_rate"))," (float): ",(0,o.kt)("inlineCode",{parentName:"li"},"nb_people_infected / nb_people")," ")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"global{\n    ...\n    int nb_people_infected <- nb_infected_init update: people count (each.is_infected);\n    int nb_people_not_infected <- nb_people - nb_infected_init update: nb_people - nb_people_infected;\n    float infected_rate update: nb_people_infected/nb_people;\n    ...\n}\n")),(0,o.kt)("h3",{id:"stopping-condition"},"stopping condition"),(0,o.kt)("p",null,"We add a new reflex that stops the simulation when all the people agents are infected (i.e. if the ",(0,o.kt)("inlineCode",{parentName:"p"},"infected_rate")," is equal to 1). To stop the simulation, we use the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"pause"))," global action."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"global {\n    ...\n    reflex end_simulation when: infected_rate = 1.0 {\n    do pause;\n    }\n}\n")),(0,o.kt)("h3",{id:"monitor"},"monitor"),(0,o.kt)("p",null,"A monitor allows the modeler to follow the value of an arbitrary expression in GAML. It has to be defined in an output section. A ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"monitor"))," is defined as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    monitor monitor_name value: an_expression refresh:every(nb_steps);\n")),(0,o.kt)("p",null,"With:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"value"),": mandatory, its value that will be displayed in the monitor."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"refresh"),": bool, optional: if the expression is true, compute (default is true).")),(0,o.kt)("p",null,"In this model, we define 2 monitors to follow: (i) the value of the variable ",(0,o.kt)("inlineCode",{parentName:"p"},"infected_rate"),", and (ii) to follow the time in the simulation (we will display the hour day). "),(0,o.kt)("p",null,"As ",(0,o.kt)("a",{parentName:"p",href:"ManipulateDates"},"detailed in the dedicated page"),", GAML language provides a datatype to manage ",(0,o.kt)("inlineCode",{parentName:"p"},"date")," (with second, minute, hour, day, month and year), and compute automatically the date in the simulation from the global variable ",(0,o.kt)("inlineCode",{parentName:"p"},"starting_date")," of the simulation and the ",(0,o.kt)("inlineCode",{parentName:"p"},"step")," value: this value is stored in the ",(0,o.kt)("inlineCode",{parentName:"p"},"current_date")," global variable. To monitor the current hour, we can access to the ",(0,o.kt)("inlineCode",{parentName:"p"},"hour")," attribute of this variable (",(0,o.kt)("inlineCode",{parentName:"p"},"current_date.hour"),")."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'experiment main_experiment type: gui {\n    ...\n    output {\n    monitor "Current hour" value: current_date.hour;\n    monitor "Infected people rate" value: infected_rate;\n    ...\n    }\n}\n')),(0,o.kt)("h3",{id:"chart"},"chart"),(0,o.kt)("p",null,"GAMA can display ",(0,o.kt)("a",{parentName:"p",href:"DefiningCharts"},"various chart types"),", for example:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Time series"),(0,o.kt)("li",{parentName:"ul"},"Pie charts"),(0,o.kt)("li",{parentName:"ul"},"Histograms")),(0,o.kt)("p",null,"A chart must be defined in a display: it behaves exactly like any other layer.\nDefinition of a chart:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"chart chart_name type: chart_type  {\n     [data]\n}\n")),(0,o.kt)("p",null,"The data to draw are defined inside the ",(0,o.kt)("inlineCode",{parentName:"p"},"chart")," block with the ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," statement:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"data data_legend value: data_value\n")),(0,o.kt)("p",null,'We add a new display called "chart" and refreshed every 10 simulation steps.\nInside this display, we define a chart of type ',(0,o.kt)("inlineCode",{parentName:"p"},"series"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'"Disease spreading"; background: white; of type series and style spline (no remove the markers)',(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"data1: susceptible; color : green"),(0,o.kt)("li",{parentName:"ul"},"data2: infected; color : red")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'experiment main_experiment type: gui{\n    ...\n    output {\n    ...\n    display chart refresh: every(10#cycles) {\n        chart "Disease spreading" type: series style: spline {\n        data "susceptible" value: nb_people_not_infected color: #green;\n        data "infected" value: nb_people_infected color: #red;\n        }\n    }\n    }\n}\n')),(0,o.kt)("h2",{id:"complete-model"},"Complete Model"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'model SI_city\n\nglobal {\n    int nb_people <- 500;\n    float agent_speed <- 5.0 #km / #h;\n    float step <- 1 #minutes;\n    geometry shape <- envelope(square(500 #m));\n    float infection_distance <- 2.0 #m;\n    float proba_infection <- 0.05;\n    int nb_infected_init <- 5;\n    int nb_people_infected <- nb_infected_init update: people count (each.is_infected);\n    int nb_people_not_infected <- nb_people - nb_infected_init update: nb_people - nb_people_infected;\n    float infected_rate update: nb_people_infected / nb_people;\n\n    init {\n    create people number: nb_people {\n        speed <- agent_speed;\n    }\n\n    ask nb_infected_init among people {\n        is_infected <- true;\n    }\n    }\n\n    reflex end_simulation when: infected_rate = 1.0 {\n    do pause;\n    }\n}\n\nspecies people skills: [moving] {\n    bool is_infected <- false;\n\n    reflex move {\n    do wander;\n    }\n\n    reflex infect when: is_infected {\n    ask people at_distance infection_distance {\n        if (flip(proba_infection)) {\n        is_infected <- true;\n        }\n    }\n    }\n\n    aspect default {\n    draw circle(5) color: is_infected ? #red : #green;\n    }\n}\n\nexperiment main_experiment type: gui {\n    parameter "Infection distance" var: infection_distance;\n    parameter "Proba infection" var: proba_infection min: 0.0 max: 1.0;\n    parameter "Nb people infected at init" var: nb_infected_init;\n    output {\n    monitor "Current hour" value: current_date.hour;\n    monitor "Infected people rate" value: infected_rate;\n    display map {\n        species people;\n    }\n\n    display chart refresh: every(10 #cycles) {\n        chart "Disease spreading" type: series style: spline {\n        data "susceptible" value: nb_people_not_infected color: #green marker: false;\n        data "infected" value: nb_people_infected color: #red marker: false;\n        }\n    }\n    }\n}\n')))}f.isMDXComponent=!0},12373:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/Incremental_model2-489c9a73d05d280b85e27db1951d5040.png"}}]);