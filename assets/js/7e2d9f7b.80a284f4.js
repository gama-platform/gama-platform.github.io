"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9979],{2075:(e,n,r)=>{r.d(n,{A:()=>t});const t=r.p+"assets/images/parent_species-7efaf39fd36a97201ea5734cd46aef2b.png"},22643:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"PredatorPrey_step5","title":"5. Predator Agent","description":"This fifth step illustrates how to use parent species. Indeed, prey and predators share a few common features thus we will define a generic species that will regroup all the common elements (variables, behaviors, and aspects) between the prey and the predator species.","source":"@site/versioned_docs/version-1.9.1/PredatorPrey_step5.md","sourceDirName":".","slug":"/PredatorPrey_step5","permalink":"/wiki/1.9.1/PredatorPrey_step5","draft":false,"unlisted":false,"editUrl":"https://github.com/gama-platform/gama/wiki/PredatorPrey_step5/_edit","tags":[],"version":"1.9.1","frontMatter":{"title":"5. Predator Agent"},"sidebar":"tuto","previous":{"title":"4. Inspectors and Monitors","permalink":"/wiki/1.9.1/PredatorPrey_step4"},"next":{"title":"6. Breeding","permalink":"/wiki/1.9.1/PredatorPrey_step6"}}');var i=r(74848),s=r(28453);const a={title:"5. Predator Agent"},l=void 0,o={},c=[{value:"Formulation",id:"formulation",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"parameters",id:"parameters",level:3},{value:"parent species",id:"parent-species",level:3},{value:"prey species",id:"prey-species",level:3},{value:"predator species",id:"predator-species",level:3},{value:"global init block",id:"global-init-block",level:3},{value:"monitor",id:"monitor",level:3},{value:"display",id:"display",level:3},{value:"Complete Model",id:"complete-model",level:2}];function d(e){const n={code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"This fifth step illustrates how to use parent species. Indeed, prey and predators share a few common features thus we will define a generic species that will regroup all the common elements (variables, behaviors, and aspects) between the prey and the predator species."}),"\n",(0,i.jsx)(n.h2,{id:"formulation",children:"Formulation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Definition of a new generic species: ",(0,i.jsx)(n.code,{children:"generic_species"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Definition of a new species: ",(0,i.jsx)(n.code,{children:"predator"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"predator"})," agents move randomly."]}),"\n",(0,i.jsxs)(n.li,{children:["At each simulation step, a ",(0,i.jsx)(n.code,{children:"predator"})," agent can eat a ",(0,i.jsx)(n.code,{children:"prey"})," that is localized at its grid cell."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"model-definition",children:"Model Definition"}),"\n",(0,i.jsx)(n.h3,{id:"parameters",children:"parameters"}),"\n",(0,i.jsx)(n.p,{children:"We add four new parameters related to predator agents:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The init number of predator agents."}),"\n",(0,i.jsx)(n.li,{children:"The max energy of the predator agents."}),"\n",(0,i.jsx)(n.li,{children:"The energy gained by a predator agent while eating a prey agent."}),"\n",(0,i.jsx)(n.li,{children:"The energy consumed by a predator agent at each time step."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["We define four new global variables in the ",(0,i.jsx)(n.code,{children:"global"})," section:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"global {\n    ...\n    int nb_predators_init <- 20;\n    float predator_max_energy <- 1.0;\n    float predator_energy_transfer <- 0.5;\n    float predator_energy_consum <- 0.02;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["We define then the four corresponding parameters in the ",(0,i.jsx)(n.code,{children:"experiment"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'parameter "Initial number of predators: " var: nb_predators_init min: 0 max: 200 category: "Predator" ;\nparameter "Predator max energy: " var: predator_max_energy category: "Predator" ;\nparameter "Predator energy transfer: " var: predator_energy_transfer  category: "Predator" ;\nparameter "Predator energy consumption: " var: predator_energy_consum  category: "Predator" ;\n'})}),"\n",(0,i.jsx)(n.h3,{id:"parent-species",children:"parent species"}),"\n",(0,i.jsx)(n.p,{children:"A species can have a parent species: it automatically gets all the variables, skill and actions/reflex of the parent species."}),"\n",(0,i.jsxs)(n.p,{children:["We define a species called ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"generic_species"})})," that is the parent of the species ",(0,i.jsx)(n.code,{children:"prey"})," and ",(0,i.jsx)(n.code,{children:"predator"}),":"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Relationship between generic_species, prey and predator species.",src:r(2075).A+"",width:"1198",height:"618"})}),"\n",(0,i.jsxs)(n.p,{children:["This species integrates all of the common feature between the ",(0,i.jsx)(n.code,{children:"prey"})," and ",(0,i.jsx)(n.code,{children:"predator"})," species:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["the variables:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"size"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"color"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"max_energy"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"max_transfer"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"energy_consum"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"my_cell"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"energy"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["the behaviors:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"basic_move"})," reflex"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"eat"})," reflex"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"die"})," reflex"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["the actions:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"energy_from_eat"})," action"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["the aspect:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"base"})," aspect"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["As the ",(0,i.jsx)(n.code,{children:"eat"})," behavior depends on the species (prey eats on ",(0,i.jsx)(n.code,{children:"vegetation_cell"}),", whereas ",(0,i.jsx)(n.code,{children:"predator"})," agents eat ",(0,i.jsx)(n.code,{children:"prey"})," agents), we introduce an action ",(0,i.jsx)(n.code,{children:"energy_from_eat"})," that will be redefined in each child species. Each species will implement its own eating behavior, returning the amount of energy it gets from this action."]}),"\n",(0,i.jsx)(n.p,{children:"We remind that an action is a capability available to the agents (what they can do). It is a block of statements that can be used and reused whenever needed."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"An action can accept arguments."}),"\n",(0,i.jsx)(n.li,{children:"An action can return a result (statement return)."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["There are two ways of calling an action: using a statement ",(0,i.jsx)(n.code,{children:"do"})," or as part of an expression:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"for actions that do not return a result:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"do action_name (arg1: v1 arg2: v2);\ndo action_name (v1, v2);\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["for actions that return a result (which is stored in ",(0,i.jsx)(n.code,{children:"my_var"}),"):"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"my_var <- action_name (arg1:v1, arg2:v2);\nmy_var <- action_name (v1, v2);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Thus the ",(0,i.jsx)(n.code,{children:"generic_species"})," will have the following code. Note that the action ",(0,i.jsx)(n.code,{children:"energy_from_eat"})," is also defined in this species, but with a default result (return 0.0)."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"species generic_species {\n    float size <- 1.0;\n    rgb color  ;\n    float max_energy;\n    float max_transfer;\n    float energy_consum;\n    vegetation_cell my_cell <- one_of (vegetation_cell) ;\n    float energy <- rnd(max_energy) update: energy - energy_consum max: max_energy ;\n\t\n    init {\n\tlocation <- my_cell.location;\n    }\n\t\t\n    reflex basic_move {\n\tmy_cell <- one_of (my_cell.neighbors2) ;\n\tlocation <- my_cell.location ;\n    }\n\t\t\n    reflex eat {\n\tenergy <- energy + energy_from_eat();\n    }\n\n    reflex die when: energy <= 0 {\n\tdo die;\n    }\n\n    float energy_from_eat {\n\treturn 0.0;\n    } \n\n\t\n    aspect base {\n\tdraw circle(size) color: color ;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"prey-species",children:"prey species"}),"\n",(0,i.jsxs)(n.p,{children:["We specialize the ",(0,i.jsx)(n.code,{children:"prey"})," species from the ",(0,i.jsx)(n.code,{children:"generic_species"})," species:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"definition of the initial value of the agent variables."}),"\n",(0,i.jsxs)(n.li,{children:["definition of the specific ",(0,i.jsx)(n.code,{children:"eat"})," action: if the current cell contains some food, the prey agent will take either all this food or the ",(0,i.jsx)(n.code,{children:"max_transfer"})," value (if the amount of food is greater than the maximum value the prey can take)."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"species prey parent: generic_species {\n    rgb color <- #blue; \n    float max_energy <- prey_max_energy ;\n    float max_transfer <- prey_max_transfer ;\n    float energy_consum <- prey_energy_consum ;\n\t\t\n    float energy_from_eat {\n\tfloat energy_transfer <- 0.0;\n\tif(my_cell.food > 0) {\n\t    energy_transfer <- min([max_transfer, my_cell.food]);\n\t    my_cell.food <- my_cell.food - energy_transfer;\n\t} \t\t\t\n\treturn energy_transfer;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"predator-species",children:"predator species"}),"\n",(0,i.jsxs)(n.p,{children:["As done for the ",(0,i.jsx)(n.code,{children:"prey"})," species, we specialize the ",(0,i.jsx)(n.code,{children:"predator"})," species from the ",(0,i.jsx)(n.code,{children:"generic_species"})," species:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"definition of the initial value of the agent variables."}),"\n",(0,i.jsxs)(n.li,{children:["definition of the specific ",(0,i.jsx)(n.code,{children:"eat"})," action: first, the agent computes the list of prey agents contained by ",(0,i.jsx)(n.code,{children:"my_cell"})," (",(0,i.jsx)(n.code,{children:"reachable_preys"})," variable); if it is not empty, it chooses one of the elements of this list, it kills it (i.e. asks it to die) and returns the ",(0,i.jsx)(n.code,{children:"energy_transfer"})," variable (that will be added to its own energy)."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"species predator parent: generic_species {\n    rgb color <- #red ;\n    float max_energy <- predator_max_energy ;\n    float energy_transfer <- predator_energy_transfer ;\n    float energy_consum <- predator_energy_consum ;\n\n    float energy_from_eat {\n\tlist<prey> reachable_preys <- prey inside (my_cell);\t\n\tif(! empty(reachable_preys)) {\n\t    ask one_of (reachable_preys) {\n\t\tdo die;\n\t    }\n\t    return energy_transfer;\n\t}\n\treturn 0.0;\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Note that we used the ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"ask"})})," statement. This statement allows to make a remote agent executes a list of statements.\nUse of the ask statement as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"ask one_agent { }\n"})}),"\n",(0,i.jsx)(n.p,{children:"or"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"ask agents_list { }\n"})}),"\n",(0,i.jsxs)(n.p,{children:["We used as well the ",(0,i.jsx)(n.code,{children:"species/agent list inside geometry/agent"})," operator. This operator returns all the agents of the specified species (or from the specified agent list) that are inside the given geometry or agent geometry."]}),"\n",(0,i.jsx)(n.h3,{id:"global-init-block",children:"global init block"}),"\n",(0,i.jsxs)(n.p,{children:["Like in the previous model, in the init block of the model, we create ",(0,i.jsx)(n.code,{children:"nb_predators_init"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"global {\n    ...\n    init {\n        create prey number: nb_preys_init ;\n        create predator number: nb_predators_init ;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"monitor",children:"monitor"}),"\n",(0,i.jsx)(n.p,{children:"Like in the previous model, we define a monitor to display the number of predator agents."}),"\n",(0,i.jsxs)(n.p,{children:["Definition of a global variable ",(0,i.jsx)(n.code,{children:"nb_predator"})," that returns the current number of ",(0,i.jsx)(n.code,{children:"predator"})," agents:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"global {\n    ...\n    int nb_predators -> {length (predator)};\n    ...\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Definition of the corresponding monitor:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'monitor "number of predators" value: nb_predators ;\n'})}),"\n",(0,i.jsx)(n.h3,{id:"display",children:"display"}),"\n",(0,i.jsx)(n.p,{children:"Also, do not forget to add the line to display predators in your simulation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"display main_display {\n    ...\n    species predator aspect: base ;\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"complete-model",children:"Complete Model"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-gaml",metastring:"reference",children:"https://github.com/gama-platform/gama.old/blob/GAMA_1.9.0/msi.gama.models/models/Tutorials/Predator%20Prey/models/Model%2005.gaml\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>l});var t=r(96540);const i={},s=t.createContext(i);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);