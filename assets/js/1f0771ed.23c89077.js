"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[46070],{28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>a});var s=n(96540);const r={},i=s.createContext(r);function l(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(i.Provider,{value:t},e.children)}},96900:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"PredatorPrey_step11","title":"11. Writing Files","description":"This 11th step illustrates how to save data in a text file.","source":"@site/versioned_docs/version-1.9.1/PredatorPrey_step11.md","sourceDirName":".","slug":"/PredatorPrey_step11","permalink":"/wiki/1.9.1/PredatorPrey_step11","draft":false,"unlisted":false,"editUrl":"https://github.com/gama-platform/gama/wiki/PredatorPrey_step11/_edit","tags":[],"version":"1.9.1","frontMatter":{"title":"11. Writing Files"},"sidebar":"tuto","previous":{"title":"10. Charts","permalink":"/wiki/1.9.1/PredatorPrey_step10"},"next":{"title":"12. Image loading","permalink":"/wiki/1.9.1/PredatorPrey_step12"}}');var r=n(74848),i=n(28453);const l={title:"11. Writing Files"},a=void 0,o={},d=[{value:"Formulation",id:"formulation",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"global section",id:"global-section",level:3},{value:"Complete Model",id:"complete-model",level:2}];function c(e){const t={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"This 11th step illustrates how to save data in a text file."}),"\n",(0,r.jsx)(t.h2,{id:"formulation",children:"Formulation"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["At each simulation step, write in a text file:","\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"The time step"}),"\n",(0,r.jsx)(t.li,{children:"The number of prey and predator agents"}),"\n",(0,r.jsx)(t.li,{children:"The min and max energy of the prey and predator agents"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"model-definition",children:"Model Definition"}),"\n",(0,r.jsx)(t.h3,{id:"global-section",children:"global section"}),"\n",(0,r.jsxs)(t.p,{children:["The main way to write data inside a file is to use the ",(0,r.jsx)(t.code,{children:"save"})," statement:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"save my_data type: file_type to: file_name;\n"})}),"\n",(0,r.jsx)(t.p,{children:"With:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"my_data"}),": depends on the data to save and of the type of file"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"file_type"})," : string"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"file_name"})," : string"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"There are 3 main possible types:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"shp"})," (shapefile - GIS data): in that case, ",(0,r.jsx)(t.code,{children:"my_data"})," is treated as a list of agents or geometries: all their geometries are saved in the file (with some variables as attributes),"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"txt"})," (text): in that case, ",(0,r.jsx)(t.code,{children:"my_data"})," is treated as a string, which is written directly in the file,"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"csv"}),": in that case, ",(0,r.jsx)(t.code,{children:"my_data"})," is treated as a list of values: [val1, val2, val3], that will be written in the file, separated by the ",(0,r.jsx)(t.code,{children:","})," separator."]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["We use this statement (in a global reflex called ",(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.code,{children:"save_result"})}),") to write:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["The cycle step: use of the ",(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.code,{children:"cycle"})})," keyword that returns the current simulation step."]}),"\n",(0,r.jsxs)(t.li,{children:["The number of prey and predator agents: use of ",(0,r.jsx)(t.code,{children:"nb_preys"})," and ",(0,r.jsx)(t.code,{children:"nb_predators"})," variables."]}),"\n",(0,r.jsxs)(t.li,{children:["The min and max energy of the prey and predator agents: use of ",(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.code,{children:"list min_of expression"})})," and ",(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.code,{children:"list max_of expression"})})," keywords."]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'reflex save_result when: (nb_preys > 0) and (nb_predators > 0){\n    save ("cycle: "+ cycle + "; nbPreys: " + nb_preys\n\t  + "; minEnergyPreys: " + (prey min_of each.energy)\n\t  + "; maxSizePreys: " + (prey max_of each.energy) \n\t  + "; nbPredators: " + nb_predators           \n\t  + "; minEnergyPredators: " + (predator min_of each.energy)          \n\t  + "; maxSizePredators: " + (predator max_of each.energy)) \n\t  to: "results.txt" type: "text" rewrite: (cycle = 0) ? true : false;\n}\n'})}),"\n",(0,r.jsx)(t.h2,{id:"complete-model",children:"Complete Model"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-gaml",metastring:"reference",children:"https://github.com/gama-platform/gama.old/blob/GAMA_1.9.0/msi.gama.models/models/Tutorials/Predator%20Prey/models/Model%2011.gaml\n"})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);