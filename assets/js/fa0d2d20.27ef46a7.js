"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7776],{17183:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>r,contentTitle:()=>l,default:()=>c,frontMatter:()=>s,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"RoadTrafficModel_step1","title":"1. Loading of GIS Data","description":"This first step Illustrates how to load GIS data (shapefiles) and to read attributes from GIS data.","source":"@site/versioned_docs/version-1.9.2/RoadTrafficModel_step1.md","sourceDirName":".","slug":"/RoadTrafficModel_step1","permalink":"/wiki/1.9.2/RoadTrafficModel_step1","draft":false,"unlisted":false,"editUrl":"https://github.com/gama-platform/gama/wiki/RoadTrafficModel_step1/_edit","tags":[],"version":"1.9.2","frontMatter":{"title":"1. Loading of GIS Data"},"sidebar":"tuto","previous":{"title":"Road Traffic","permalink":"/wiki/1.9.2/RoadTrafficModel"},"next":{"title":"2. People Agents","permalink":"/wiki/1.9.2/RoadTrafficModel_step2"}}');var o=i(74848),a=i(28453);const s={title:"1. Loading of GIS Data"},l=void 0,r={},d=[{value:"Formulation",id:"formulation",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"species",id:"species",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Agentification of GIS data",id:"agentification-of-gis-data",level:3},{value:"Time step",id:"time-step",level:3},{value:"Environment",id:"environment",level:3},{value:"Complete Model",id:"complete-model",level:2}];function h(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"This first step Illustrates how to load GIS data (shapefiles) and to read attributes from GIS data."}),"\n",(0,o.jsx)(t.h2,{id:"formulation",children:"Formulation"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Set the time duration of a time step to 10 minutes."}),"\n",(0,o.jsx)(t.li,{children:"Load, agentify and display two layers of GIS data (building and road). Agentifying a GIS element will allow us to give it a behavior later on (thus not being simply a static/passive object)."}),"\n",(0,o.jsx)(t.li,{children:"Read the 'NATURE' attribute of the building data: the buildings of 'Residential' type will be colored in gray, the buildings of 'Industrial' type will be color in blue."}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"model-definition",children:"Model Definition"}),"\n",(0,o.jsx)(t.h3,{id:"species",children:"species"}),"\n",(0,o.jsxs)(t.p,{children:["In this first model, we have to define two species of agents: the ",(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.code,{children:"building"})})," agents and the ",(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.code,{children:"road"})})," ones. These agents will not have a particular behavior (for the moment), they will just be displayed.\nFor each of these species, we define a new attribute: ",(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.code,{children:"color"})})," of type ",(0,o.jsx)(t.code,{children:"rgb"}),', with for initial value: "black" for the ',(0,o.jsx)(t.code,{children:"road"}),' agent and "gray" (by default) for the ',(0,o.jsx)(t.code,{children:"building"})," agent. Concerning the ",(0,o.jsx)(t.code,{children:"building"})," species, we define a second attribute named ",(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.code,{children:"type"})}),' representing the type of the building ("Residential" or "Industrial").']}),"\n",(0,o.jsxs)(t.p,{children:["At last, we define an aspect for these species. In this model, we want to represent the geometry of the agent, we then use the statement ",(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.code,{children:"draw"})})," that allows to draw a given geometry. In order to draw the geometry of the agent, we use the attribute ",(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.code,{children:"shape"})})," (which is a built-in attribute of all agents)."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"species building {\n    string type; \n    rgb color <- #gray  ;\n\t\n    aspect base {\n\tdraw shape color: color ;\n    }\n}\n\nspecies road  {\n    rgb color <- #black ;\n\t\n    aspect base {\n\tdraw shape color: color ;\n    }\n}\n"})}),"\n",(0,o.jsx)(t.h3,{id:"parameters",children:"Parameters"}),"\n",(0,o.jsx)(t.p,{children:'GAMA allows to automatically read GIS data that are formatted as shapefiles. In order to let the user chooses his/her shapefiles, we define three parameters. One allowing the user to choose the road shapefile, one allowing him/her to choose the building shapefile, and, at last, one allowing him/her to choose the bounds shapefile. We will come back later on the notion of "bounds" in GAMA.'}),"\n",(0,o.jsxs)(t.p,{children:["Definition of the three global variables of type ",(0,o.jsx)(t.code,{children:"file"})," concerning the GIS files:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'global {\n    file shape_file_buildings <- file("../includes/building.shp");\n    file shape_file_roads <- file("../includes/road.shp");\n    file shape_file_bounds <- file("../includes/bounds.shp");\n}\n'})}),"\n",(0,o.jsxs)(t.p,{children:["All shapefiles are available in the model library (under Library models -> Tutorials -> Road Traffic) or you can download them by following this ",(0,o.jsx)(t.a,{href:"https://github.com/gama-platform/gama.old/tree/GAMA_1.9.2/msi.gama.models/models/Tutorials/Road%20Traffic/includes",children:"GitHub link"}),"."]}),"\n",(0,o.jsx)(t.p,{children:"In the experiment section, we add three parameters to allow the user to change the shapefile used directly through the UI:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'experiment road_traffic type: gui {\n    parameter "Shapefile for the buildings:" var: shape_file_buildings category: "GIS" ;\n    parameter "Shapefile for the roads:" var: shape_file_roads category: "GIS" ;\n    parameter "Shapefile for the bounds:" var: shape_file_bounds category: "GIS" ;\n}\n'})}),"\n",(0,o.jsx)(t.h3,{id:"agentification-of-gis-data",children:"Agentification of GIS data"}),"\n",(0,o.jsxs)(t.p,{children:["In GAMA, the agentification of GIS data is very straightforward: it only requires to use the ",(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.code,{children:"create"})})," command with the ",(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.code,{children:"from"})})," facet to pass the shapefile. Each object of the shapefile will be directly used to instantiate an agent of the specified species. The reading of an attribute in a shapefile is also very simple. It only requires to use the ",(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.code,{children:"with"})})," facet: the argument of this facet is a dictionary of which the keys are the names of the agent attributes and the value the ",(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.code,{children:"read"})}),' operator followed by the name of the shapefile attribute ("NATURE" in our case).']}),"\n",(0,o.jsxs)(t.p,{children:["In the ",(0,o.jsx)(t.code,{children:"init"})," block of the ",(0,o.jsx)(t.code,{children:"global"})," block, we create the road and building agents from the shapefiles. Concerning the ",(0,o.jsx)(t.code,{children:"building"}),' agents, we read the "NATURE" attribute of the shapefile to initiate the value of the ',(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.code,{children:"type"})})," attribute. If the ",(0,o.jsx)(t.code,{children:"type"}),' attribute is equal to "Industrial" set the ',(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.code,{children:"color"})}),' attribute to "blue".']}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'global {\n    ...\n    init {\n        create building from: shape_file_buildings with: [type::read ("NATURE")] {\n            if type="Industrial" {\n                color <- #blue ;\n            }\n        }\n        create road from: shape_file_roads ;\n    }\n} \n'})}),"\n",(0,o.jsx)(t.h3,{id:"time-step",children:"Time step"}),"\n",(0,o.jsxs)(t.p,{children:["In GAMA, by default, a time step represents 1 second. It is possible to redefine this value by overriding the ",(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.code,{children:"step"})})," global variable. This value of the time step is used by the moving primitives of GAMA."]}),"\n",(0,o.jsxs)(t.p,{children:["In our model, we define that a step represents 10 minutes. Note that it is possible to define the unit of a value by using ",(0,o.jsx)(t.code,{children:"#"})," + unit name, e.g. ",(0,o.jsx)(t.code,{children:"#mn"})," for minutes or ",(0,o.jsx)(t.code,{children:"#km"})," for kilometers."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"global {\n    ...\n    float step <- 10 #mn;\n    ...\n}\n"})}),"\n",(0,o.jsx)(t.h3,{id:"environment",children:"Environment"}),"\n",(0,o.jsxs)(t.p,{children:["Building a GIS environment in GAMA requires nothing special, just to define the bounds of the environment, i.e. the geometry of the ",(0,o.jsx)(t.code,{children:"world"})," agent. It is possible to use a shapefile to automatically define it by computing its envelope. In this model, we use a specific shapefile to define it. However, it would be possible to use the road shapefile to define it and let GAMA computes its envelope automatically."]}),"\n",(0,o.jsx)(t.h2,{id:"complete-model",children:"Complete Model"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-gaml",metastring:"reference",children:"https://github.com/gama-platform/gama.old/blob/GAMA_1.9.2/msi.gama.models/models/Tutorials/Road%20Traffic/models/Model%2001.gaml\n"})})]})}function c(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},28453:(e,t,i)=>{i.d(t,{R:()=>s,x:()=>l});var n=i(96540);const o={},a=n.createContext(o);function s(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);