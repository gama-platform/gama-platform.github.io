"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[94429],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>p});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},m="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(t),d=a,p=m["".concat(l,".").concat(d)]||m[d]||f[d]||o;return t?r.createElement(p,i(i({ref:n},u),{},{components:t})):r.createElement(p,i({ref:n},u))}));function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[m]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},77185:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>m});var r=t(87462),a=t(63366),o=(t(67294),t(3905)),i=["components"],s={"^title":"comparison ABM EBM SIR"},l=void 0,c={unversionedId:"comparison_ABM_EBM_SIR",id:"comparison_ABM_EBM_SIR",title:"comparison_ABM_EBM_SIR",description:"Path: Library models/Toy Models/Epidemiology/models/SIR (ABM vs EBM).gaml",source:"@site/../docs/comparison_ABM_EBM_SIR.md",sourceDirName:".",slug:"/comparison_ABM_EBM_SIR",permalink:"/wiki/next/comparison_ABM_EBM_SIR",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/comparison_ABM_EBM_SIR/_edit",tags:[],version:"current",frontMatter:{"^title":"comparison ABM EBM SIR"}},u={},m=[],f={toc:m},d="wrapper";function p(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)(d,(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("img",{width:"960",alt:"Annotation 2023-04-14 174555_toy_epid_models_sir_abmvebm",src:"https://user-images.githubusercontent.com/4437331/232093651-c88e5b83-0984-4d73-8b80-2ebed872aaa0.png"}),(0,o.kt)("p",null,"Path: Library models/Toy Models/Epidemiology/models/SIR (ABM vs EBM).gaml"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"\n/**\n* Name: comparison_ABM_EBM_SIR\n* Author: Benoit Gaudou \n* Description: Comparison between an agent-based and an equation-based model of the SIR model. \n*   The ABM use a grid to place the agents, and each cell will be the location of an agent, while the EBM \n*   is only using a ODE System and no geographical representation.\n* Tags: equation, math, grid\n*/\nmodel comparison_ABM_EBM_SIR\n\nglobal {\n    //Number of susceptible individuals\n    int number_S <- 499; \n    //Number of infectious individuals\n    int number_I <- 1; \n    //Number of Resistant individuals\n    int number_R <- 0; \n    //Beta parameter used for the infection of susceptible individuals\n    float beta <- 0.1; \n    //Gamma parameter used for the resistance gained by the infectious individuals\n    float gamma <- 0.01;\n    //Size of the neighbours\n    int neighbours_size <- 2;\n    //Total number of individuals\n    int N <- number_S + number_I + number_R;\n    //Number of hosts (for ABM)\n    int nb_hosts <- number_S + number_I + number_R update: length(Host);\n    //Number of infected hosts (for ABM)\n    int nb_infected <- number_I update:  Host count (each.is_infected);\n    float hKR4 <- 0.7;\n    geometry shape <- square(50);\n    init {\n        //Create the number of hosts susceptibles\n        create Host number: number_S {\n            is_susceptible <- true;\n            is_infected <- false;\n            is_immune <- false;\n            color <- rgb(46,204,113);\n        }\n        //Create the number of hosts infectious\n        create Host number: number_I {\n            is_susceptible <- false;\n            is_infected <- true;\n            is_immune <- false;\n            color <- rgb(231,76,60);\n        }\n        //Create the node agent for the SIR ODE System\n        create node_agent number: 1 {\n            S <- float(number_S);\n            I <- float(number_I);\n            R <- float(number_R);\n        }\n    }\n\n}\n//Grid that will be used to discretize space\ngrid sir_grid width: 50 height: 50 {\n        rgb color <- #white;\n        list<sir_grid> neighbours <- (self neighbors_at neighbours_size) of_species sir_grid;\n    }\n    \n//Species host which represents the host of the disease\nspecies Host {\n    \n    //Different booleans to know in which state is the host\n    bool is_susceptible <- true;\n    bool is_infected <- false;\n    bool is_immune <- false;\n    \n    //Color of the host\n    rgb color <- rgb(46,204,113);\n    \n    //Location of the agent among the grid\n    sir_grid myPlace;\n    //Count of neighbors infected \n    int ngb_infected_number function: self neighbors_at(neighbours_size) count(each.is_infected);\n    \n    init {\n        //The location is chosen randomly\n        myPlace <- one_of(sir_grid);\n        location <- myPlace.location;\n    }\n    //Reflex to move the agent in the neighbours cells\n    reflex basic_move {\n        myPlace <- one_of(myPlace.neighbours);\n        location <- myPlace.location;\n    }\n    //Reflex to pass the agent to the state infected \n    reflex become_infected when: is_susceptible {\n            //Probability of being infected according to the number of infected among the neighbours\n            if (flip(1 - (1 - beta)  ^ ngb_infected_number)) {\n                is_susceptible <-  false;\n                    is_infected <-  true;\n                    is_immune <-  false;\n                    color <-  rgb(231,76,60);                   \n            }                   \n    }\n    //Reflex to pass the agent to the state immune\n    reflex become_immune when: (is_infected and flip(gamma)) {\n        is_susceptible <- false;\n        is_infected <- false;\n        is_immune <- true;\n        color <- rgb(52,152,219);\n    } \n    \n    aspect basic {\n        draw circle(1) color: color;\n    }\n\n}\n//Species node agent that will represent the SIR Ordinary differential equations system\nspecies node_agent {\n    float t;\n    float I;\n    float S;\n    float R;\n    equation eqSIR {\n        diff(S,t) = -beta * S * I / N ;\n        diff(I,t) = beta * S * I / N - gamma* I;\n        diff(R,t) = gamma* I;\n    }\n    reflex solving {solve eqSIR method:#rk4 step_size: 1;}\n    \n}\n\nexperiment Simulation_ABM_EBM type: gui {\n    parameter 'Number of Susceptible' type: int var: number_S <- 495 category: \"Initial population\";\n    parameter 'Number of Infected' type: int var: number_I <- 5 category: \"Initial population\";\n    parameter 'Number of Removed' type: int var: number_R <- 0 category: \"Initial population\";\n    parameter 'Beta (S->I)' type: float var: beta <- 0.1 category: \"Parameters\";\n    parameter 'Gamma (I->R)' type: float var: gamma <- 0.01 category: \"Parameters\";\n    parameter 'Size of the neighbours' type: int var: neighbours_size <- 1 min: 1 max: 5 category: \"Infection\";\n    output {\n        layout #split;\n        display sir_display axes: false { \n            grid sir_grid border: #lightgray;\n            species Host aspect: basic; \n        }\n        display ABM  type: 2d  { \n            chart 'Population' type: series background: #white style: exploded {\n                data 'susceptible' value: (Host as list) count (each.is_susceptible) color: rgb(46,204,113) marker_size: 0.5;\n                data 'infected' value: (Host as list) count (each.is_infected) color: rgb(231,76,60) marker_size: 0.5;\n                data 'immune' value: (Host as list) count (each.is_immune) color: rgb(52,152,219) marker_size: 0.5;\n            }\n        }\n        display EBM  type: 2d  { \n            chart \"Population\" type: series background: #white {\n                data 'S' value: first(node_agent).S color: rgb(46,204,113) marker: false;\n                data 'I' value: first(node_agent).I color: rgb(231,76,60) marker: false;\n                data 'R' value: first(node_agent).R color: rgb(52,152,219) marker: false;\n            }\n        }\n        display ABM_EBM   type: 2d  { \n            chart 'Population' type: series background: #white style: exploded {\n                data 'susceptible' value: (Host as list) count (each.is_susceptible) color: rgb(39,174,96) marker_size: 0.5;\n                data 'infected' value: (Host as list) count (each.is_infected) color: rgb(192,57,43) marker_size: 0.5;\n                data 'immune' value: (Host as list) count (each.is_immune) color: rgb(41,128,185) marker_size: 0.5;\n                data 'S' value: first(node_agent).S color: rgb(46,204,113) marker: false;\n                data 'I' value: first(node_agent).I color: rgb(231,76,60) marker: false;\n                data 'R' value: first(node_agent).R color: rgb(52,152,219) marker: false;\n            }\n        }\n    }\n\n}\n\n")))}p.isMDXComponent=!0}}]);