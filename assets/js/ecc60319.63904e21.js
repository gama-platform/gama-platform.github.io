"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[16368],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},f="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),f=p(n),g=i,m=f["".concat(l,".").concat(g)]||f[g]||d[g]||o;return n?r.createElement(m,a(a({ref:t},c),{},{components:n})):r.createElement(m,a({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[f]="string"==typeof e?e:i,a[1]=s;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},41288:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>p,toc:()=>f});var r=n(87462),i=n(63366),o=(n(67294),n(3905)),a=["components"],s={"^title":"OSM file to Agents"},l=void 0,p={unversionedId:"OSM_file_to_Agents",id:"OSM_file_to_Agents",title:"OSM_file_to_Agents",description:"Path: Library models/Data/Data Importation/models/OSM File Import.gaml",source:"@site/../docs/OSM_file_to_Agents.md",sourceDirName:".",slug:"/OSM_file_to_Agents",permalink:"/wiki/next/OSM_file_to_Agents",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/OSM_file_to_Agents/_edit",tags:[],version:"current",frontMatter:{"^title":"OSM file to Agents"}},c={},f=[],d={toc:f},g="wrapper";function m(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)(g,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("img",{width:"959",alt:"Annotation 2023-04-17 051410_osmfileimport_osmfileimport",src:"https://user-images.githubusercontent.com/4437331/232370440-1fb49e4f-b7c1-4cb4-bbce-c800a3d9deac.png"}),(0,o.kt)("p",null,"Path: Library models/Data/Data Importation/models/OSM File Import.gaml"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'\n/**\n* Name: OSM file to Agents\n* Author:  Patrick Taillandier\n* Description: Model which shows how to import a OSM File in GAMA and use it to create Agents. In this model, a filter is done to take only into account the roads \n* and the buildings contained in the file. \n* Tags:  load_file, osm, gis\n*/\nmodel simpleOSMLoading\n\nglobal\n{\n\n//map used to filter the object to build from the OSM file according to attributes. for an exhaustive list, see: http://wiki.openstreetmap.org/wiki/Map_Features\n    map filtering <- map(["highway"::["primary", "secondary", "tertiary", "motorway", "living_street", "residential", "unclassified"], "building"::["yes"]]);\n    //OSM file to load\n    file<geometry> osmfile;\n\n    //compute the size of the environment from the envelope of the OSM file\n    geometry shape <- envelope(osmfile);\n    init\n    {\n    //possibility to load all of the attibutes of the OSM data: for an exhaustive list, see: http://wiki.openstreetmap.org/wiki/Map_Features\n        create osm_agent from: osmfile with: [highway_str::string(read("highway")), building_str::string(read("building"))];\n\n        //from the created generic agents, creation of the selected agents\n        ask osm_agent\n        {\n            if (length(shape.points) = 1 and highway_str != nil)\n            {\n                create node_agent with: [shape::shape, type:: highway_str];\n            } else\n            {\n                if (highway_str != nil)\n                {\n                    create road with: [shape::shape, type:: highway_str];\n                } else if (building_str != nil)\n                {\n                    create building with: [shape::shape];\n                }\n\n            }\n            //do the generic agent die\n            do die;\n        }\n\n    }\n\n}\n\nspecies osm_agent\n{\n    string highway_str;\n    string building_str;\n}\n\nspecies road\n{\n    rgb color <- rnd_color(255);\n    string type;\n    aspect default\n    {\n        draw shape color: color;\n    }\n\n}\n\nspecies node_agent\n{\n    string type;\n    aspect default\n    {\n        draw square(3) color: # red;\n    }\n\n}\n\nspecies building\n{\n    aspect default\n    {\n        draw shape color: #grey;\n    }\n\n}\n\nexperiment "Load OSM" type: gui\n{\n    parameter "File:" var: osmfile <- file<geometry> (osm_file("../includes/rouen.gz", filtering));\n    output\n    {\n        display map type: 3d\n        {\n            species building refresh: false;\n            species road refresh: false;\n            species node_agent refresh: false;\n        }\n\n    }\n\n}\n\nexperiment "Load OSM from Internet" type: gui parent: "Load OSM"\n{\n    parameter "File:" var: osmfile <- file<geometry> (osm_file("http://download.geofabrik.de/europe/andorra-latest.osm.pbf", filtering));\n    \n}\n\n\n\n')))}m.isMDXComponent=!0}}]);