"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[74378],{49092:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var s=t(17624),i=t(4552);const a={title:"Manipulate basic species"},c=void 0,o={id:"ManipulateBasicSpecies",title:"Manipulate basic species",description:'In this chapter, we will learn how to manipulate some basic species. As you already know, a species can be seen as the definition of a type of agent (we call agent the instance of a species). In OOP (Object-Oriented Programming), a species can be seen as the class. Each species is then defined by some attributes ("member" in OOP), actions ("method" in OOP) and behavior ("method" in OOP).',source:"@site/versioned_docs/version-1.9.2/ManipulateBasicSpecies.md",sourceDirName:".",slug:"/ManipulateBasicSpecies",permalink:"/wiki/ManipulateBasicSpecies",draft:!1,unlisted:!1,editUrl:"https://github.com/gama-platform/gama/wiki/ManipulateBasicSpecies/_edit",tags:[],version:"1.9.2",frontMatter:{title:"Manipulate basic species"},sidebar:"main",previous:{title:"Basic programming concepts in GAML",permalink:"/wiki/BasicProgrammingConceptsInGAML"},next:{title:"The global species",permalink:"/wiki/GlobalSpecies"}},r={},l=[];function h(e){const n={a:"a",code:"code",p:"p",strong:"strong",...(0,i.M)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["In this chapter, we will learn how to manipulate some basic species. As you already know, a species can be seen as the definition of a type of ",(0,s.jsx)(n.strong,{children:"agent"})," (we call agent the instance of a species). In OOP (Object-Oriented Programming), a ",(0,s.jsx)(n.strong,{children:"species"})," can be seen as the class. Each species is then defined by some ",(0,s.jsx)(n.strong,{children:"attributes"}),' ("member" in OOP), ',(0,s.jsx)(n.strong,{children:"actions"}),' ("method" in OOP) and ',(0,s.jsx)(n.strong,{children:"behavior"}),' ("method" in OOP).']}),"\n",(0,s.jsxs)(n.p,{children:["In this section, we will first learn how to declare the ",(0,s.jsx)(n.strong,{children:"world agent"}),", using the ",(0,s.jsx)(n.a,{href:"GlobalSpecies",children:(0,s.jsx)(n.strong,{children:"global species"})}),". We will then learn how to declare ",(0,s.jsx)(n.a,{href:"RegularSpecies",children:(0,s.jsx)(n.strong,{children:"regular species"})})," which will populate our world. The following lesson will be dedicated to learn how to ",(0,s.jsx)(n.a,{href:"DefiningActionsAndBehaviors",children:(0,s.jsx)(n.strong,{children:"define actions and behaviors"})})," for all those species. We will then learn how ",(0,s.jsx)(n.a,{href:"InteractionBetweenAgents",children:(0,s.jsx)(n.strong,{children:"agents can interact between each other"})}),", especially with the statement ",(0,s.jsx)(n.code,{children:"ask"}),". In the next chapter then, we will see how to ",(0,s.jsx)(n.a,{href:"AttachingSkills",children:(0,s.jsx)(n.strong,{children:"attach skills"})})," to our species, giving them new attributes and actions. This section will be closed with a last lesson dealing with how ",(0,s.jsx)(n.a,{href:"Inheritance",children:(0,s.jsx)(n.strong,{children:"inheritance"})})," works in GAML."]})]})}function d(e={}){const{wrapper:n}={...(0,i.M)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},4552:(e,n,t)=>{t.d(n,{I:()=>o,M:()=>c});var s=t(11504);const i={},a=s.createContext(i);function c(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);