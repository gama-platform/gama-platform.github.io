"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[72072],{8196:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>a,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var i=t(17624),o=t(4552);const s={title:"8. Complex Behavior"},r=void 0,l={id:"PredatorPrey_step8",title:"8. Complex Behavior",description:"This eighth step illustrates how to define more complex actions, how to use conditional statements and iterator operators over containers.",source:"@site/versioned_docs/version-1.9.2/PredatorPrey_step8.md",sourceDirName:".",slug:"/PredatorPrey_step8",permalink:"/wiki/PredatorPrey_step8",draft:!1,unlisted:!1,editUrl:"https://github.com/gama-platform/gama/wiki/PredatorPrey_step8/_edit",tags:[],version:"1.9.2",frontMatter:{title:"8. Complex Behavior"},sidebar:"tuto",previous:{title:"7. Agent Aspect",permalink:"/wiki/PredatorPrey_step7"},next:{title:"9. Stopping condition",permalink:"/wiki/PredatorPrey_step9"}},c={},d=[{value:"Formulation",id:"formulation",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"parent species",id:"parent-species",level:3},{value:"prey species",id:"prey-species",level:3},{value:"predator species",id:"predator-species",level:3},{value:"Complete Model",id:"complete-model",level:2}];function h(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"This eighth step illustrates how to define more complex actions, how to use conditional statements and iterator operators over containers."}),"\n",(0,i.jsx)(n.h2,{id:"formulation",children:"Formulation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Definition of more complex behaviors for prey and predator agents:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The preys agents are moving to the cell containing the highest quantity of food."}),"\n",(0,i.jsx)(n.li,{children:"The predator agents are moving if possible to a cell that contains preys, otherwise to a random cell."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"model-definition",children:"Model Definition"}),"\n",(0,i.jsx)(n.h3,{id:"parent-species",children:"parent species"}),"\n",(0,i.jsxs)(n.p,{children:["We modify the ",(0,i.jsx)(n.code,{children:"basic_move"})," reflex of the ",(0,i.jsx)(n.code,{children:"generic_species"})," in order to give the ",(0,i.jsx)(n.code,{children:"prey"})," and ",(0,i.jsx)(n.code,{children:"predator"})," more complex behaviors: instead of choosing a random vegetation cell in the neighborhood, the agents will choose a vegetation cell (still in the neighborhood) thanks to a ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"choose_cell"})})," action. This action will return an empty (",(0,i.jsx)(n.code,{children:"nil"}),") value in the parent species and will be specialized for each species."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"species generic_species {\n    ...\n    reflex basic_move {\n\tmy_cell <- choose_cell();\n\tlocation <- my_cell.location; \n    } \n\t\n    vegetation_cell choose_cell {\n\treturn nil;\n    }\n    ...\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"prey-species",children:"prey species"}),"\n",(0,i.jsxs)(n.p,{children:["We specialize the ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"choose_cell"})})," action for the ",(0,i.jsx)(n.code,{children:"prey"})," species: the agent will choose the vegetation cell of the neighborhood (list ",(0,i.jsx)(n.code,{children:"my_cell.neighbors2"}),") that maximizes the quantity of food."]}),"\n",(0,i.jsx)(n.p,{children:"Note that GAMA offers numerous operators to manipulate lists and containers:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Unary operators: ",(0,i.jsx)(n.code,{children:"min"}),", ",(0,i.jsx)(n.code,{children:"max"}),", ",(0,i.jsx)(n.code,{children:"sum"}),"..."]}),"\n",(0,i.jsxs)(n.li,{children:["Binary operators:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"where"}),": returns a sub-list where all the elements verify the condition defined in the right operand."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"first_with"}),": returns the first element of the list that verifies the condition defined in the right operand."]}),"\n",(0,i.jsx)(n.li,{children:"..."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["In the case of binary operators, each element (of the first operand list) can be accessed with the pseudo-variable ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"each"})}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Thus the ",(0,i.jsx)(n.code,{children:"choose_cell"})," action of the ",(0,i.jsx)(n.code,{children:"prey"})," species is defined by:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"species prey parent: generic_species {\n    ...  \n    vegetation_cell choose_cell {\n        return (my_cell.neighbors2) with_max_of (each.food);\n    }\n    ...\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"predator-species",children:"predator species"}),"\n",(0,i.jsxs)(n.p,{children:["We specialize the ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"choose_cell"})})," species for the ",(0,i.jsx)(n.code,{children:"predator"})," species: the agent will choose, if possible, a vegetation cell of the neighborhood (list ",(0,i.jsx)(n.code,{children:"my_cell.neighbors2"}),") that contains at least a ",(0,i.jsx)(n.code,{children:"prey"})," agent; otherwise it will choose a random cell."]}),"\n",(0,i.jsxs)(n.p,{children:["We use for this action the ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"first_with"})})," operator on the list of neighbor vegetation cells (",(0,i.jsx)(n.code,{children:"my_cell.neighbors2"}),") with the following condition: the list of ",(0,i.jsx)(n.code,{children:"prey"})," agents contained in the cell is not empty. Note that we use the ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"shuffle"})})," operator to randomize the order of the list of the neighbor cells."]}),"\n",(0,i.jsxs)(n.p,{children:["If all the neighbor cells are empty, then the agent chooses a random cell in the neighborhood (",(0,i.jsx)(n.code,{children:"one_of (my_cell.neighbors2)"}),")."]}),"\n",(0,i.jsx)(n.p,{children:"GAMA contains statements that allow executing blocks depending on some conditions:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"if condition1 {...} \nelse if condition2{...} \n... \nelse {...} \n"})}),"\n",(0,i.jsx)(n.p,{children:"This statement means that if condition1 = true then the first block is executed; otherwise, if condition2 = true, then it is the second block, etc. When no conditions are satisfied and an else block is defined (it is optional), this latter is executed."}),"\n",(0,i.jsxs)(n.p,{children:["We then write the ",(0,i.jsx)(n.code,{children:"choose_cell"})," action as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"species predator parent: generic_species {\n    ...\n    vegetation_cell choose_cell {\n        vegetation_cell my_cell_tmp <- shuffle(my_cell.neighbors2) first_with (!(empty (prey inside (each))));\n\tif my_cell_tmp != nil {\n\t    return my_cell_tmp;\n\t} else {\n\t    return one_of (my_cell.neighbors2);\n\t} \n    }\n    ...\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Note there is ternary operator allowing to directly use a conditioned structure to evaluate a variable:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"condition ? value1 : value2\n"})}),"\n",(0,i.jsx)(n.p,{children:"if condition is true, then returns value1; otherwise, returns value2."}),"\n",(0,i.jsx)(n.h2,{id:"complete-model",children:"Complete Model"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-gaml",metastring:"reference",children:"https://github.com/gama-platform/gama/blob/GAMA_1.9.2/msi.gama.models/models/Tutorials/Predator%20Prey/models/Model%2008.gaml\n"})})]})}function a(e={}){const{wrapper:n}={...(0,o.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},4552:(e,n,t)=>{t.d(n,{I:()=>l,M:()=>r});var i=t(11504);const o={},s=i.createContext(o);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);