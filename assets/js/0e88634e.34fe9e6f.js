"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[25428],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>m});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),u=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=u(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=u(r),m=n,y=c["".concat(p,".").concat(m)]||c[m]||d[m]||o;return r?a.createElement(y,i(i({ref:t},s),{},{components:r})):a.createElement(y,i({ref:t},s))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var u=2;u<o;u++)i[u]=r[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}c.displayName="MDXCreateElement"},17217:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>m,frontMatter:()=>l,metadata:()=>u,toc:()=>d});var a=r(87462),n=r(63366),o=(r(67294),r(3905)),i=["components"],l={title:"10. Charts"},p=void 0,u={unversionedId:"PredatorPrey_step10",id:"PredatorPrey_step10",title:"10. Charts",description:"This 10th step illustrates how to define charts.",source:"@site/../docs/PredatorPrey_step10.md",sourceDirName:".",slug:"/PredatorPrey_step10",permalink:"/wiki/next/PredatorPrey_step10",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/PredatorPrey_step10/_edit",tags:[],version:"current",frontMatter:{title:"10. Charts"},sidebar:"tuto",previous:{title:"9. Stopping condition",permalink:"/wiki/next/PredatorPrey_step9"},next:{title:"11. Writing Files",permalink:"/wiki/next/PredatorPrey_step11"}},s={},d=[{value:"Formulation",id:"formulation",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"output",id:"output",level:3},{value:"Complete Model",id:"complete-model",level:2}],c={toc:d};function m(e){var t=e.components,r=(0,n.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This 10th step illustrates how to define charts."),(0,o.kt)("h2",{id:"formulation"},"Formulation"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Addition of a new display to visualize:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"One chart representing the evolution of the quantity of prey and predator agents over time."),(0,o.kt)("li",{parentName:"ul"},"Two histograms representing the energy distribution of the prey and predator agents.")))),(0,o.kt)("h2",{id:"model-definition"},"Model Definition"),(0,o.kt)("h3",{id:"output"},"output"),(0,o.kt)("p",null,"GAMA can display various chart types:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Time series"),(0,o.kt)("li",{parentName:"ul"},"Pie charts"),(0,o.kt)("li",{parentName:"ul"},"Histograms")),(0,o.kt)("p",null,"A chart must be defined in a display: it behaves exactly like any other layer."),(0,o.kt)("p",null,"Definition of a chart:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"chart chart_name type: chart_type {\n    [data]\n}\n")),(0,o.kt)("p",null,"The data to draw are defined inside the ",(0,o.kt)("inlineCode",{parentName:"p"},"chart")," block as follow, using the ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," statement:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"data data_legend value: data_value\n")),(0,o.kt)("p",null,"We add a new display called ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"Population_information"))," that refreshes every 5 simulation steps.\nInside this display, we define 3 charts: one of type ",(0,o.kt)("inlineCode",{parentName:"p"},"series")," (i.e. time series chart), two of type ",(0,o.kt)("inlineCode",{parentName:"p"},"histogram"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'"Species evolution"; background: white; size: {1, 0.5}; position: {0, 0}'),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"data1: ",(0,o.kt)("inlineCode",{parentName:"li"},"nb_preys"),"; color : blue"),(0,o.kt)("li",{parentName:"ul"},"data2: ",(0,o.kt)("inlineCode",{parentName:"li"},"nb_predators"),"; color : red"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'"Prey Energy Distribution"; background: lightGray; size: {0.5, 0.5}; position: {0, 0.5}'),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},'data "]0;0.25]": number of preys with (each.energy <= 0.25) ;'),(0,o.kt)("li",{parentName:"ul"},'data "]0.25;0.5]": number of preys with ((each.energy > 0.25) and (each.energy <= 0.5)) ;'),(0,o.kt)("li",{parentName:"ul"},'data "]0.5;0.75]": number of preys with ((each.energy > 0.5) and (each.energy <= 0.75)) ;'),(0,o.kt)("li",{parentName:"ul"},'data "]0.75;1]": number of preys with  (each.energy > 0.75) ;'))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'"Predator Energy Distribution"; background: lightGray; size: {0.5, 0.5}; position: {0.5, 0.5}'),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},'data "]0;0.25]": number of predators with (each.energy <= 0.25) ;'),(0,o.kt)("li",{parentName:"ul"},'data "]0.25;0.5]": number of predators with ((each.energy > 0.25) and (each.energy <= 0.5)) ;'),(0,o.kt)("li",{parentName:"ul"},'data "]0.5;0.75]": number of predators with ((each.energy > 0.5) and (each.energy <= 0.75)) ;'),(0,o.kt)("li",{parentName:"ul"},'data "]0.75;1]": number of predators with  (each.energy > 0.75) ;')))),(0,o.kt)("p",null,"To evaluate the value of the data of the two histogram, we use the operator ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"list count condition"))," that returns the number of elements of ",(0,o.kt)("inlineCode",{parentName:"p"},"list")," for which the condition is true."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'display Population_information refresh:every(5#cycles) {\n    chart "Species evolution" type: series size: {1,0.5} position: {0, 0} {\n    data "number_of_preys" value: nb_preys color: #blue ;\n    data "number_of_predator" value: nb_predators color: #red ;\n    }\n    chart "Prey Energy Distribution" type: histogram background: #lightgray size: {0.5,0.5} position: {0, 0.5} {\n    data "]0;0.25]" value: prey count (each.energy <= 0.25) color:#blue;\n    data "]0.25;0.5]" value: prey count ((each.energy > 0.25) and (each.energy <= 0.5)) color:#blue;\n    data "]0.5;0.75]" value: prey count ((each.energy > 0.5) and (each.energy <= 0.75)) color:#blue;\n    data "]0.75;1]" value: prey count (each.energy > 0.75) color:#blue;\n    }\n    chart "Predator Energy Distribution" type: histogram background: #lightgray size: {0.5,0.5} position: {0.5, 0.5} {\n    data "]0;0.25]" value: predator count (each.energy <= 0.25) color: #red ;\n    data "]0.25;0.5]" value: predator count ((each.energy > 0.25) and (each.energy <= 0.5)) color: #red ;\n    data "]0.5;0.75]" value: predator count ((each.energy > 0.5) and (each.energy <= 0.75)) color: #red ;\n    data "]0.75;1]" value: predator count (each.energy > 0.75) color: #red;\n    }\n}\n')),(0,o.kt)("h2",{id:"complete-model"},"Complete Model"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gaml",metastring:"reference",reference:!0},"https://github.com/gama-platform/gama/blob/GAMA_1.8.2/msi.gama.models/models/Tutorials/Predator%20Prey/models/Model%2010.gaml\n")))}m.isMDXComponent=!0}}]);