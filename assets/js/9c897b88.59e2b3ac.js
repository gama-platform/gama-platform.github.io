"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[82837],{38567:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>d,toc:()=>s});var n=t(74848),r=t(28453);const i={title:"4. Weight for Road Network"},a=void 0,d={id:"RoadTrafficModel_step4",title:"4. Weight for Road Network",description:"The present model will introduce how to design a road system, or graph, based on the road GIS data and provide each edge a weight representing the destruction level of the road.",source:"@site/versioned_docs/version-1.9.3/RoadTrafficModel_step4.md",sourceDirName:".",slug:"/RoadTrafficModel_step4",permalink:"/wiki/RoadTrafficModel_step4",draft:!1,unlisted:!1,editUrl:"https://github.com/gama-platform/gama/wiki/RoadTrafficModel_step4/_edit",tags:[],version:"1.9.3",frontMatter:{title:"4. Weight for Road Network"},sidebar:"tuto",previous:{title:"3. Movement of People",permalink:"/wiki/RoadTrafficModel_step3"},next:{title:"5. Dynamic weights",permalink:"/wiki/RoadTrafficModel_step5"}},l={},s=[{value:"Formulation",id:"formulation",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"road agent",id:"road-agent",level:3},{value:"weighted road network",id:"weighted-road-network",level:3},{value:"Complete Model",id:"complete-model",level:2}];function h(e){const o={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(o.p,{children:["The present model will introduce how to design a road system, or graph, based on the road GIS data and provide each edge a ",(0,n.jsx)(o.code,{children:"weight"})," representing the destruction level of the road."]}),"\n",(0,n.jsx)(o.h2,{id:"formulation",children:"Formulation"}),"\n",(0,n.jsxs)(o.ul,{children:["\n",(0,n.jsxs)(o.li,{children:["Add a ",(0,n.jsx)(o.strong,{children:(0,n.jsx)(o.code,{children:"destruction_coeff"})})," variable to the ",(0,n.jsx)(o.code,{children:"road"})," agent. The value of this variable is higher or equal to 1 or lower or equal to 2. At initialization, the value of this variable is randomly defined between 1 and 2."]}),"\n",(0,n.jsxs)(o.li,{children:["In the road network graph, more a road is worn out (",(0,n.jsx)(o.code,{children:"destruction_coeff"})," high), more a ",(0,n.jsx)(o.code,{children:"people"}),' agent takes time to go all over it. Then the value of the arc representing the road in the graph is equal to "length of the road ',(0,n.jsx)(o.code,{children:"*"}),' destruction_coeff".']}),"\n",(0,n.jsxs)(o.li,{children:["The color of the road depends on the ",(0,n.jsx)(o.code,{children:"destruction_coeff"}),'. If "destruction_coeff = 1", the road is green, if "destruction_coeff = 2", the road is red.']}),"\n"]}),"\n",(0,n.jsx)(o.h2,{id:"model-definition",children:"Model Definition"}),"\n",(0,n.jsx)(o.h3,{id:"road-agent",children:"road agent"}),"\n",(0,n.jsxs)(o.p,{children:["We add a ",(0,n.jsx)(o.strong,{children:(0,n.jsx)(o.code,{children:"destruction_coeff"})})," variable which initial value is randomly defined between 1 and 2 and which have a max of 2. The color of the agent will depend on this variable. In order to simplify the GAML code, we define a new variable  ",(0,n.jsx)(o.strong,{children:(0,n.jsx)(o.code,{children:"colorValue"})})," that represents the value of red color and that will be defined between 0 and 255."]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{children:"species road  {\n    float destruction_coeff <- rnd(1.0,2.0) max: 2.0;\n    int colorValue <- int(255*(destruction_coeff - 1)) update: int(255*(destruction_coeff - 1));\n    rgb color <- rgb(min([255, colorValue]),max ([0, 255 - colorValue]),0)  update: rgb(min([255, colorValue]),max ([0, 255 - colorValue]),0) ;\n    ...\n}\n"})}),"\n",(0,n.jsx)(o.h3,{id:"weighted-road-network",children:"weighted road network"}),"\n",(0,n.jsxs)(o.p,{children:["In GAMA, adding a weight for a graph is very simple, we use the ",(0,n.jsx)(o.strong,{children:(0,n.jsx)(o.code,{children:"with_weights"})})," operator with the graph for left-operand and a weight map for the right-operand. The weight map contains the weight of each edge: [edge1::weight1, edge2:: weight2,...]. In this model, the weight will be equal to the length of the road (perimeter of the polyline) ",(0,n.jsx)(o.strong,{children:"its destruction coefficient"}),"."]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{children:"    init {\n        ...\n        create road from: shape_file_roads ;\n        map<road,float> weights_map <- road as_map (each:: (each.destruction_coeff * each.shape.perimeter));\n        the_graph <- as_edge_graph(road) with_weights weights_map;\n        ...\n    }\n"})}),"\n",(0,n.jsx)(o.h2,{id:"complete-model",children:"Complete Model"}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-gaml",metastring:"reference",children:"https://github.com/gama-platform/gama.old/blob/GAMA_1.9.3/msi.gama.models/models/Tutorials/Road%20Traffic/models/Model%2004.gaml\n"})})]})}function c(e={}){const{wrapper:o}={...(0,r.R)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},28453:(e,o,t)=>{t.d(o,{R:()=>a,x:()=>d});var n=t(96540);const r={},i=n.createContext(r);function a(e){const o=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function d(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(i.Provider,{value:o},e.children)}}}]);