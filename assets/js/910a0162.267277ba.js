"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[10033],{3905:(e,n,t)=>{t.d(n,{Zo:()=>h,kt:()=>g});var i=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=i.createContext({}),c=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},h=function(e){var n=c(e.components);return i.createElement(s.Provider,{value:n},e.children)},f="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),f=c(t),d=o,g=f["".concat(s,".").concat(d)]||f[d]||u[d]||r;return t?i.createElement(g,a(a({ref:n},h),{},{components:t})):i.createElement(g,a({ref:n},h))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,a=new Array(r);a[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[f]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<r;c++)a[c]=t[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},66219:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>s,default:()=>g,frontMatter:()=>l,metadata:()=>c,toc:()=>f});var i=t(87462),o=t(63366),r=(t(67294),t(3905)),a=["components"],l={"^title":"Life"},s=void 0,c={unversionedId:"Life",id:"Life",title:"Life",description:"Path: Library models/Toy Models/Life/Life.gaml",source:"@site/../docs/Life.md",sourceDirName:".",slug:"/Life",permalink:"/wiki/next/Life",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/Life/_edit",tags:[],version:"current",frontMatter:{"^title":"Life"}},h={},f=[],u={toc:f},d="wrapper";function g(e){var n=e.components,t=(0,o.Z)(e,a);return(0,r.kt)(d,(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("img",{width:"960",alt:"Annotation 2023-04-16 041001_Life",src:"https://user-images.githubusercontent.com/4437331/232262587-107264ab-6377-4f6f-832e-650cf5f24594.png"}),(0,r.kt)("p",null,"Path: Library models/Toy Models/Life/Life.gaml"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"\n/**\n* Name: Life\n* Author: \n* Description: A model using a cellular automata to represent the Game of Life, the most famous \n*   example of cellular automata. Each cell will see if the number of living neighbours meets the \n*   condition to emerge or to live.\n* Tags: grid\n*/\nmodel life\n\n//Declare the world as a torus or not torus environment\nglobal torus: torus_environment {\n    //Size of the environment\n    int environment_width <- 200 min: 10 max: 1000;\n    int environment_height <- 200 min: 10 max: 1000;\n    bool parallel <- true;\n    //Declare as torus or not\n    bool torus_environment <- true;\n    //Density \n    int density <- 25 min: 1 max: 99;\n    //Conditions to live\n    list<int> living_conditions <- [2, 3];\n    //Conditions to birth\n    list<int> birth_conditions <- [3];\n    //Color for living cells\n    rgb livingcolor <- #white;\n    //Color for dying cells\n    rgb dyingcolor <- #red;\n    //Color for emerging cells\n    rgb emergingcolor <- #orange;\n    //Color for dead cells\n    rgb deadcolor <- #black;\n    //Shape of the environment\n    geometry shape <- rectangle(environment_width, environment_height);\n    \n    //Initialization of the model by writing the description of the model in the console\n    init {\n        do description;\n    }\n    \n    //Ask at each life_cell to evolve and update\n    reflex generation {\n        // The computation is made in parallel\n        ask life_cell parallel: parallel {\n            do evolve;\n        }\n    }\n    //Write the description of the model in the console\n    action description {\n        write\n        'Description. The Game of Life is a cellular automaton devised by the British mathematician John Horton Conway in 1970. It is the best-known example of a cellular automaton. The game is a zero-player game, meaning that its evolution is determined by its initial state, requiring no further input from humans. One interacts with the Game of Life by creating an initial configuration and observing how it evolves.  The universe of the Game of Life is an infinite two-dimensional orthogonal grid of square cells, each of which is in one of two possible states, live or dead. Every cell interacts with its eight neighbors, which are the cells that are directly horizontally, vertically, or diagonally adjacent. At each step in time, the following transitions occur: \\n\\t 1.Any live cell with fewer than two live neighbours dies, as if caused by underpopulation. \\n\\t 2.Any live cell with more than three live neighbours dies, as if by overcrowding. \\n\\t 3.Any live cell with two or three live neighbours lives on to the next generation. \\n\\t 4.Any dead cell with exactly three live neighbours becomes a live cell. The initial pattern constitutes the seed of the system. The first(generation) is created by applying the above rules simultaneously to every cell in the seed\ufffdbirths and deaths happen simultaneously, and the discrete moment at which this happens is sometimes called a tick (in other words, each generation is a pure function of the one before). The rules continue to be applied repeatedly to create further generations.';\n    }\n\n}\n\n//Grid species representing a cellular automata\ngrid life_cell width: environment_width height: environment_height neighbors: 8  use_individual_shapes: false use_regular_agents: false \nuse_neighbors_cache: false parallel: parallel{\n    //Boolean to know if it is the new state of the cell\n    bool new_state;\n    //List of all the neighbours\n    list<life_cell> neighbours <- self neighbors_at 1;\n    //Boolean  to know if it is a living or dead cell\n    bool alive <- (rnd(100)) < density;\n    \n    rgb color <- alive ? livingcolor : deadcolor;\n    \n    //Action to evolve the cell considering its neighbours\n    action evolve {\n        //Count the number of living neighbours of the cells\n        int living <- neighbours count each.alive;\n        if alive {\n            //If the number of living respect the conditions, the cell is still alive\n            new_state <- living in living_conditions;\n            color <- new_state ? livingcolor : dyingcolor;\n        } else {\n            //If the number of living meets the conditions, the cell go to born\n            new_state <- living in birth_conditions;\n            color <- new_state ? emergingcolor : deadcolor;\n        }\n\n    }\n    //Action to update the new state of the cell\n    reflex update {\n        alive <- new_state;\n    }\n\n}\n\n\nexperiment \"Game of Life\" type: gui {\n    parameter \"Run in parallel \" var: parallel category: 'Board';\n    parameter 'Width:' var: environment_width category: 'Board';\n    parameter 'Height:' var: environment_height category: 'Board';\n    parameter 'Torus?:' var: torus_environment category: 'Board';\n    parameter 'Initial density of live cells:' var: density category: 'Cells';\n    parameter 'Numbers of live neighbours required to stay alive:' var: living_conditions category: 'Cells';\n    parameter 'Numbers of live neighbours required to become alive:' var: birth_conditions category: 'Cells';\n    parameter 'Color of live cells:' var: livingcolor category: 'Colors';\n    parameter 'Color of dying cells:' var: dyingcolor category: 'Colors';\n    parameter 'Color of emerging cells:' var: emergingcolor category: 'Colors';\n    parameter 'Color of dead cells:' var: deadcolor category: 'Colors';\n    output {\n        display Life type: 3d axes:false{\n            grid life_cell;\n        }\n\n    }\n\n}\n\n\n\n\n")))}g.isMDXComponent=!0}}]);