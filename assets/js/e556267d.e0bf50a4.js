"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[59971],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(n),f=i,d=c["".concat(s,".").concat(f)]||c[f]||m[f]||r;return n?a.createElement(d,l(l({ref:t},u),{},{components:n})):a.createElement(d,l({ref:t},u))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=f;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},75530:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>f,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var a=n(87462),i=n(63366),r=(n(67294),n(3905)),l=["components"],o={title:"Defining export files"},s=void 0,p={unversionedId:"DefiningExportFiles",id:"version-1.8.1/DefiningExportFiles",title:"Defining export files",description:"[//]: # (startConcept|export_files)",source:"@site/versioned_docs/version-1.8.1/DefiningExportFiles.md",sourceDirName:".",slug:"/DefiningExportFiles",permalink:"/wiki/1.8.1/DefiningExportFiles",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/DefiningExportFiles/_edit",tags:[],version:"1.8.1",frontMatter:{title:"Defining export files"},sidebar:"side",previous:{title:"Defining monitors and inspectors",permalink:"/wiki/1.8.1/DefiningMonitorsAndInspectors"},next:{title:"Defining user interaction",permalink:"/wiki/1.8.1/DefiningUserInteraction"}},u={},c=[{value:"Index",id:"index",level:2},{value:"The Save Statement",id:"the-save-statement",level:2},{value:"Facets",id:"facets",level:3},{value:"Usages",id:"usages",level:3},{value:"Export files in an experiment",id:"export-files-in-an-experiment",level:2},{value:"Autosave",id:"autosave",level:2}],m={toc:c};function f(e){var t=e.components,n=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"index"},"Index"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#the-save-statement"},"The Save Statement")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#export-files-in-experiment"},"Export files in experiment")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#autosave"},"Autosave"))),(0,r.kt)("h2",{id:"the-save-statement"},"The Save Statement"),(0,r.kt)("p",null,'Allows to save data in a file. The type of file can be "shp", "text" or "csv". The ',(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"save"))," statement can be use in an init block, a reflex, an action or in a user command."),(0,r.kt)("h3",{id:"facets"},"Facets"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"to"))," (string): an expression that evaluates to a string, the path to the file."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"data")," (any type), (omissible): any expression, that will be saved in the file."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"crs")," (any type): the name of the projection, e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},'crs:"EPSG:4326"')," or its EPSG id, e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"crs:4326"),". Here a list of the CRS codes (and EPSG id): ",(0,r.kt)("a",{parentName:"li",href:"http://spatialreference.org"},"http://spatialreference.org"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rewrite")," (boolean): an expression that evaluates to a boolean, specifying whether the save will erase the file or append data at the end of it."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type"),' (an identifier): an expression that evaluates to a string, the type of the output file (it can be only "shp", "text" or "csv")')),(0,r.kt)("h3",{id:"usages"},"Usages"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Its simple syntax is:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"save data to: output_file type: a_type_file;\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To save data in a text file:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'save (string(cycle) + "->"  + name + ":" + location) to: "save_data.txt" type: "text";\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To save the values of some attributes of the current agent in csv file:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'save [name, location, host] to: "save_data.csv" type: "csv";\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To save the geometries of all the agents of a species into a shapefile (with optional attributes):")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'save species_of(self) to: "save_shapefile.shp" type: "shp" attributes: [name::"nameAgent", location::"locationAgent"] crs: "EPSG:4326";\n')),(0,r.kt)("h2",{id:"export-files-in-an-experiment"},"Export files in an experiment"),(0,r.kt)("p",null,"When the modeler wants to save data at each simulation step, it is recommended to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"save")," statement either in the model itself or in a ",(0,r.kt)("inlineCode",{parentName:"p"},"reflex")," of the ",(0,r.kt)("inlineCode",{parentName:"p"},"experiment")," (the syntax and the use are similar in all the cases)."),(0,r.kt)("p",null,"The use of ",(0,r.kt)("inlineCode",{parentName:"p"},"save")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"experiment")," is mandatory when we want to save a value related to several simulations running in parallel (e.g. the average of a value over several simulations). It is in particular in ",(0,r.kt)("a",{parentName:"p",href:"BatchExperiments"},(0,r.kt)("inlineCode",{parentName:"a"},"batch")," experiments")," to save a value at the end of simulations."),(0,r.kt)("h2",{id:"autosave"},"Autosave"),(0,r.kt)("p",null,"Image files can be exported also through the ",(0,r.kt)("inlineCode",{parentName:"p"},"autosave")," facet of the display, as explained in ",(0,r.kt)("a",{parentName:"p",href:"DefiningDisplaysGeneralities#displays-and-layers"},"this previous part"),"."))}f.isMDXComponent=!0}}]);