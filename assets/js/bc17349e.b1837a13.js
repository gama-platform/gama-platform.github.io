"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[60248],{98968:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var s=t(17624),i=t(4552);const a={title:"Interaction between agents"},o=void 0,r={id:"InteractionBetweenAgents",title:"Interaction between agents",description:"[//]: # (startConcept|interactionbetweenagents)",source:"@site/../docs/InteractionBetweenAgents.md",sourceDirName:".",slug:"/InteractionBetweenAgents",permalink:"/wiki/next/InteractionBetweenAgents",draft:!1,unlisted:!1,editUrl:"https://github.com/gama-platform/gama/wiki/InteractionBetweenAgents/_edit",tags:[],version:"current",frontMatter:{title:"Interaction between agents"},sidebar:"main",previous:{title:"Defining actions and behaviors",permalink:"/wiki/next/DefiningActionsAndBehaviors"},next:{title:"Attaching Skills",permalink:"/wiki/next/AttachingSkills"}},c={},l=[{value:"Index",id:"index",level:2},{value:"The ask statement",id:"the-ask-statement",level:2},{value:"Pseudo-variables",id:"pseudo-variables",level:2},{value:"Some useful interaction operators",id:"some-useful-interaction-operators",level:2},{value:"Example",id:"example",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.M)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"In this part, we will learn how interactions between agents works. We will also present you a bunch of operators useful for your modelling."}),"\n",(0,s.jsx)(n.h2,{id:"index",children:"Index"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#the-ask-statement",children:"The ask statement"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#pseudo-variables",children:"Pseudo variables"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#some-useful-interaction-operators",children:"Some useful interaction operators"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#example",children:"Example"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"the-ask-statement",children:"The ask statement"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"ask"})," statement can be used in any ",(0,s.jsx)(n.code,{children:"reflex"})," or ",(0,s.jsx)(n.code,{children:"action"})," scope. It is used to specify the interaction between the instances of your species and the other agents. You only have to specify the species of the agents you want to interact with. Here are the different ways of calling the ",(0,s.jsx)(n.code,{children:"ask"})," statement:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"If you want to interact with one particular agent (for example, defined as an attribute of your species):"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"species my_species {\n    agent target;\n    \n    reflex update {\n\task target {\n\t    // statements\n\t}\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"If you want to interact with a group of agents:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"species my_species {\n    list<agent> targets;\n\n    reflex update {\n\task targets {\n\t    // statements\n\t}\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"If you want to interact with agents, as if they were instance of a certain species (can raise an error if it's not the case!):"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"species my_species {\n    list<agent> targets;\n\n    reflex update {\n\task targets as:my_species {\n\t    // statements\n\t}\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["If you want to interact with all the agents of a species (note that the name of the species can be used in the ",(0,s.jsx)(n.code,{children:"ask"}),", and in many other situations, as the population of this species, i.e. the list of agents instance of this species):"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"species my_species {\n    reflex update {\n\task other_species {\n\t    // statements\n\t}\n    }\n}\n\nspecies other_species { }\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Note that you can use the attribute ",(0,s.jsx)(n.em,{children:"population"})," of ",(0,s.jsx)(n.code,{children:"species"})," if you find it more explicit:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"ask other_species.population\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'If you want to interact with all the agents of a particular species from a list of agents (for example, using the global variable "agents"):'}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"species my_specie {\n    reflex update {\n\task agents of_species my_specie {\n\t    // statements\n\t}\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"pseudo-variables",children:"Pseudo-variables"}),"\n",(0,s.jsxs)(n.p,{children:["Once you are in the ",(0,s.jsx)(n.code,{children:"ask"})," scope, you can use some pseudo-variables to refer to the receiver agent (the one specified just after the ask statement) or the transmitter agent (the agent which is asking).\nWe use the pseudo-variable ",(0,s.jsx)(n.code,{children:"self"})," to refer to the receiver agent, and the pseudo-variable ",(0,s.jsx)(n.code,{children:"myself"})," to refer to the transmitter agent. The pseudo variable ",(0,s.jsx)(n.code,{children:"self"})," can be omitted when calling actions or attributes."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'species speciesA {\n    init {\n\tname <- "speciesA";\n    }\n\t\n    reflex update {\n\task speciesB {\n            write name; // output : "speciesB"\t\t\t\n            write self.name; // output : "speciesB"\n\t    write myself.name; // output : "speciesA"\n        }\n    }\n}\n\nspecies speciesB {\n    init {\n\tname <- "speciesB";\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Now, if we introduce a third species, we can write an ",(0,s.jsx)(n.code,{children:"ask"})," statement inside another."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'species speciesA {\n    init {\n\tname <- "speciesA";\n    }\n\n    reflex update {\n\task speciesB {\n\t    write self.name; // output : "speciesB"\n\t    write myself.name; // output : "speciesA"\n\t    ask speciesC {\n\t\twrite self.name; // output : "speciesC"\n\t\twrite myself.name; // output : "speciesB"\n\t    }\n\t}\n    }\n}\n\nspecies speciesB {\n    init {\n\tname <- "speciesB";\n    }\n}\n\nspecies speciesC {\n    init {\n\tname <- "speciesC";\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Nb: try to avoid multiple imbrications of ask statements. Most of the time, there is another way to do the same thing."}),"\n",(0,s.jsx)(n.h2,{id:"some-useful-interaction-operators",children:"Some useful interaction operators"}),"\n",(0,s.jsxs)(n.p,{children:["The operator ",(0,s.jsx)(n.code,{children:"at_distance"})," can be used to know the list of agents that are in a certain distance from another agent."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"species my_species {\n    reflex update {\n\tlist<agent> neighbors <- agents at_distance(5);\n\t// neighbors contains the list of all the agents located at a distance <= 5 from the caller agent.\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The operator ",(0,s.jsx)(n.code,{children:"closest_to"})," returns the closest agent of a position among a container."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"species my_species {\n    reflex update {\n\tagent agentA <- agents closest_to(self);\n\t// agentA contains the closest agent from the caller agent.\n\tagent agentB <- other_specie closest_to({2,3});\n\t// agentB contains the closest instance of other_specie from the location {2,3}.\n    }\n}\n\nspecies other_specie { }\n"})}),"\n",(0,s.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.p,{children:"To practice those notions, here is a short basic example. Let's build a model with a given number of agents with a circle display (keep in mind that their shape has kept its default value: a point). They can move randomly on the environment (i.e. here move can be understood as changing its location), and when they are close enough from another agent, a line is displayed between them. This line is destroyed when the distance between the two agents is too important."}),"\n",(0,s.jsxs)(n.p,{children:["Hint: use the operator ",(0,s.jsx)(n.code,{children:"polyline"})," to construct a line. List the points between angle brackets ",(0,s.jsx)(n.code,{children:"["})," and ",(0,s.jsx)(n.code,{children:"]"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"images/connect_the_neighbors.png",src:t(95680).c+"",width:"574",height:"567"})}),"\n",(0,s.jsx)(n.p,{children:"Here is one example of implementation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"model connect_the_neighbors\n\nglobal{\n    float speed <- 0.2;\n    float distance_to_intercept <- 10.0;\n    int number_of_circle <- 100;\n\t\n    init {\n\tcreate my_species number:number_of_circle;\n    }\n}\n\nspecies my_species {\n    reflex move {\n\tlocation <- {location.x+rnd(-speed,speed),location.y+rnd(-speed,speed)};\n    }\n\t\n    aspect default {\n\tdraw circle(1) color: #yellow border: #black;\n\task my_species at_distance(distance_to_intercept) {\n\t    draw polyline([self.location,myself.location]) color:#black;\n\t}\n    }\n}\n\nexperiment my_experiment type:gui {\n    output{\n\tdisplay myDisplay {\n\t    species my_species aspect:default;\n\t}\n    }\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.M)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},95680:(e,n,t)=>{t.d(n,{c:()=>s});const s=t.p+"assets/images/connect_the_neighbors-593e2f5f169ce517599f2e4bd7deafff.png"},4552:(e,n,t)=>{t.d(n,{I:()=>r,M:()=>o});var s=t(11504);const i={},a=s.createContext(i);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);