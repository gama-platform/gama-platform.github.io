"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[20241],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},l=Object.keys(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||l;return n?i.createElement(f,a(a({ref:t},c),{},{components:n})):i.createElement(f,a({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,a=new Array(l);a[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:r,a[1]=o;for(var p=2;p<l;p++)a[p]=n[p];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},92308:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>f,frontMatter:()=>o,metadata:()=>p,toc:()=>u});var i=n(87462),r=n(63366),l=(n(67294),n(3905)),a=["components"],o={title:"Built-in Skills"},s=void 0,p={unversionedId:"BuiltInSkills",id:"BuiltInSkills",title:"Built-in Skills",description:"----",source:"@site/../docs/BuiltInSkills.md",sourceDirName:".",slug:"/BuiltInSkills",permalink:"/wiki/next/BuiltInSkills",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/BuiltInSkills/_edit",tags:[],version:"current",frontMatter:{title:"Built-in Skills"},sidebar:"side",previous:{title:"Built-in Species",permalink:"/wiki/next/BuiltInSpecies"},next:{title:"Built-in Architectures",permalink:"/wiki/next/BuiltInArchitectures"}},c={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Table of Contents",id:"table-of-contents",level:2}],d={toc:u},m="wrapper";function f(e){var t=e.components,n=(0,r.Z)(e,a);return(0,l.kt)(m,(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"This file is automatically generated from java files. Do Not Edit It.")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"introduction"},"Introduction"),(0,l.kt)("p",null,"Skills are built-in modules, written in Java, that provide a set of related built-in variables and built-in actions (in addition to those already provided by GAMA) to the species that declare them. A declaration of skill is done by filling the skills attribute in the species definition:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"species my_species skills: [skill1, skill2] {\n    ...\n}\n")),(0,l.kt)("p",null,"Skills have been designed to be mutually compatible so that any combination of them will result in a functional species. An example of skill is the ",(0,l.kt)("inlineCode",{parentName:"p"},"moving")," skill."),(0,l.kt)("p",null,"So, for instance, if a species is declared as:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"species foo skills: [moving]{\n...\n}\n")),(0,l.kt)("p",null,"Its agents will automatically be provided with the following variables : ",(0,l.kt)("inlineCode",{parentName:"p"},"speed"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"heading"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"destination")," and the following actions: ",(0,l.kt)("inlineCode",{parentName:"p"},"move"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"goto"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"wander"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"follow")," in addition to those built-in in species and declared by the modeller. Most of these variables, except the ones marked read-only, can be customized and modified like normal variables by the modeller. For instance, one could want to set a maximum for the speed; this would be done by redeclaring it like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"float speed max:100 min:0;\n")),(0,l.kt)("p",null,"Or, to obtain a speed increasing at each simulation step:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"float speed max:100 min:0  <- 1 update: speed * 1.01;\n")),(0,l.kt)("p",null,"Or, to change the speed in a behavior:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"if speed = 5 {\n    speed <- 10;\n}\n")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"table-of-contents"},"Table of Contents"))}f.isMDXComponent=!0}}]);