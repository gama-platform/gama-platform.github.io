"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[71265],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>d});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=s(a),d=r,h=u["".concat(p,".").concat(d)]||u[d]||c[d]||o;return a?n.createElement(h,i(i({ref:t},m),{},{components:a})):n.createElement(h,i({ref:t},m))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},10766:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>p,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var n=a(87462),r=a(63366),o=(a(67294),a(3905)),i=["components"],l={title:"Developing Types"},p=void 0,s={unversionedId:"DevelopingTypes",id:"version-1.8.2-RC1/DevelopingTypes",title:"Developing Types",description:"GAML provides a given number of built-in simple types (int, bool...) and more complex ones (path, graph...).",source:"@site/versioned_docs/version-1.8.2-RC1/DevelopingTypes.md",sourceDirName:".",slug:"/DevelopingTypes",permalink:"/wiki/1.8.2-RC1/DevelopingTypes",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/DevelopingTypes/_edit",tags:[],version:"1.8.2-RC1",frontMatter:{title:"Developing Types"},sidebar:"side",previous:{title:"Developing Operators",permalink:"/wiki/1.8.2-RC1/DevelopingOperators"},next:{title:"Developing Species",permalink:"/wiki/1.8.2-RC1/DevelopingSpecies"}},m={},c=[{value:"Implementation",id:"implementation",level:2},{value:"The data structure file",id:"the-data-structure-file",level:2},{value:"The type file",id:"the-type-file",level:2},{value:"Inheritance from the <code>GamaType&lt;T&gt;</code> class",id:"inheritance-from-the-gamatypet-class",level:3},{value:"Annotations",id:"annotations",level:2},{value:"@type",id:"type",level:3}],u={toc:c};function d(e){var t=e.components,a=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"GAML provides a given number of built-in simple types (int, bool...) and more complex ones (path, graph...).\nDeveloping a new type allows, then, to add a new data structure to GAML."),(0,o.kt)("h2",{id:"implementation"},"Implementation"),(0,o.kt)("p",null,"Developing a new type requires the implementation of 2 Java files:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"the first one that describes the data structure (e.g.: ",(0,o.kt)("inlineCode",{parentName:"li"},"GamaColor.java")," to define a type color)"),(0,o.kt)("li",{parentName:"ul"},"the second one that implements the type itself, wrapping the data structure file (e.g.: ",(0,o.kt)("inlineCode",{parentName:"li"},"GamaColorType.java"),"), and providing accessors to data structure attributes.")),(0,o.kt)("h2",{id:"the-data-structure-file"},"The data structure file"),(0,o.kt)("p",null,"The class representing the data structure is a Java class annotated by:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a ",(0,o.kt)("a",{parentName:"li",href:"DevelopingIndexAnnotations#@vars"},"@vars")," annotation to describe the attributes of a complex type. The ",(0,o.kt)("inlineCode",{parentName:"li"},"@vars")," annotation contains a set of ",(0,o.kt)("inlineCode",{parentName:"li"},"@variable")," elements.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'@vars ({ \n    @variable (\n        name = "red",\n        type = IType.INT,\n        doc = { @doc ("Returns the red component of the color (between 0 and 255)") }),\n    @variable (\n        name = "green",\n        type = IType.INT,\n        doc = { @doc ("Returns the green component of the color (between 0 and 255)") }),\n    @variable (\n        name = "blue",\n        type = IType.INT,\n        doc = { @doc ("Returns the blue component of the color (between 0 and 255)") }),\n})\n')),(0,o.kt)("p",null,"It is recommended that this class implements the ",(0,o.kt)("inlineCode",{parentName:"p"},"IValue")," interface. It provides a clean way to give a string representation of the type and thus eases good serialization of the object. You will need to implement the ",(0,o.kt)("inlineCode",{parentName:"p"},"stringValue")," method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"public class GamaColor implements IValue {\n    @Override\n    public String stringValue(IScope scope) throws GamaRuntimeException {\n        ...\n    }\n}\n")),(0,o.kt)("p",null,"You should also have some class attributes that correspond to your custom data type's attributes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"public class GamaColor implements IValue {\n    private int red;\n    private int green;\n    private int blue;\n    ...\n}\n")),(0,o.kt)("p",null,"and then you can create setters and/or getters for each of the attributes. Setters and getters are methods annotated by the ",(0,o.kt)("a",{parentName:"p",href:"DevelopingIndexAnnotations#@getter"},"@getter")," or ",(0,o.kt)("a",{parentName:"p",href:"DevelopingIndexAnnotations#@setter"},"@setter")," annotations."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'@getter("red")\npublic Integer getRed() {\n    return this.red;\n}\n\n@setter("red")\npublic void setRed(int red) {\n    this.red = red;\n}\n')),(0,o.kt)("h2",{id:"the-type-file"},"The type file"),(0,o.kt)("p",null,"The class representing the type is a Java class such that:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"the class should be annotated by the ",(0,o.kt)("a",{parentName:"li",href:"DevelopingIndexAnnotations#@type"},"@type")," annotation,"),(0,o.kt)("li",{parentName:"ul"},"the class should extend the class ",(0,o.kt)("inlineCode",{parentName:"li"},"GamaType<DataStructureFile>")," (and thus implement its 3 methods),")),(0,o.kt)("p",null,"Example (from ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/gama-platform/gama/tree/GAMA_1.8.2/msi.gama.core/src/msi/gaml/types/GamaFloatType.java"},"GamaFloatType.java"),"):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'@type(\n    name = IKeyword.FLOAT, \n    id = IType.FLOAT, wraps = { Double.class,double.class }, \n    kind = ISymbolKind.Variable.NUMBER, \n    doc = {\n        @doc("Represents floating point numbers (equivalent to Double in Java)") }, \n    concept = { IConcept.TYPE })\npublic class GamaFloatType extends GamaType<Double> {\n')),(0,o.kt)("h3",{id:"inheritance-from-the-gamatypet-class"},"Inheritance from the ",(0,o.kt)("inlineCode",{parentName:"h3"},"GamaType<T>")," class"),(0,o.kt)("p",null,"Each java class aiming at implementing a type should inherit from the GamaType abstract class.\nExample (from ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/gama-platform/gama/tree/GAMA_1.8.2/msi.gama.core/src/msi/gaml/types/GamaColorType.java"},"GamaColorType.java"),"):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"public class GamaColorType extends GamaType<GamaColor>\n")),(0,o.kt)("p",null,"This class imposes to implement the three following methods (with the example of the GamaColorType):"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"public boolean canCastToConst()")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"public GamaColor cast(IScope scope, Object obj, Object param)"),": the way to cast any object in the type,"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"public GamaColor getDefault()"),": to define the default value of a variable of the current type.")),(0,o.kt)("p",null,"Remark: for each type, a unary operator is created with the exact name of the type. It can be used to cast any expression in the given type.\nThis operator calls the previous ",(0,o.kt)("inlineCode",{parentName:"p"},"cast")," method."),(0,o.kt)("h2",{id:"annotations"},"Annotations"),(0,o.kt)("h3",{id:"type"},"@type"),(0,o.kt)("p",null,"It provides information necessary to the processor to identify a type."),(0,o.kt)("p",null,"This annotation contains:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"name"),' (String, "" by default): ',(0,o.kt)("em",{parentName:"li"},"a String representing the type name in GAML"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"id")," (int, 0 by default): ",(0,o.kt)("em",{parentName:"li"},"the unique identifier for this type. User-added types can be chosen between IType.AVAILABLE","_","TYPE and IType.SPECIES","_","TYPE (exclusive) (cf. ",(0,o.kt)("a",{parentName:"em",href:"https://github.com/gama-platform/gama/tree/GAMA_1.8.2/msi.gama.core/src/msi/gaml/types/IType.java"},"IType.java"),")"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"wraps")," (tab of Class, null by default): ",(0,o.kt)("em",{parentName:"li"},'the list of Java Classes this type is "wrapping" (i.e. representing). The first one is the one that will be used preferentially throughout GAMA. The other ones are to ensure compatibility, in operators, with compatible Java classes (for instance, List and GamaList)'),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"kind")," (int, ISymbolKind.Variable.REGULAR by default): ",(0,o.kt)("em",{parentName:"li"},"the kind of Variable used to store this type. See ",(0,o.kt)("a",{parentName:"em",href:"https://github.com/gama-platform/gama/blob/GAMA_1.8.2/ummisco.gama.annotations/src/msi/gama/precompiler/ISymbolKind.java"},"ISymbolKind.Variable")),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"internal")," (boolean, false by default): ",(0,o.kt)("em",{parentName:"li"},"whether this type is for internal use only"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"doc")," (set of @doc, empty by default): ",(0,o.kt)("em",{parentName:"li"},"the documentation associated to the facet"),".")),(0,o.kt)("p",null,"All these annotations are defined in the file ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/gama-platform/gama/blob/GAMA_1.8.2/ummisco.gama.annotations/src/msi/gama/precompiler/GamlAnnotations.java"},"GamlAnnotations.java"),"."))}d.isMDXComponent=!0}}]);