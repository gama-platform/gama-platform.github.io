"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[80673],{19024:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var t=n(74848),s=n(28453);const r={title:"Defining advanced species"},a=void 0,c={id:"DefiningAdvancedSpecies",title:"Defining advanced species",description:"In the previous chapter, we saw how to declare and manipulate regular species and the global species (as a reminder, the instance of the global species is the world agent).",source:"@site/versioned_docs/version-1.9.2/DefiningAdvancedSpecies.md",sourceDirName:".",slug:"/DefiningAdvancedSpecies",permalink:"/wiki/1.9.2/DefiningAdvancedSpecies",draft:!1,unlisted:!1,editUrl:"https://github.com/gama-platform/gama/wiki/DefiningAdvancedSpecies/_edit",tags:[],version:"1.9.2",frontMatter:{title:"Defining advanced species"},sidebar:"main",previous:{title:"Inheritance",permalink:"/wiki/1.9.2/Inheritance"},next:{title:"Grid Species",permalink:"/wiki/1.9.2/GridSpecies"}},o={},l=[];function d(e){const i={a:"a",p:"p",strong:"strong",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(i.p,{children:["In the previous chapter, we saw how to declare and manipulate ",(0,t.jsx)(i.a,{href:"RegularSpecies",children:(0,t.jsx)(i.strong,{children:"regular species"})})," and the ",(0,t.jsx)(i.a,{href:"GlobalSpecies",children:(0,t.jsx)(i.strong,{children:"global species"})})," (as a reminder, the instance of the ",(0,t.jsx)(i.strong,{children:"global species"})," is the ",(0,t.jsx)(i.strong,{children:"world agent"}),")."]}),"\n",(0,t.jsxs)(i.p,{children:["We will now see that GAMA provides you the possibility to declare some special species, such as ",(0,t.jsx)(i.a,{href:"GridSpecies",children:(0,t.jsx)(i.strong,{children:"grids"})})," or ",(0,t.jsx)(i.a,{href:"GraphSpecies",children:(0,t.jsx)(i.strong,{children:"graphs"})}),", with their own built-in attributes and their own built-in actions. We will also see how to declare ",(0,t.jsx)(i.a,{href:"MirrorSpecies",children:(0,t.jsx)(i.strong,{children:"mirror species"})}),', which is a "copy" of a regular species, in order to give it an other representation. Finally, we will learn how to represent several agents through one unique agent, with ',(0,t.jsx)(i.a,{href:"MultiLevelArchitecture",children:(0,t.jsx)(i.strong,{children:"multi-level architecture"})}),"."]})]})}function h(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,i,n)=>{n.d(i,{R:()=>a,x:()=>c});var t=n(96540);const s={},r=t.createContext(s);function a(e){const i=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(r.Provider,{value:i},e.children)}}}]);