"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[31352],{11740:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var i=t(17624),a=t(4552);const o={title:"5. Visualizing in 3D"},l=void 0,r={id:"IncrementalModel_step5",title:"5. Visualizing in 3D",description:"This step Illustrates how to define a 3D display.",source:"@site/versioned_docs/version-1.8.1/IncrementalModel_step5.md",sourceDirName:".",slug:"/IncrementalModel_step5",permalink:"/wiki/1.8.1/IncrementalModel_step5",draft:!1,unlisted:!1,editUrl:"https://github.com/gama-platform/gama/wiki/IncrementalModel_step5/_edit",tags:[],version:"1.8.1",frontMatter:{title:"5. Visualizing in 3D"},sidebar:"tuto",previous:{title:"4. Movement on Graph",permalink:"/wiki/1.8.1/IncrementalModel_step4"},next:{title:"6. Multi-Level",permalink:"/wiki/1.8.1/IncrementalModel_step6"}},s={},d=[{value:"Formulation",id:"formulation",level:2},{value:"Model Definition",id:"model-definition",level:2},{value:"building",id:"building",level:3},{value:"road",id:"road",level:3},{value:"global variable",id:"global-variable",level:3},{value:"people",id:"people",level:3},{value:"display",id:"display",level:3},{value:"Complete Model",id:"complete-model",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"This step Illustrates how to define a 3D display."}),"\n",(0,i.jsx)(n.h2,{id:"formulation",children:"Formulation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Add a variable (height: int from 10m to 20m) and modify the aspect of buildings to display them in 3D."}),"\n",(0,i.jsx)(n.li,{children:"Add a variable (display_shape: geometry; shape with a buffer of 2m) and modify the aspect of the roads to display them with this new shape."}),"\n",(0,i.jsx)(n.li,{children:"Add a new global variable that indicate if it is night or not (bool: night before 7h and after 20h)."}),"\n",(0,i.jsx)(n.li,{children:"Define a new aspect (sphere3D) for people to display them as sphere."}),"\n",(0,i.jsx)(n.li,{children:"Modify the display to use this new aspect."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Incremental model 5: add a 3D display to the model.",src:t(90052).c+"",width:"1612",height:"831"})}),"\n",(0,i.jsx)(n.h2,{id:"model-definition",children:"Model Definition"}),"\n",(0,i.jsx)(n.h3,{id:"building",children:"building"}),"\n",(0,i.jsxs)(n.p,{children:["First, we add a new variable for buildings (",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"height"})}),") of type float from 10m to 20m. Then we modify the aspect in order to specify a depth for the geometry (using the ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"depth"})})," facet)."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"species building {\n    float height <- rnd(10#m, 20#m) ;\n    aspect default {\n\tdraw shape color: #gray border: #black depth: height;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"road",children:"road"}),"\n",(0,i.jsxs)(n.p,{children:["Concerning the road,  we add a new variable (",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"display_shape"})}),') of type geometry that corresponds to the shape of the road with a buffer of 2 meters. Then we modify the aspect in order to display this geometry instead of the shape of the agent. In order to avoid "z-fighting" problems, we add depth to the geometry (of 3 meters).']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"species road {\n    geometry display_shape <- shape + 2.0;\n    aspect default {\n\tdraw display_shape color: #black depth: 3.0;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"global-variable",children:"global variable"}),"\n",(0,i.jsxs)(n.p,{children:["We define a new global variable called ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"is_night"})})," of type ",(0,i.jsx)(n.code,{children:"bool"})," to indicate if it is night or not. This variable will be updated at each simulation step and will be ",(0,i.jsx)(n.code,{children:"true"})," if the current hour is lower than 7h or higher than 20h. It will be used in the display to change the light of the scene (to set it darker in the night)."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"global{\n    ...\n    bool is_night <- true update: current_date.hour < 7 or current_date.hour > 20;\n    ...\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"people",children:"people"}),"\n",(0,i.jsxs)(n.p,{children:["We define a new aspect for the people agent called ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"sphere3D"})}),". This aspect draws people agent as a 3m sphere. In order to avoid to cut the sphere in half, we translate the centroid of the drawn sphere to 3m along the z-axis."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"species people skills:[moving]{\t\t\n    ...\n    aspect sphere3D{\n\tdraw sphere(3) at: {location.x,location.y,location.z + 3} color:is_infected ? #red : #green;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"display",children:"display"}),"\n",(0,i.jsxs)(n.p,{children:["The element that we have to modify is the display. We change its name to ",(0,i.jsx)(n.strong,{children:"map_3D"})," to better reflect its visual aspect."]}),"\n",(0,i.jsxs)(n.p,{children:["In order to get a 3D aspect, we specify that this display will be an OpenGL one. For that, we just have to add the facet ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"type: opengl"})}),". In addition, to get a different light between night and day, we add a ",(0,i.jsx)(n.code,{children:"light"})," statement inside the ",(0,i.jsx)(n.code,{children:"display"}),'. We can change up to 7 lights, called through the facet "id". The default light is white light, directional, with the id=1. You can set the intensity of the light through the facet ',(0,i.jsx)(n.code,{children:"color"})," (you can pass a color or an integer between 0 and 255). To have a nice effect night/day, we will set the intensity of the light to 50 during the night, and 255 for the day. To learn more about light, please read this ",(0,i.jsx)(n.a,{href:"ManipulateLight",children:"page"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Then, we add a new layer that consists of an image (soil.jpg) by using the ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"image"})})," statement."]}),"\n",(0,i.jsxs)(n.p,{children:["In order to see the people inside the building, we add transparency to the building (0.5). The transparency of a layer is a float value between 0 (solid) and 1 (totally transparent). In order to be able to manage this transparency aspect, OpenGL has to draw the people agents before the building, thus we modify the order of drawing of the different layers (people agents before building agents). At last, we modify the displayed aspect of the people agents by the new one: ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"sphere3D"})}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'experiment main_experiment type:gui{\n    ...\n    output {\n\t...\n\tdisplay map_3D type: opengl {\n\t    light 1 color:(is_night ? 50 : 255);\n\t    image "../includes/soil.jpg";\n\t    species road;\n\t    species people aspect: sphere3D;\t\t\t\n\t    species building transparency: 0.5;\n\t}\n\t...\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"complete-model",children:"Complete Model"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'model model5 \n \nglobal {\n    int nb_people <- 500;\n    float agent_speed <- 5.0 #km/#h;\t\t\t\n    float step <- 1 #minutes;\n    float infection_distance <- 2.0 #m;\n    float proba_infection <- 0.05;\n    int nb_infected_init <- 5;\n    file roads_shapefile <- file("../includes/road.shp");\n    file buildings_shapefile <- file("../includes/building.shp");\n    geometry shape <- envelope(roads_shapefile);\n    graph road_network;\n    float staying_coeff update: 10.0 ^ (1 + min([abs(current_date.hour - 9), abs(current_date.hour - 12), abs(current_date.hour - 18)]));\n    int nb_people_infected <- nb_infected_init update: people count (each.is_infected);\n    int nb_people_not_infected <- nb_people - nb_infected_init update: nb_people - nb_people_infected;\n    bool is_night <- true update: current_date.hour < 7 or current_date.hour > 20;\t\n    float infected_rate update: nb_people_infected / nb_people;\n\n    init {\n\tcreate road from: roads_shapefile;\n\troad_network <- as_edge_graph(road);\n\tcreate building from: buildings_shapefile;\n\tcreate people number:nb_people {\n\t    speed <- agent_speed;\n\t    location <- any_location_in(one_of(building));\n\t}\n\task nb_infected_init among people {\n\t    is_infected <- true;\n\t}\n    }\n    reflex end_simulation when: infected_rate = 1.0 {\n\tdo pause;\n    }\n}\n\nspecies people skills:[moving]{\t\t\n    bool is_infected <- false;\n    point target;\n    int staying_counter;\n\n    reflex stay when: target = nil {\n\tstaying_counter <- staying_counter + 1;\n\tif flip(staying_counter / staying_coeff) {\n\t    target <- any_location_in (one_of(building));\n\t}\n    }\n\t\t\n    reflex move when: target != nil{\n\tdo goto target:target on: road_network;\n\tif (location = target) {\n\t    target <- nil;\n\t    staying_counter <- 0;\n\t} \n    }\n    reflex infect when: is_infected{\n\task people at_distance infection_distance {\n\t    if flip(proba_infection) {\n\t\tis_infected <- true;\n\t    }\n\t}\n    }\n    aspect default{\n\tdraw circle(5) color:is_infected ? #red : #green;\n    }\n    aspect sphere3D{\n\tdraw sphere(3) at: {location.x,location.y,location.z + 3} color: is_infected ? #red : #green;\n    }\n}\n\nspecies road {\n    geometry display_shape <- shape + 2.0;\n    aspect default {\n\tdraw display_shape color: #black depth: 3.0;\n    }\n}\n\nspecies building {\n    float height <- rnd(10#m, 20#m) ;\n\t\n    aspect default {\n\tdraw shape color: #gray border: #black depth: height;\n    }\n}\n\nexperiment main_experiment type:gui{\n    parameter "Infection distance" var: infection_distance;\n    parameter "Proba infection" var: proba_infection min: 0.0 max: 1.0;\n    parameter "Nb people infected at init" var: nb_infected_init ;\n\n    output {\n\tmonitor "Current hour" value: current_date.hour;\n\tmonitor "Infected people rate" value: infected_rate;\n\tdisplay map_3D type: opengl {\n\t    light 1 color:(is_night ? 50 : 255);\n\t    image "../includes/soil.jpg";\n\t    species road ;\n\t    species people aspect:sphere3D;\t\t\t\n\t    species building  transparency: 0.5;\n\t}\n\tdisplay chart refresh: every(10#cycles) {\n\t    chart "Disease spreading" type: series style: spline {\n\t\tdata "susceptible" value: nb_people_not_infected color: #green marker: false;\n\t\tdata "infected" value: nb_people_infected color: #red marker: false;\n\t    }\n\t}\n    }\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,a.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},90052:(e,n,t)=>{t.d(n,{c:()=>i});const i=t.p+"assets/images/Incremental_model5-640acca56cb1eefdfe1fa0a6980f3f44.jpg"},4552:(e,n,t)=>{t.d(n,{I:()=>r,M:()=>l});var i=t(11504);const a={},o=i.createContext(a);function l(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);