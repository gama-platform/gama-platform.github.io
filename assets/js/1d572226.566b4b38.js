"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[57977],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(n),c=i,h=u["".concat(s,".").concat(c)]||u[c]||m[c]||l;return n?a.createElement(h,r(r({ref:t},d),{},{components:n})):a.createElement(h,r({ref:t},d))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:i,r[1]=o;for(var p=2;p<l;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},84784:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>p,toc:()=>u});var a=n(87462),i=n(63366),l=(n(67294),n(3905)),r=["components"],o={title:"Developing Skills"},s=void 0,p={unversionedId:"DevelopingSkills",id:"version-1.9.0/DevelopingSkills",title:"Developing Skills",description:"Defining the class as a skill",source:"@site/versioned_docs/version-1.9.0/DevelopingSkills.md",sourceDirName:".",slug:"/DevelopingSkills",permalink:"/wiki/DevelopingSkills",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/DevelopingSkills/_edit",tags:[],version:"1.9.0",frontMatter:{title:"Developing Skills"},sidebar:"side",previous:{title:"Developing Plugins",permalink:"/wiki/DevelopingPlugins"},next:{title:"Developing Statements",permalink:"/wiki/DevelopingStatements"}},d={},u=[{value:"Defining the class as a skill",id:"defining-the-class-as-a-skill",level:2},{value:"@skill",id:"skill",level:3},{value:"Defining new attributes for the skill",id:"defining-new-attributes-for-the-skill",level:2},{value:"@variable",id:"variable",level:3},{value:"@getter",id:"getter",level:3},{value:"@setter",id:"setter",level:3},{value:"Defining new actions",id:"defining-new-actions",level:2},{value:"@action",id:"action",level:3},{value:"@arg",id:"arg",level:3},{value:"Access to parameters in actions",id:"access-to-parameters-in-actions",level:3},{value:"Warnings",id:"warnings",level:3},{value:"@doc",id:"doc",level:3}],m={toc:u},c="wrapper";function h(e){var t=e.components,n=(0,i.Z)(e,r);return(0,l.kt)(c,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"defining-the-class-as-a-skill"},"Defining the class as a skill"),(0,l.kt)("p",null,"Open the src folder in your plugin. Right click on it. Click on New > Package, add the name 'Skills'. Click on Finish.\nCreate the Java class in this package. Right click on the package -> New -> Class and name it 'FirstSkill'. Click on Finish.\nNow we have an empty Java class. We need to tell gama that this class will be used as skill. To do that we will use annotation."),(0,l.kt)("h3",{id:"skill"},"@skill"),(0,l.kt)("p",null,"This annotations Allows to define a new skill (class grouping variables and actions that can be used by agents)."),(0,l.kt)("p",null,"This annotation contains:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"name")," (String): ",(0,l.kt)("em",{parentName:"li"},"a String representing the skill name in GAML (must be unique throughout GAML)"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"attach","_","to")," (set of strings): ",(0,l.kt)("em",{parentName:"li"},'an array of species names to which the skill will be automatically added (complements the "skills" parameter of species)'),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"internal")," (boolean, false by default): ",(0,l.kt)("em",{parentName:"li"},"return whether this skill is for internal use only"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"doc")," (set of @doc, empty by default): ",(0,l.kt)("em",{parentName:"li"},"the documentation associated to the skill"),".")),(0,l.kt)("p",null,"Note: GAMA annotations are classes defined into the ",(0,l.kt)("inlineCode",{parentName:"p"},"msi.gama.precompiler.GamlAnnotations")," class."),(0,l.kt)("p",null,'Just before the class declaration, add this line to indicate that this class is a skill named "FirstSkill"'),(0,l.kt)("p",null," ",(0,l.kt)("inlineCode",{parentName:"p"},'@skill(name = "firstSkill")')),(0,l.kt)("p",null,"It is a good practice to define all the names of plugins/actions/variables in the IKeyword class, which is located in the plugin msi.gama.common.interfaces.IKeyword.java."),(0,l.kt)("p",null,"In this class you can define a string variable which contain the name of your plugin."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},'String FIRST_SKILL = "FirstSkill";')),(0,l.kt)("p",null,"Now that we have defined a global string containing the name of the plugin, we can use it in the annotation and in the code of the class."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"@skill(name = IKeyword.FIRST_SKILL)")),(0,l.kt)("p",null,"We have now defined that our current class is a skill that can be used in GAMA."),(0,l.kt)("p",null,"To use our plugin in gaml model, we have to create a species using the skill:"),(0,l.kt)("h2",{id:"defining-new-attributes-for-the-skill"},"Defining new attributes for the skill"),(0,l.kt)("p",null,"Now we have a skill that is empty. So we need to add some variable for the plugin to have a purpose."),(0,l.kt)("p",null,"To add new attributes to the species that declares this skill, we have to define them before the class using annotation like we did before."),(0,l.kt)("h3",{id:"variable"},"@variable"),(0,l.kt)("p",null,"This annotations is used to describe a single variable or field."),(0,l.kt)("p",null,"This annotation contains:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"name")," (String): ",(0,l.kt)("em",{parentName:"li"},"the name of the variable as it can be used in GAML"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"type")," (int): ",(0,l.kt)("em",{parentName:"li"},"The textual representation of the type of the variable (see IType)"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"of")," (int, 0 by default): ",(0,l.kt)("em",{parentName:"li"},"The textual representation of the content type of the variable (see IType#defaultContentType())"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"index")," (int, 0 by default): ",(0,l.kt)("em",{parentName:"li"},"The textual representation of the index type of the variable (see IType#defaultKeyType())"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"constant")," (int, false by default): ",(0,l.kt)("em",{parentName:"li"},"returns whether or not this variable should be considered as non modifiable"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"init"),' (String, "" by default): ',(0,l.kt)("em",{parentName:"li"},"the initial value of this variable as a String that will be interpreted by GAML"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"depend","_","on")," (set of Strings, empty by default): ",(0,l.kt)("em",{parentName:"li"},"an array of String representing the names of the variables on which this variable depends (so that they are computed before)"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"internal")," (boolean, false by default): ",(0,l.kt)("em",{parentName:"li"},"return whether this var is for internal use only"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"doc")," (set of @doc, empty by default): ",(0,l.kt)("em",{parentName:"li"},"the documentation associated to the variable"),".")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"@vars")," annotation contains a set of ",(0,l.kt)("inlineCode",{parentName:"p"},"@variable")," elements."),(0,l.kt)("p",null,"Just like we did before with the declaration of the name of our skill, we can declare globally the name of our incomming new variables, in the IKeyword class."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},'String FIRST_VARIABLE = "FirstVariable";'),"\n",(0,l.kt)("inlineCode",{parentName:"p"},'String SECOND_VARIABLE = "SecondVariable";')),(0,l.kt)("p",null,"Now that we have defined the names of our variables, we need to declare them in our skill class."),(0,l.kt)("p",null,"Here is how to declare the variables:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'@vars({\n  @variable(name = IKeyword.FIRST_VARIABLE, type = IType.INT, init = "1"),\n  @variable(name = IKeyword.SECOND_VARIABLE, type = IType.FLOAT, init = "1.0")\n})\n')),(0,l.kt)("p",null,"In order to access these new attributes, in the GAMA application, you need to define ",(0,l.kt)("inlineCode",{parentName:"p"},"@getter")," and  ",(0,l.kt)("inlineCode",{parentName:"p"},"@setter")," methods:"),(0,l.kt)("h3",{id:"getter"},"@getter"),(0,l.kt)("p",null,"This annotations is used to indicate that a method is to be used as a getter for a variable defined in the class. The variable must be defined on its own (in vars)."),(0,l.kt)("p",null,"This annotation contains:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value")," (String): the name of the variable for which the annotated method is to be considered as a getter."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"initializer")," (boolean, false by default): returns whether or not this getter should also be used as an initializer")),(0,l.kt)("h3",{id:"setter"},"@setter"),(0,l.kt)("p",null,"This annotations is used to indicate that a method is to be used as a setter for a variable defined in the class. The variable must be defined on its own (in vars)."),(0,l.kt)("p",null,"This annotation contains:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value")," (String): the name of the variable for which the annotated method is to be considered as a setter.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"@getter(IKeyword.FIRST_VARIABLE)\npublic int getFirstVariable(final IAgent agent) {\n    return (int) agent.getAttribute(IKeyword.FIRST_VARIABLE);\n}\n\n@setter(IKeyword.FIRST_VARIABLE)\npublic void setFirstVariable(final IAgent agent, final int value) {\n    agent.setAttribute(IKeyword.FIRST_VARIABLE, value);\n}\n\n@getter(IKeyword.SECOND_VARIABLE)\npublic double getFirstVariable(final IAgent agent) {\n    return (double) agent.getAttribute(IKeyword.SECOND_VARIABLE);\n}\n\n@setter(IKeyword.SECOND_VARIABLE)\npublic void setFirstVariable(final IAgent agent, final double value) {\n    agent.setAttribute(IKeyword.SECOND_VARIABLE, value);\n}\n\n")),(0,l.kt)("h2",{id:"defining-new-actions"},"Defining new actions"),(0,l.kt)("p",null,"An action (also called ",(0,l.kt)("inlineCode",{parentName:"p"},"primitive"),") is basically a Java method that can be called from the GAML language using the same syntax as the one used for calling actions defined in a model. The method should be annotated with ",(0,l.kt)("inlineCode",{parentName:"p"},"@action"),", supplying the name of the action as it will be available in GAML."),(0,l.kt)("h3",{id:"action"},"@action"),(0,l.kt)("p",null,"This annotations is used to tag a method that will be considered as an action (or primitive) in GAML.\nThe method must have the following signature: ",(0,l.kt)("inlineCode",{parentName:"p"},"Object methodName(IScope) throws GamaRuntimeException")," and be contained in a class annotated with @species or @skill (or a related class, like a subclass or an interface)."),(0,l.kt)("p",null,"This annotation contains:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"name")," (String): ",(0,l.kt)("em",{parentName:"li"},"the name of the variable as it can be used in GAML"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"virtual")," (boolean, false by default): ",(0,l.kt)("em",{parentName:"li"},"if true the action is virtual, i.e. equivalent to abstract method in java"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"args")," (set of arg, empty by default): ",(0,l.kt)("em",{parentName:"li"},"the list of arguments passed to this action. Each argument is an instance of arg"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"doc")," (set of @doc, empty by default): ",(0,l.kt)("em",{parentName:"li"},"the documentation associated to the action"),".")),(0,l.kt)("p",null,"We can also define parameters for this action using the annotation ",(0,l.kt)("inlineCode",{parentName:"p"},"@arg")," will a set of parameters names. "),(0,l.kt)("h3",{id:"arg"},"@arg"),(0,l.kt)("p",null,"This annotations describes an argument passed to an action."),(0,l.kt)("p",null,"This annotation contains:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"name"),' (String, "" by default): ',(0,l.kt)("em",{parentName:"li"},"the name of the argument as it can be used in GAML"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"type")," (set of ints, empty by default): ",(0,l.kt)("em",{parentName:"li"},"An array containing the textual representation of the types that can be taken by the argument (see IType)"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"optional")," (boolean, true by default): ",(0,l.kt)("em",{parentName:"li"},"whether this argument is optional or not"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"doc")," (set of @doc, empty by default): ",(0,l.kt)("em",{parentName:"li"},"the documentation associated to the argument."))),(0,l.kt)("p",null,"Here is an example of an empty action for our skill (dont forget to define every keywords like ",(0,l.kt)("inlineCode",{parentName:"p"},"IKeyword.NUMBER_TO_ADD")," in the IKeyword class):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'@action(name = "add", \n        args = {\n            @arg(name = IKeyword.NUMBER_TO_ADD, type = IType.INT, optional = false)})\n@doc("Function to add a number to FirstVariable")\npublic int add(final IScope scope){\n    return 0;\n}\n\n')),(0,l.kt)("p",null,"Now that we have defined the action we can access the parameter ",(0,l.kt)("inlineCode",{parentName:"p"},"IKeyword.NUMBER_TO_ADD")," and use it as we want."),(0,l.kt)("h3",{id:"access-to-parameters-in-actions"},"Access to parameters in actions"),(0,l.kt)("p",null,"To get the value of the arguments passed in GAML to the Java code, two methods can be useful:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'scope.hasArg("name_of_argument")'),' returns a boolean value testing whether the argument "name',"_","of","_",'argument" has been defined by the modeler, since all the arguments to actions should be considered as optional.'),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"getArg(name_arg,IType)"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"getFloatArg(name_param_of_float)"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"getIntArg(name_param_of_int)")," and their variants return the value of the given parameter using a given (or predefined) type to cast it.")),(0,l.kt)("h3",{id:"warnings"},"Warnings"),(0,l.kt)("p",null,"Developers should notice that:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the method should have only one parameter: the scope (type IScope)."),(0,l.kt)("li",{parentName:"ul"},"the method can only throw ",(0,l.kt)("inlineCode",{parentName:"li"},"GamaRuntimeExceptions"),". Other exceptions should be caught in the method and wrapped in a ",(0,l.kt)("inlineCode",{parentName:"li"},"GamaRuntimeException")," before being thrown.")),(0,l.kt)("p",null,"Here is the complete action code :"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'@action(name = "add", \n        args = {\n            @arg(name = IKeyword.NUMBER_TO_ADD, type = IType.INT, optional = false)})\n@doc("Function to add a number to FirstVariable")\npublic int add(final IScope scope)\n{\n    int firstVariable = getVariable(scope.getAgent());\n    int numberToAdd = (Integer) scope.getArg(IKeyword.NUMBER_TO_ADD);\n\n    setVariable(scope.getAgent(), firstVariable + numberToAdd);\n\n    return firstVariable + numberToAdd;\n}\n')),(0,l.kt)("p",null,"It is called in GAMA models with:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"do add(8);\n")),(0,l.kt)("p",null,"or"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"int result <- add(15);\n")),(0,l.kt)("p",null,"For our action we used the annotation ",(0,l.kt)("inlineCode",{parentName:"p"},"@doc")," to give a description of what the purpose of the action."),(0,l.kt)("h3",{id:"doc"},"@doc"),(0,l.kt)("p",null,"It provides a unified way of attaching documentation to the various GAML elements tagged by the other annotations. The documentation is automatically assembled at compile time and also used at runtime in GAML editors."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value"),' (String, "" by default): ',(0,l.kt)("em",{parentName:"li"},"a String representing the documentation of a GAML element"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"deprecated"),' (String, "" by default): ',(0,l.kt)("em",{parentName:"li"},"a String indicating (if it is not empty) that the element is deprecated and defining, if possible, what to use instead"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"returns"),' (String, "" by default): ',(0,l.kt)("em",{parentName:"li"},"the documentation concerning the value(s) returned by this element (if any)."),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"comment"),' (String, "" by default): ',(0,l.kt)("em",{parentName:"li"},"an optional comment that will appear differently from the documentation itself"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"special","_","cases")," (set of Strings, empty by default): ",(0,l.kt)("em",{parentName:"li"},'an array of String representing the documentation of the "special cases" in which the documented element takes part'),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"examples")," (set of Strings, empty by default): ",(0,l.kt)("em",{parentName:"li"},"an array of String representing some examples or use-cases about how to use this element"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"see")," (set of Strings, empty by default): ",(0,l.kt)("em",{parentName:"li"},"an array of String representing cross-references to other elements in GAML"),".")),(0,l.kt)("p",null,"All these annotations are defined in the ",(0,l.kt)("inlineCode",{parentName:"p"},"GamlAnnotations.java")," file of the ",(0,l.kt)("inlineCode",{parentName:"p"},"msi.gama.processor")," plug-in."))}h.isMDXComponent=!0}}]);