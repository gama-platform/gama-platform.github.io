"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[29521],{3905:(e,n,t)=>{t.d(n,{Zo:()=>h,kt:()=>g});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},h=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),d=c(t),u=o,g=d["".concat(s,".").concat(u)]||d[u]||p[u]||r;return t?a.createElement(g,i(i({ref:n},h),{},{components:t})):a.createElement(g,i({ref:n},h))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<r;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},87986:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>s,default:()=>g,frontMatter:()=>l,metadata:()=>c,toc:()=>d});var a=t(87462),o=t(63366),r=(t(67294),t(3905)),i=["components"],l={"^title":"Eroding Volcano"},s=void 0,c={unversionedId:"Eroding_Volcano",id:"Eroding_Volcano",title:"Eroding_Volcano",description:"Path: Plugin models/Physics Engine/models/Eroding Volcano.gaml",source:"@site/../docs/Eroding_Volcano.md",sourceDirName:".",slug:"/Eroding_Volcano",permalink:"/wiki/next/Eroding_Volcano",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/Eroding_Volcano/_edit",tags:[],version:"current",frontMatter:{"^title":"Eroding Volcano"}},h={},d=[],p={toc:d},u="wrapper";function g(e){var n=e.components,t=(0,o.Z)(e,i);return(0,r.kt)(u,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("img",{width:"960",alt:"Annotation 2023-04-15 193838_erodingVolcano",src:"https://user-images.githubusercontent.com/4437331/232244964-3fb839a5-2370-44cb-9e35-bb1726849aa5.png"}),(0,r.kt)("p",null,"Path: Plugin models/Physics Engine/models/Eroding Volcano.gaml"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'\n/**\n* Name: Eroding Vulcano\n* Author: Alexis Drogoul - 2021\n* Description: This is a model that shows how the physics engine works, especially with the definition of uneven terrains, the dynamic\n* change of shapes of agents and the callback actions when contacts occur between agents. \n* A vulcano, situated at the highest point of a DEM, erupts and the lava, falling down on the ground, erodes every patch of terrain it touches. The \n* slope of the terrain evolves as more and more lava is produced (the epicenter of the eruption even changing when higher patches appear).\n* Tags: physics_engine, 3D, grid\n*/\n\n\nmodel Vulcano\n/**\n * The model is inheriting from \'physical_world\' a special model species that provides access to the physics engine -- and the possibility\n * to manage physical agents. In this model, the world itself is not a physical agent\n */\nglobal parent: physical_world {\n    bool use_native <- true;\n    //Step (in #sec) passed to the physics engine. The same step is used for the simulation and the physics engine. The accuracy and synchronization\n    //between the two can be controlled by max_substeps. A too large step (e.g. 1#sec) would make the lava \'pass through\' the ground (tunnel effect).\n    //A too small (e.g. 0.01), while more accurate, would, given the velocity of the lava, slow everything down on useless computations.\n    float step <-  0.05;\n    //A boolean that controls whether or not the lava will erode the ground\n    bool erosion;\n    float uncertainty -> {rnd(10.0) - 5};\n    // Support for display parameters\n    bool show_legend;\n    bool draw_inside;\n    //Every step the world creates a lava agent near the top of the highest patch in the terrain. It is provided with an initial high vertical velocity.\n    reflex flow {\n        patches highest <- patches with_max_of each.grid_value;\n        ask highest {\n            create lava number: 1 {\n                location <- {highest.location.x + uncertainty, highest.location.y + uncertainty, highest.grid_value + uncertainty};\n                velocity <- velocity + {0,0,rnd(60) - 20};\n            }\n        }\n    }\n}\n\n/**\n * The patches come as a grid created after a simple DEM file and each cell is provided with a \'static body\' in the physical world. The whole grid represents\n * an approximate terrain (or heightmap). Since the patches are agents, they can individually respond to events or have their own behavior, making the whole \n * a powerful way to describe dynamic environments.\n */\ngrid patches file: grid_file("../images/DEM/Volcano DEM.asc") skills: [static_body] {\n    float friction <- 0.5;\n    float restitution <- 0.2;\n    \n    //This action is a \'callback\' action, one of the two (with \'contact_removed_with\') called by the physics engine when a contact occurs between two agents. \n    // When redefined, it allows agents to react to contacts. Here, every new contact with a lava agent makes a patch decrease its height (grid_value) \n    // and that of its neigbors by a small amount, as well as stop the lava agent quite brutally (clearing all the forces applied to it) to imitate "stickiness"\n    action contact_added_with (agent other) {\n        if (erosion) {\n            grid_value <- grid_value - 0.01;\n            ask neighbors {\n                grid_value <- grid_value - 0.005;\n                do update_body;\n            }\n            do update_body;\n        }\n    }\n    \n    aspect default {\n        if (draw_inside) {draw aabb wireframe: true border: #white;}\n    }\n}\n\n/**\n * Species that represents the lava erupting from the vulcano. Their physical body will be a sphere, weighting 4#kg, offering no restitution but a lot of friction.\n */\nspecies lava skills: [dynamic_body] {\n    geometry shape <- sphere(0.75);\n    float mass <- 1.0;\n    rgb color <- one_of (brewer_colors("Reds"));\n    float restitution <- 0.2;\n    float friction <- 0.3;\n    float damping <- 0.1;\n    float angular_damping<-0.1;\n\n    //When a lava agent falls from the edges of the world, it is removed from the simulation (and the physical world as well).      \n    reflex manage_location when: location.z < -20 {\n        do die;\n    }\n    \n    aspect default {\n        draw shape color: color; \n        if (draw_inside) {\n            draw aabb color: #lightblue wireframe: true;\n            draw line(location, location+velocity) color: #yellow end_arrow: 1 width: 1;\n        }\n    }\n\n} \n\n\nexperiment "3D view" type: gui {\n    font title  <- font("Helvetica", 12, #bold);\n    parameter "Show inside structures (velocities and aabbs)" var: draw_inside <- false;\n    parameter "Better collision detection" var: accurate_collision_detection <- false;\n    parameter "Enable erosion" var: erosion <- false;\n    parameter "Show legend" var: show_legend <- true;\n    output {\n        \n        display "3D" type: 3d axes: false background: #black camera:#from_up_front antialias: false {\n            graphics title {\n                if (show_legend) {\n                    draw "Average height " + (patches mean_of each.grid_value) with_precision 2 + " / # of lava agents " + length(lava) color: #white font: title at: {world.location.x, 100, patches max_of each.grid_value + 10} anchor: #center depth: 2 rotate: -20::{1,0,0};\n                }\n            }\n            //The terrain is represented as a field (but could be equally represented as a grid     \n            mesh patches  texture: image_file("../images/DEM/Volcano Texture.jpg") triangulation: true smooth: true;\n            //We add to the representation the individual \'aabb\'s (axis-aligned bounding boxes) of the patches if \'draw_inside\' is true\n            species patches;\n            //Finally, each lava agent is represented (with its velocity if \'draw_inside\' is true)\n            species lava;\n        }\n\n    }\n\n}\n\n\n')))}g.isMDXComponent=!0}}]);