"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[42858],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},f="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),f=s(n),g=i,h=f["".concat(p,".").concat(g)]||f[g]||u[g]||a;return n?r.createElement(h,o(o({ref:t},c),{},{components:n})):r.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=g;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[f]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},45715:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>f});var r=n(87462),i=n(63366),a=(n(67294),n(3905)),o=["components"],l={"^title":"Shapefile to Agents"},p=void 0,s={unversionedId:"Shapefile_to_Agents",id:"Shapefile_to_Agents",title:"Shapefile_to_Agents",description:"Path: Library models/Data/Data Importation/models/SHP Import.gaml",source:"@site/../docs/Shapefile_to_Agents.md",sourceDirName:".",slug:"/Shapefile_to_Agents",permalink:"/wiki/next/Shapefile_to_Agents",draft:!1,editUrl:"https://github.com/gama-platform/gama/wiki/Shapefile_to_Agents/_edit",tags:[],version:"current",frontMatter:{"^title":"Shapefile to Agents"}},c={},f=[],u={toc:f},g="wrapper";function h(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)(g,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("img",{width:"960",alt:"Annotation 2023-04-17 045858_shpImport",src:"https://user-images.githubusercontent.com/4437331/232368120-c0eece0e-edf2-454f-96e3-f0555aca09df.png"}),(0,a.kt)("p",null,"Path: Library models/Data/Data Importation/models/SHP Import.gaml"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'\n/**\n* Name: Shapefile to Agents\n* Author:  Patrick Taillandier\n* Description: Model which shows how to import a Shapefile in GAMA and use it to create Agents.\n* Tags:  load_file, shapefile, gis\n*/\nmodel simpleShapefileLoading\n\n\n\nglobal {\n    file shape_file_buildings <- shape_file("../includes/buildings_simple.shp");\n    \n    //definition of the geometry of the world agent (environment) as the envelope of the shapefile\n    geometry shape <- envelope(shape_file_buildings);\n    \n    init {\n        //creation of the building agents from the shapefile: the height and type attributes of the building agents are initialized according to the HEIGHT and NATURE attributes of the shapefile\n        create building from: shape_file_buildings with:[height::float(get("HEIGHT")), type::string(get("NATURE"))];\n    }\n}\n\nspecies building {\n    float height;\n    string type;\n    rgb color <- type = "Industrial" ? #pink : #gray;\n    \n    aspect default {\n        draw shape depth: height color: color;\n    }\n    \n}\n\nexperiment GIS_agentification type: gui {\n    output {\n        display city_display type: 3d axes:false{\n            species building;\n        }\n    }\n}\n\n\n\n')))}h.isMDXComponent=!0}}]);